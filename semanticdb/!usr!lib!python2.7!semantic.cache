;; Object python2.7/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "python2.7/"
  :tables
  (list
    (semanticdb-table "os.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"OS routines for Mac, NT, or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
  - os.path is one of the modules posixpath, or ntpath
  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')
  - os.extsep is the extension separator ('.' or '/')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1163])
            ("errno" include nil nil [1169 1186])
            ("sys" include nil nil [1169 1186])
            ("_names" variable nil nil [1188 1221])
            ("__all__" variable nil nil [1271 1446])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1470 1476]))              ) nil [1448 1606])
            ("if" code nil nil [1607 3137])
            ("sys" variable nil nil [3138 3167])
            ("" code nil nil [3188 3256])
            ("del" code nil nil [3258 3268])
            ("SEEK_SET" variable nil nil [3390 3402])
            ("SEEK_CUR" variable nil nil [3403 3415])
            ("SEEK_END" variable nil nil [3416 3428])
            ("makedirs" function
               (:documentation "makedirs(path [, mode=0777])

    Super-mkdir; create a leaf directory and all intermediate ones.
    Works like mkdir, except that any intermediate path segment (not
    just the rightmost) will be created if it does not exist.  This is
    recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3538 3542])
                    ("mode" variable nil (reparse-symbol function_parameters) [3544 3548]))                  )
                nil [3525 4277])
            ("removedirs" function
               (:documentation "removedirs(path)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4293 4297]))                  )
                nil [4278 4984])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned way until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [4997 5000])
                    ("new" variable nil (reparse-symbol function_parameters) [5002 5005]))                  )
                nil [4985 5856])
            ("__all__" code nil nil [5857 5910])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune
    the search, or to impose a specific order of visiting.  Modifying
    dirnames when topdown is false is ineffective, since the directories in
    dirnames have already been generated by the time dirnames itself is
    generated.

    By default errors from the os.listdir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an os.error instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print root, \"consumes\",
        print sum([getsize(join(root, name)) for name in files]),
        print \"bytes in\", len(files), \"non-directory files\"
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories
    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [5921 5924])
                    ("topdown" variable nil (reparse-symbol function_parameters) [5926 5933])
                    ("onerror" variable nil (reparse-symbol function_parameters) [5940 5947])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [5954 5965]))                  )
                nil [5912 9693])
            ("__all__" code nil nil [9694 9716])
            ("try" code nil nil [9758 9810])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9821 9825])
                    ("args" variable nil (reparse-symbol function_parameters) [9827 9832]))                  )
                nil [9811 9980])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9992 9996])
                    ("args" variable nil (reparse-symbol function_parameters) [9998 10003]))                  )
                nil [9981 10207])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10219 10223])
                    ("args" variable nil (reparse-symbol function_parameters) [10225 10230]))                  )
                nil [10208 10416])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10429 10433])
                    ("args" variable nil (reparse-symbol function_parameters) [10435 10440]))                  )
                nil [10417 10686])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10698 10702])
                    ("args" variable nil (reparse-symbol function_parameters) [10704 10708]))                  )
                nil [10687 10939])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10952 10956])
                    ("args" variable nil (reparse-symbol function_parameters) [10958 10962])
                    ("env" variable nil (reparse-symbol function_parameters) [10964 10967]))                  )
                nil [10940 11234])
            ("__all__" code nil nil [11235 11307])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [11322 11326])
                ("args" variable nil (reparse-symbol function_parameters) [11328 11332])
                ("env" variable nil (reparse-symbol function_parameters) [11334 11337]))              ) nil [11309 12177])
            ("try" code nil nil [12239 16448])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [16460 16463])
                    ("default" variable nil (reparse-symbol function_parameters) [16465 16472]))                  )
                nil [16449 16656])
            ("__all__" code nil nil [16656 16680])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16694 16698]))              ) nil [16682 16730])
            ("if" code nil nil [16774 19677])
            ("if" code nil nil [19678 20675])
            ("if" code nil nil [20677 21783])
            ("if" code nil nil [21817 25083])
            ("copy_reg" include nil nil [25084 25112])
            ("_make_stat_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25136 25139])
                ("dict" variable nil (reparse-symbol function_parameters) [25141 25145]))              ) nil [25114 25182])
            ("_pickle_stat_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25207 25209]))              ) nil [25183 25284])
            ("try" code nil nil [25285 25419])
            ("_make_statvfs_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25445 25448])
                ("dict" variable nil (reparse-symbol function_parameters) [25450 25454]))              ) nil [25420 25494])
            ("_pickle_statvfs_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25522 25524]))              ) nil [25495 25602])
            ("try" code nil nil [25603 25770]))          
      :file "os.py"
      :pointmax 25770
      :fsize 25769
      :lastmodtime '(21896 22713 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "pdb.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"A Python debugger.\"\"\"" code nil nil [24 48])
            ("sys" include nil nil [86 96])
            ("linecache" include nil nil [97 113])
            ("cmd" include nil nil [114 124])
            ("bdb" include nil nil [125 135])
            ("repr" include nil nil [136 157])
            ("os" include nil nil [158 167])
            ("re" include nil nil [168 177])
            ("pprint" include nil nil [178 191])
            ("traceback" include nil nil [192 208])
            ("Restart" type
               (:documentation "Causes a debugger to be restarted for the debugged python program."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [318 322]))                  
                :type "class")
                nil [211 323])
            ("_repr" variable nil nil [446 460])
            ("_repr" variable nil nil [461 482])
            ("_saferepr" variable nil nil [483 505])
            ("__all__" variable nil nil [507 616])
            ("find_function" function (:arguments 
              ( ("funcname" variable nil (reparse-symbol function_parameters) [636 644])
                ("filename" variable nil (reparse-symbol function_parameters) [646 654]))              ) nil [618 1126])
            ("line_prefix" variable nil nil [1435 1456])
            ("Pdb" type
               (:superclasses ("bdb.Bdb" "cmd.Cmd")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("bdb" code nil (reparse-symbol indented_block_body) [1605 1638])
                            ("cmd" code nil (reparse-symbol indented_block_body) [1647 1697])
                            ("if" code nil (reparse-symbol indented_block_body) [1706 1751])
                            ("self" variable nil (reparse-symbol indented_block_body) [1759 1781])
                            ("self" variable nil (reparse-symbol indented_block_body) [1790 1807])
                            ("self" variable nil (reparse-symbol indented_block_body) [1816 1836])
                            ("self" variable nil (reparse-symbol indented_block_body) [1845 1874])
                            ("try" code nil (reparse-symbol indented_block_body) [1927 2005])
                            ("self" variable nil (reparse-symbol indented_block_body) [2055 2072])
                            ("if" code nil (reparse-symbol indented_block_body) [2081 2419])
                            ("try" code nil (reparse-symbol indented_block_body) [2427 2636])
                            ("self" variable nil (reparse-symbol indented_block_body) [2645 2663])
                            ("self" variable nil (reparse-symbol indented_block_body) [2722 2749])
                            ("self" variable nil (reparse-symbol indented_block_body) [2876 2901])
                            ("self" variable nil (reparse-symbol indented_block_body) [3031 3061])
                            ("self" variable nil (reparse-symbol indented_block_body) [3166 3191]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1535 1539])
                            ("completekey" variable nil (reparse-symbol function_parameters) [1541 1552])
                            ("stdin" variable nil (reparse-symbol function_parameters) [1560 1565])
                            ("stdout" variable nil (reparse-symbol function_parameters) [1572 1578])
                            ("skip" variable nil (reparse-symbol function_parameters) [1585 1589]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1522 3233])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3300 3304]))                          )
                        (reparse-symbol indented_block_body) [3290 3357])
                    ("forget" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3373 3377]))                          )
                        (reparse-symbol indented_block_body) [3362 3486])
                    ("setup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3501 3505])
                            ("f" variable nil (reparse-symbol function_parameters) [3507 3508])
                            ("t" variable nil (reparse-symbol function_parameters) [3510 3511]))                          )
                        (reparse-symbol indented_block_body) [3491 3934])
                    ("execRcLines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4009 4013]))                          )
                        (reparse-symbol indented_block_body) [3993 4347])
                    ("user_call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4394 4398])
                            ("frame" variable nil (reparse-symbol function_parameters) [4400 4405])
                            ("argument_list" variable nil (reparse-symbol function_parameters) [4407 4420]))                          
                        :documentation "This method is called when there is the remote possibility
        that we ever need to stop in this function.")
                        (reparse-symbol indented_block_body) [4380 4725])
                    ("user_line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4744 4748])
                            ("frame" variable nil (reparse-symbol function_parameters) [4750 4755]))                          
                        :documentation "This function is called when we stop or break at this line.")
                        (reparse-symbol indented_block_body) [4730 5127])
                    ("bp_commands" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5148 5152])
                            ("frame" variable nil (reparse-symbol function_parameters) [5153 5158]))                          
                        :documentation "Call every command that was set for the current active breakpoint
        (if there is one).

        Returns True if the normal interaction function must be called,
        False otherwise.")
                        (reparse-symbol indented_block_body) [5132 6077])
                    ("user_return" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6098 6102])
                            ("frame" variable nil (reparse-symbol function_parameters) [6104 6109])
                            ("return_value" variable nil (reparse-symbol function_parameters) [6111 6123]))                          
                        :documentation "This function is called when a return trap is set here.")
                        (reparse-symbol indented_block_body) [6082 6385])
                    ("user_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6409 6413])
                            ("frame" variable nil (reparse-symbol function_parameters) [6415 6420])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [6422 6430]))                          
                        :documentation "This function is called if an exception occurs,
        but only if we are to stop at or just below this level.")
                        (reparse-symbol indented_block_body) [6390 6974])
                    ("interaction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7031 7035])
                            ("frame" variable nil (reparse-symbol function_parameters) [7037 7042])
                            ("traceback" variable nil (reparse-symbol function_parameters) [7044 7053]))                          )
                        (reparse-symbol indented_block_body) [7015 7196])
                    ("displayhook" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7217 7221])
                            ("obj" variable nil (reparse-symbol function_parameters) [7223 7226]))                          
                        :documentation "Custom displayhook for the exec in default(), which prevents
        assignment of the _ variable in the builtins.
        ")
                        (reparse-symbol indented_block_body) [7201 7503])
                    ("default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7520 7524])
                            ("line" variable nil (reparse-symbol function_parameters) [7526 7530]))                          )
                        (reparse-symbol indented_block_body) [7508 8427])
                    ("precmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8443 8447])
                            ("line" variable nil (reparse-symbol function_parameters) [8449 8453]))                          
                        :documentation "Handle alias expansion and ';;' separator.")
                        (reparse-symbol indented_block_body) [8432 9332])
                    ("onecmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9348 9352])
                            ("line" variable nil (reparse-symbol function_parameters) [9354 9358]))                          
                        :documentation "Interpret the argument as though it had been typed in response
        to the prompt.

        Checks whether this line is typed at the normal prompt or in
        a breakpoint command list definition.
        ")
                        (reparse-symbol indented_block_body) [9337 9734])
                    ("handle_command_def" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9762 9766])
                            ("line" variable nil (reparse-symbol function_parameters) [9767 9771]))                          
                        :documentation "Handles one command line during command list definition.")
                        (reparse-symbol indented_block_body) [9739 10719])
                    ("do_h" variable nil (reparse-symbol indented_block_body) [10883 10905])
                    ("do_commands" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10927 10931])
                            ("arg" variable nil (reparse-symbol function_parameters) [10933 10936]))                          
                        :documentation "Defines a list of commands associated to a breakpoint.

        Those commands will be executed whenever the breakpoint causes
        the program to stop execution.")
                        (reparse-symbol indented_block_body) [10911 11823])
                    ("do_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11841 11845])
                            ("arg" variable nil (reparse-symbol function_parameters) [11847 11850])
                            ("temporary" variable nil (reparse-symbol function_parameters) [11852 11861]))                          )
                        (reparse-symbol indented_block_body) [11828 15231])
                    ("defaultFile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15296 15300]))                          
                        :documentation "Produce a reasonable default.")
                        (reparse-symbol indented_block_body) [15280 15517])
                    ("do_b" variable nil (reparse-symbol indented_block_body) [15522 15537])
                    ("do_tbreak" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15557 15561])
                            ("arg" variable nil (reparse-symbol function_parameters) [15563 15566]))                          )
                        (reparse-symbol indented_block_body) [15543 15599])
                    ("lineinfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15617 15621])
                            ("identifier" variable nil (reparse-symbol function_parameters) [15623 15633]))                          )
                        (reparse-symbol indented_block_body) [15604 16659])
                    ("checkline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16678 16682])
                            ("filename" variable nil (reparse-symbol function_parameters) [16684 16692])
                            ("lineno" variable nil (reparse-symbol function_parameters) [16694 16700]))                          
                        :documentation "Check whether specified line seems to be executable.

        Return `lineno` if it is, 0 if not (e.g. a docstring, comment, blank
        line or EOF). Warning: testing is not comprehensive.
        ")
                        (reparse-symbol indented_block_body) [16664 17562])
                    ("do_enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17581 17585])
                            ("arg" variable nil (reparse-symbol function_parameters) [17587 17590]))                          )
                        (reparse-symbol indented_block_body) [17567 18069])
                    ("do_disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18089 18093])
                            ("arg" variable nil (reparse-symbol function_parameters) [18095 18098]))                          )
                        (reparse-symbol indented_block_body) [18074 18578])
                    ("do_condition" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18600 18604])
                            ("arg" variable nil (reparse-symbol function_parameters) [18606 18609]))                          )
                        (reparse-symbol indented_block_body) [18583 19381])
                    ("do_ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19400 19404])
                            ("arg" variable nil (reparse-symbol function_parameters) [19405 19408]))                          
                        :documentation "arg is bp number followed by ignore count.")
                        (reparse-symbol indented_block_body) [19386 20504])
                    ("do_clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20522 20526])
                            ("arg" variable nil (reparse-symbol function_parameters) [20528 20531]))                          
                        :documentation "Three possibilities, tried in this order:
        clear -> clear all breaks, ask for confirmation
        clear file:lineno -> clear all breaks at file:lineno
        clear bpno bpno ... -> clear breakpoints by number")
                        (reparse-symbol indented_block_body) [20509 22098])
                    ("do_cl" variable nil (reparse-symbol indented_block_body) [22102 22118])
                    ("do_where" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22185 22189])
                            ("arg" variable nil (reparse-symbol function_parameters) [22191 22194]))                          )
                        (reparse-symbol indented_block_body) [22172 22230])
                    ("do_w" variable nil (reparse-symbol indented_block_body) [22234 22249])
                    ("do_bt" variable nil (reparse-symbol indented_block_body) [22254 22270])
                    ("do_up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22286 22290])
                            ("arg" variable nil (reparse-symbol function_parameters) [22292 22295]))                          )
                        (reparse-symbol indented_block_body) [22276 22649])
                    ("do_u" variable nil (reparse-symbol indented_block_body) [22653 22665])
                    ("do_down" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22683 22687])
                            ("arg" variable nil (reparse-symbol function_parameters) [22689 22692]))                          )
                        (reparse-symbol indented_block_body) [22671 23064])
                    ("do_d" variable nil (reparse-symbol indented_block_body) [23068 23082])
                    ("do_until" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23101 23105])
                            ("arg" variable nil (reparse-symbol function_parameters) [23107 23110]))                          )
                        (reparse-symbol indented_block_body) [23088 23168])
                    ("do_unt" variable nil (reparse-symbol indented_block_body) [23172 23189])
                    ("do_step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23207 23211])
                            ("arg" variable nil (reparse-symbol function_parameters) [23213 23216]))                          )
                        (reparse-symbol indented_block_body) [23195 23260])
                    ("do_s" variable nil (reparse-symbol indented_block_body) [23264 23278])
                    ("do_next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23296 23300])
                            ("arg" variable nil (reparse-symbol function_parameters) [23302 23305]))                          )
                        (reparse-symbol indented_block_body) [23284 23362])
                    ("do_n" variable nil (reparse-symbol indented_block_body) [23366 23380])
                    ("do_run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23397 23401])
                            ("arg" variable nil (reparse-symbol function_parameters) [23403 23406]))                          
                        :documentation "Restart program by raising an exception to be caught in the main
        debugger loop.  If arguments were given, set them in sys.argv.")
                        (reparse-symbol indented_block_body) [23386 23729])
                    ("do_restart" variable nil (reparse-symbol indented_block_body) [23734 23753])
                    ("do_return" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23773 23777])
                            ("arg" variable nil (reparse-symbol function_parameters) [23779 23782]))                          )
                        (reparse-symbol indented_block_body) [23759 23841])
                    ("do_r" variable nil (reparse-symbol indented_block_body) [23845 23861])
                    ("do_continue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23883 23887])
                            ("arg" variable nil (reparse-symbol function_parameters) [23889 23892]))                          )
                        (reparse-symbol indented_block_body) [23867 23940])
                    ("do_c" variable nil (reparse-symbol indented_block_body) [23944 23972])
                    ("do_jump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23990 23994])
                            ("arg" variable nil (reparse-symbol function_parameters) [23996 23999]))                          )
                        (reparse-symbol indented_block_body) [23978 24721])
                    ("do_j" variable nil (reparse-symbol indented_block_body) [24725 24739])
                    ("do_debug" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24758 24762])
                            ("arg" variable nil (reparse-symbol function_parameters) [24764 24767]))                          )
                        (reparse-symbol indented_block_body) [24745 25233])
                    ("do_quit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25250 25254])
                            ("arg" variable nil (reparse-symbol function_parameters) [25256 25259]))                          )
                        (reparse-symbol indented_block_body) [25238 25341])
                    ("do_q" variable nil (reparse-symbol indented_block_body) [25346 25360])
                    ("do_exit" variable nil (reparse-symbol indented_block_body) [25365 25382])
                    ("do_EOF" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25399 25403])
                            ("arg" variable nil (reparse-symbol function_parameters) [25405 25408]))                          )
                        (reparse-symbol indented_block_body) [25388 25518])
                    ("do_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25535 25539])
                            ("arg" variable nil (reparse-symbol function_parameters) [25541 25544]))                          )
                        (reparse-symbol indented_block_body) [25523 25944])
                    ("do_a" variable nil (reparse-symbol indented_block_body) [25948 25962])
                    ("do_retval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25982 25986])
                            ("arg" variable nil (reparse-symbol function_parameters) [25988 25991]))                          )
                        (reparse-symbol indented_block_body) [25968 26182])
                    ("do_rv" variable nil (reparse-symbol indented_block_body) [26186 26203])
                    ("_getval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26221 26225])
                            ("arg" variable nil (reparse-symbol function_parameters) [26227 26230]))                          )
                        (reparse-symbol indented_block_body) [26209 26601])
                    ("do_p" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26615 26619])
                            ("arg" variable nil (reparse-symbol function_parameters) [26621 26624]))                          )
                        (reparse-symbol indented_block_body) [26606 26730])
                    ("do_pp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26745 26749])
                            ("arg" variable nil (reparse-symbol function_parameters) [26751 26754]))                          )
                        (reparse-symbol indented_block_body) [26735 26861])
                    ("do_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26878 26882])
                            ("arg" variable nil (reparse-symbol function_parameters) [26884 26887]))                          )
                        (reparse-symbol indented_block_body) [26866 28515])
                    ("do_l" variable nil (reparse-symbol indented_block_body) [28519 28533])
                    ("do_whatis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28553 28557])
                            ("arg" variable nil (reparse-symbol function_parameters) [28559 28562]))                          )
                        (reparse-symbol indented_block_body) [28539 29404])
                    ("do_alias" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29422 29426])
                            ("arg" variable nil (reparse-symbol function_parameters) [29428 29431]))                          )
                        (reparse-symbol indented_block_body) [29409 29881])
                    ("do_unalias" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29901 29905])
                            ("arg" variable nil (reparse-symbol function_parameters) [29907 29910]))                          )
                        (reparse-symbol indented_block_body) [29886 30048])
                    ("commands_resuming" variable nil (reparse-symbol indented_block_body) [30120 30237])
                    ("print_stack_trace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30669 30673]))                          )
                        (reparse-symbol indented_block_body) [30647 30837])
                    ("print_stack_entry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30864 30868])
                            ("frame_lineno" variable nil (reparse-symbol function_parameters) [30870 30882])
                            ("prompt_prefix" variable nil (reparse-symbol function_parameters) [30884 30897]))                          )
                        (reparse-symbol indented_block_body) [30842 31209])
                    ("help_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31272 31276]))                          )
                        (reparse-symbol indented_block_body) [31258 31301])
                    ("help_h" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31317 31321]))                          )
                        (reparse-symbol indented_block_body) [31306 31584])
                    ("help_where" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31604 31608]))                          )
                        (reparse-symbol indented_block_body) [31589 31633])
                    ("help_w" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31649 31653]))                          )
                        (reparse-symbol indented_block_body) [31638 31885])
                    ("help_bt" variable nil (reparse-symbol indented_block_body) [31890 31906])
                    ("help_down" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31926 31930]))                          )
                        (reparse-symbol indented_block_body) [31912 31955])
                    ("help_d" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31971 31975]))                          )
                        (reparse-symbol indented_block_body) [31960 32097])
                    ("help_up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32114 32118]))                          )
                        (reparse-symbol indented_block_body) [32102 32143])
                    ("help_u" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32159 32163]))                          )
                        (reparse-symbol indented_block_body) [32148 32282])
                    ("help_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32302 32306]))                          )
                        (reparse-symbol indented_block_body) [32287 32331])
                    ("help_b" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32347 32351]))                          )
                        (reparse-symbol indented_block_body) [32336 32972])
                    ("help_clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32992 32996]))                          )
                        (reparse-symbol indented_block_body) [32977 33022])
                    ("help_cl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33039 33043]))                          )
                        (reparse-symbol indented_block_body) [33027 33593])
                    ("help_tbreak" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33614 33618]))                          )
                        (reparse-symbol indented_block_body) [33598 33731])
                    ("help_enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33752 33756]))                          )
                        (reparse-symbol indented_block_body) [33736 33896])
                    ("help_disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33918 33922]))                          )
                        (reparse-symbol indented_block_body) [33901 34064])
                    ("help_ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34085 34089]))                          )
                        (reparse-symbol indented_block_body) [34069 34424])
                    ("help_condition" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34448 34452]))                          )
                        (reparse-symbol indented_block_body) [34429 34743])
                    ("help_step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34762 34766]))                          )
                        (reparse-symbol indented_block_body) [34748 34791])
                    ("help_s" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34807 34811]))                          )
                        (reparse-symbol indented_block_body) [34796 34984])
                    ("help_until" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35004 35008]))                          )
                        (reparse-symbol indented_block_body) [34989 35035])
                    ("help_unt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35053 35057]))                          )
                        (reparse-symbol indented_block_body) [35040 35211])
                    ("help_next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35230 35234]))                          )
                        (reparse-symbol indented_block_body) [35216 35259])
                    ("help_n" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35275 35279]))                          )
                        (reparse-symbol indented_block_body) [35264 35413])
                    ("help_return" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35434 35438]))                          )
                        (reparse-symbol indented_block_body) [35418 35463])
                    ("help_r" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35479 35483]))                          )
                        (reparse-symbol indented_block_body) [35468 35585])
                    ("help_continue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35608 35612]))                          )
                        (reparse-symbol indented_block_body) [35590 35637])
                    ("help_cont" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35656 35660]))                          )
                        (reparse-symbol indented_block_body) [35642 35685])
                    ("help_c" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35701 35705]))                          )
                        (reparse-symbol indented_block_body) [35690 35820])
                    ("help_jump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35839 35843]))                          )
                        (reparse-symbol indented_block_body) [35825 35868])
                    ("help_j" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35884 35888]))                          )
                        (reparse-symbol indented_block_body) [35873 35981])
                    ("help_debug" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36001 36005]))                          )
                        (reparse-symbol indented_block_body) [35986 36209])
                    ("help_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36228 36232]))                          )
                        (reparse-symbol indented_block_body) [36214 36257])
                    ("help_l" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36273 36277]))                          )
                        (reparse-symbol indented_block_body) [36262 36628])
                    ("help_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36647 36651]))                          )
                        (reparse-symbol indented_block_body) [36633 36676])
                    ("help_a" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36692 36696]))                          )
                        (reparse-symbol indented_block_body) [36681 36786])
                    ("help_p" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36802 36806]))                          )
                        (reparse-symbol indented_block_body) [36791 36892])
                    ("help_pp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36909 36913]))                          )
                        (reparse-symbol indented_block_body) [36897 37007])
                    ("help_exec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37026 37030]))                          )
                        (reparse-symbol indented_block_body) [37012 37416])
                    ("help_run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37434 37438]))                          )
                        (reparse-symbol indented_block_body) [37421 37705])
                    ("help_restart" variable nil (reparse-symbol indented_block_body) [37710 37733])
                    ("help_quit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37753 37757]))                          )
                        (reparse-symbol indented_block_body) [37739 37782])
                    ("help_q" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37798 37802]))                          )
                        (reparse-symbol indented_block_body) [37787 37920])
                    ("help_exit" variable nil (reparse-symbol indented_block_body) [37925 37943])
                    ("help_whatis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37965 37969]))                          )
                        (reparse-symbol indented_block_body) [37949 38051])
                    ("help_EOF" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38069 38073]))                          )
                        (reparse-symbol indented_block_body) [38056 38156])
                    ("help_alias" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38176 38180]))                          )
                        (reparse-symbol indented_block_body) [38161 39165])
                    ("help_unalias" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39187 39191]))                          )
                        (reparse-symbol indented_block_body) [39170 39271])
                    ("help_commands" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39294 39298]))                          )
                        (reparse-symbol indented_block_body) [39276 40631])
                    ("help_pdb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40649 40653]))                          )
                        (reparse-symbol indented_block_body) [40636 40671])
                    ("lookupmodule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40693 40697])
                            ("filename" variable nil (reparse-symbol function_parameters) [40699 40707]))                          
                        :documentation "Helper function for break/clear parsing -- may be overridden.

        lookupmodule() translates (possibly incomplete) file or module name
        into an absolute file name.
        ")
                        (reparse-symbol indented_block_body) [40676 41585])
                    ("_runscript" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41605 41609])
                            ("filename" variable nil (reparse-symbol function_parameters) [41611 41619]))                          )
                        (reparse-symbol indented_block_body) [41590 42706]))                  
                :type "class")
                nil [1488 42706])
            ("run" function (:arguments 
              ( ("statement" variable nil (reparse-symbol function_parameters) [42739 42748])
                ("globals" variable nil (reparse-symbol function_parameters) [42750 42757])
                ("locals" variable nil (reparse-symbol function_parameters) [42764 42770]))              ) nil [42731 42820])
            ("runeval" function (:arguments 
              ( ("expression" variable nil (reparse-symbol function_parameters) [42833 42843])
                ("globals" variable nil (reparse-symbol function_parameters) [42845 42852])
                ("locals" variable nil (reparse-symbol function_parameters) [42859 42865]))              ) nil [42821 42927])
            ("runctx" function (:arguments 
              ( ("statement" variable nil (reparse-symbol function_parameters) [42939 42948])
                ("globals" variable nil (reparse-symbol function_parameters) [42950 42957])
                ("locals" variable nil (reparse-symbol function_parameters) [42959 42965]))              ) nil [42928 43028])
            ("runcall" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [43041 43046])
                ("kwds" variable nil (reparse-symbol function_parameters) [43048 43054]))              ) nil [43029 43097])
            ("set_trace" function nil nil [43098 43159])
            ("post_mortem" function (:arguments 
              ( ("t" variable nil (reparse-symbol function_parameters) [43201 43202]))              ) nil [43185 43639])
            ("pm" function nil nil [43640 43686])
            ("TESTCMD" variable nil nil [43716 43746])
            ("test" function nil nil [43748 43777])
            ("help" function nil nil [43791 44165])
            ("main" function nil nil [44166 45890])
            ("if" code nil nil [45956 46013]))          
      :file "pdb.py"
      :pointmax 46013
      :fsize 46012
      :lastmodtime '(21896 22744 0 0)
      :unmatched-syntax '((NAME 17060 . 17065) (IF 17092 . 17094) (ELSE 17121 . 17125)))
    (semanticdb-table "copy_reg.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle/cPickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 179])
            ("types" include nil nil [181 222])
            ("__all__" variable nil nil [224 332])
            ("dispatch_table" variable nil nil [334 353])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [366 373])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [375 390])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [392 406]))              ) nil [355 886])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [903 909]))              ) nil [887 1009])
            ("try" code nil nil [1068 1233])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1295 1298])
                ("base" variable nil (reparse-symbol function_parameters) [1300 1304])
                ("state" variable nil (reparse-symbol function_parameters) [1306 1311]))              ) nil [1276 1518])
            ("_HEAPTYPE" code nil nil [1519 1535])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1614 1618])
                    ("proto" variable nil (reparse-symbol function_parameters) [1620 1625]))                  )
                nil [1599 2561])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2616 2619])
                ("args" variable nil (reparse-symbol function_parameters) [2621 2626]))              ) nil [2601 2664])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2680 2683]))                  )
                nil [2665 4346])
            ("_extension_registry" variable nil nil [4828 4852])
            ("_inverted_registry" variable nil nil [4882 4905])
            ("_extension_cache" variable nil nil [4936 4957])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5132 5138])
                    ("name" variable nil (reparse-symbol function_parameters) [5140 5144])
                    ("code" variable nil (reparse-symbol function_parameters) [5146 5150]))                  )
                nil [5114 5861])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5883 5889])
                    ("name" variable nil (reparse-symbol function_parameters) [5891 5895])
                    ("code" variable nil (reparse-symbol function_parameters) [5897 5901]))                  )
                nil [5862 6321])
            ("clear_extension_cache" function nil nil [6322 6380]))          
      :file "copy_reg.py"
      :pointmax 6801
      :fsize 6800
      :lastmodtime '(21896 22713 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "linecache.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Cache lines from files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
\"\"\"" code nil nil [1 188])
            ("sys" include nil nil [190 200])
            ("os" include nil nil [201 210])
            ("__all__" variable nil nil [212 261])
            ("getline" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [275 283])
                ("lineno" variable nil (reparse-symbol function_parameters) [285 291])
                ("module_globals" variable nil (reparse-symbol function_parameters) [293 307]))              ) nil [263 455])
            ("cache" variable nil nil [470 480])
            ("clearcache" function (:documentation "Clear the cache entirely.") nil [495 582])
            ("getlines" function
               (:documentation "Get the lines for a file from the cache.
    Update the cache if it doesn't contain an entry for this file already."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [597 605])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [607 621]))                  )
                nil [584 879])
            ("checkcache" function
               (:documentation "Discard cache entries that are out of date.
    (This is not checked upon each call!)"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [896 904]))                  )
                nil [881 1572])
            ("updatecache" function
               (:documentation "Update a cache entry and return its list of lines.
    If something's wrong, print a message, discard the cache entry,
    and return an empty list."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1590 1598])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [1600 1614]))                  )
                nil [1574 4119]))          
      :file "linecache.py"
      :pointmax 4119
      :fsize 4118
      :lastmodtime '(21896 22713 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "cmd.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"A generic class to build line-oriented command interpreters.

Interpreters constructed with this class obey the following conventions:

1. End of file on input is processed as the command 'EOF'.
2. A command is parsed out of each line by collecting the prefix composed
   of characters in the identchars member.
3. A command `foo' is dispatched to a method 'do_foo()'; the do_ method
   is passed a single argument consisting of the remainder of the line.
4. Typing an empty line repeats the last command.  (Actually, it calls the
   method `emptyline', which may be overridden in a subclass.)
5. There is a predefined `help' method.  Given an argument `topic', it
   calls the command `help_topic'.  With no arguments, it lists all topics
   with defined help_ functions, broken into up to three topics; documented
   commands, miscellaneous help topics, and undocumented commands.
6. The command '?' is a synonym for `help'.  The command '!' is a synonym
   for `shell', if a do_shell method exists.
7. If completion is enabled, completing commands will be done automatically,
   and completing of commands args is done by calling complete_foo() with
   arguments text, line, begidx, endidx.  text is string we are matching
   against, all returned matches must begin with it.  line is the current
   input line (lstripped), begidx and endidx are the beginning and end
   indexes of the text being matched, which could be used to provide
   different completion depending upon which position the argument is in.

The `default' method may be overridden to intercept commands for which there
is no do_ method.

The `completedefault' method may be overridden to intercept completions for
commands that have no complete_ method.

The data member `self.ruler' sets the character used to draw separator lines
in the help messages.  If empty, no ruler line is drawn.  It defaults to \"=\".

If the value of `self.intro' is nonempty when the cmdloop method is called,
it is printed out on interpreter startup.  This value may be overridden
via an optional argument to the cmdloop() method.

The data members `self.doc_header', `self.misc_header', and
`self.undoc_header' set the headers used for the help function's
listings of documented functions, miscellaneous topics, and undocumented
functions respectively.

These interpreters use raw_input; thus, if the readline module is loaded,
they automatically support Emacs-like command history and editing features.
\"\"\"" code nil nil [1 2463])
            ("string" include nil nil [2465 2478])
            ("__all__" variable nil nil [2480 2497])
            ("PROMPT" variable nil nil [2499 2516])
            ("IDENTCHARS" code nil nil [2517 2572])
            ("Cmd" type
               (:documentation "A simple framework for writing line-oriented command interpreters.

    These are often useful for test harnesses, administrative tools, and
    prototypes that will later be wrapped in a more sophisticated interface.

    A Cmd instance or subclass instance is a line-oriented interpreter
    framework.  There is no good reason to instantiate Cmd itself; rather,
    it's useful as a superclass of an interpreter class you define yourself
    in order to inherit Cmd's methods and encapsulate action methods.

    "
                :members 
                  ( ("prompt" variable nil (reparse-symbol indented_block_body) [3116 3131])
                    ("identchars" variable nil (reparse-symbol indented_block_body) [3136 3159])
                    ("ruler" variable nil (reparse-symbol indented_block_body) [3164 3175])
                    ("lastcmd" variable nil (reparse-symbol indented_block_body) [3180 3192])
                    ("intro" variable nil (reparse-symbol indented_block_body) [3197 3209])
                    ("doc_leader" variable nil (reparse-symbol indented_block_body) [3214 3229])
                    ("doc_header" variable nil (reparse-symbol indented_block_body) [3234 3289])
                    ("misc_header" variable nil (reparse-symbol indented_block_body) [3294 3336])
                    ("undoc_header" variable nil (reparse-symbol indented_block_body) [3341 3380])
                    ("nohelp" variable nil (reparse-symbol indented_block_body) [3385 3413])
                    ("use_rawinput" variable nil (reparse-symbol indented_block_body) [3418 3434])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Instantiate a line-oriented interpreter framework.

        The optional argument 'completekey' is the readline name of a
        completion key; it defaults to the Tab key. If completekey is
        not None and the readline module is available, command completion
        is done automatically. The optional arguments stdin and stdout
        specify alternate input and output file objects; if not specified,
        sys.stdin and sys.stdout are used.

        \"\"\"" code nil (reparse-symbol indented_block_body) [3512 3982])
                            ("sys" include nil (reparse-symbol indented_block_body) [3991 4001])
                            ("if" code nil (reparse-symbol indented_block_body) [4010 4112])
                            ("if" code nil (reparse-symbol indented_block_body) [4120 4227])
                            ("self" variable nil (reparse-symbol indented_block_body) [4235 4253])
                            ("self" variable nil (reparse-symbol indented_block_body) [4262 4292]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3453 3457])
                            ("completekey" variable nil (reparse-symbol function_parameters) [3459 3470])
                            ("stdin" variable nil (reparse-symbol function_parameters) [3478 3483])
                            ("stdout" variable nil (reparse-symbol function_parameters) [3490 3496]))                          
                        :documentation "Instantiate a line-oriented interpreter framework.

        The optional argument 'completekey' is the readline name of a
        completion key; it defaults to the Tab key. If completekey is
        not None and the readline module is available, command completion
        is done automatically. The optional arguments stdin and stdout
        specify alternate input and output file objects; if not specified,
        sys.stdin and sys.stdout are used.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3440 4293])
                    ("cmdloop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4310 4314])
                            ("intro" variable nil (reparse-symbol function_parameters) [4316 4321]))                          
                        :documentation "Repeatedly issue a prompt, accept input, parse an initial prefix
        off the received input, and dispatch to action methods, passing them
        the remainder of the line as argument.

        ")
                        (reparse-symbol indented_block_body) [4298 6195])
                    ("precmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6212 6216])
                            ("line" variable nil (reparse-symbol function_parameters) [6218 6222]))                          
                        :documentation "Hook method executed just before the command line is
        interpreted, but after the input prompt is generated and issued.

        ")
                        (reparse-symbol indented_block_body) [6201 6395])
                    ("postcmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6412 6416])
                            ("stop" variable nil (reparse-symbol function_parameters) [6418 6422])
                            ("line" variable nil (reparse-symbol function_parameters) [6424 6428]))                          
                        :documentation "Hook method executed just after a command dispatch is finished.")
                        (reparse-symbol indented_block_body) [6400 6529])
                    ("preloop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6546 6550]))                          
                        :documentation "Hook method executed once when the cmdloop() method is called.")
                        (reparse-symbol indented_block_body) [6534 6643])
                    ("postloop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6661 6665]))                          
                        :documentation "Hook method executed once when the cmdloop() method is about to
        return.

        ")
                        (reparse-symbol indented_block_body) [6648 6785])
                    ("parseline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6804 6808])
                            ("line" variable nil (reparse-symbol function_parameters) [6810 6814]))                          
                        :documentation "Parse the line into a command name and a string containing
        the arguments.  Returns a tuple containing (command, args, line).
        'command' and 'args' may be None if the line couldn't be parsed.
        ")
                        (reparse-symbol indented_block_body) [6790 7534])
                    ("onecmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7550 7554])
                            ("line" variable nil (reparse-symbol function_parameters) [7556 7560]))                          
                        :documentation "Interpret the argument as though it had been typed in response
        to the prompt.

        This may be overridden, but should not normally need to be;
        see the precmd() and postcmd() methods for useful execution hooks.
        The return value is a flag indicating whether interpretation of
        commands by the interpreter should stop.

        ")
                        (reparse-symbol indented_block_body) [7539 8435])
                    ("emptyline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8454 8458]))                          
                        :documentation "Called when an empty line is entered in response to the prompt.

        If this method is not overridden, it repeats the last nonempty
        command entered.

        ")
                        (reparse-symbol indented_block_body) [8440 8716])
                    ("default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8733 8737])
                            ("line" variable nil (reparse-symbol function_parameters) [8739 8743]))                          
                        :documentation "Called on an input line when the command prefix is not recognized.

        If this method is not overridden, it prints an error message and
        returns.

        ")
                        (reparse-symbol indented_block_body) [8721 8987])
                    ("completedefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9012 9016])
                            ("ignored" variable nil (reparse-symbol function_parameters) [9018 9026]))                          
                        :documentation "Method called to complete an input line when no command-specific
        complete_*() method is available.

        By default, it returns an empty list.

        ")
                        (reparse-symbol indented_block_body) [8992 9225])
                    ("completenames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9248 9252])
                            ("text" variable nil (reparse-symbol function_parameters) [9254 9258])
                            ("ignored" variable nil (reparse-symbol function_parameters) [9260 9268]))                          )
                        (reparse-symbol indented_block_body) [9230 9372])
                    ("complete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9390 9394])
                            ("text" variable nil (reparse-symbol function_parameters) [9396 9400])
                            ("state" variable nil (reparse-symbol function_parameters) [9402 9407]))                          
                        :documentation "Return the next possible completion for 'text'.

        If a command has not been entered, then complete against command list.
        Otherwise try to call complete_<command> to get list of completions.
        ")
                        (reparse-symbol indented_block_body) [9377 10561])
                    ("get_names" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10580 10584]))                          )
                        (reparse-symbol indented_block_body) [10566 10726])
                    ("complete_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10749 10753])
                            ("args" variable nil (reparse-symbol function_parameters) [10755 10760]))                          )
                        (reparse-symbol indented_block_body) [10731 10962])
                    ("do_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10979 10983])
                            ("arg" variable nil (reparse-symbol function_parameters) [10985 10988]))                          )
                        (reparse-symbol indented_block_body) [10967 12711])
                    ("print_topics" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12733 12737])
                            ("header" variable nil (reparse-symbol function_parameters) [12739 12745])
                            ("cmds" variable nil (reparse-symbol function_parameters) [12747 12751])
                            ("cmdlen" variable nil (reparse-symbol function_parameters) [12753 12759])
                            ("maxcol" variable nil (reparse-symbol function_parameters) [12761 12767]))                          )
                        (reparse-symbol indented_block_body) [12716 13015])
                    ("columnize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13034 13038])
                            ("list" variable nil (reparse-symbol function_parameters) [13040 13044])
                            ("displaywidth" variable nil (reparse-symbol function_parameters) [13046 13058]))                          
                        :documentation "Display a list of strings as a compact set of columns.

        Each column is only as wide as necessary.
        Columns are separated by two spaces (one was not legible enough).
        ")
                        (reparse-symbol indented_block_body) [13020 15027]))                  
                :type "class")
                nil [2574 15027]))          
      :file "cmd.py"
      :pointmax 15027
      :fsize 15026
      :lastmodtime '(21896 22713 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "bdb.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Debugger basics\"\"\"" code nil nil [1 22])
            ("fnmatch" include nil nil [24 38])
            ("sys" include nil nil [39 49])
            ("os" include nil nil [50 59])
            ("types" include nil nil [60 72])
            ("__all__" variable nil nil [74 114])
            ("BdbQuit" type
               (:documentation "Exception to give up completely"
                :superclasses ("Exception")
                :type "class")
                nil [116 184])
            ("Bdb" type
               (:documentation "Generic Python debugger base class.

    This class takes care of details of the trace facility;
    a derived class should implement user interaction.
    The standard debugger class (pdb.Pdb) is an example.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("None" code nil (reparse-symbol indented_block_body) [501 505])
                            ("self" variable nil (reparse-symbol indented_block_body) [514 530])
                            ("self" variable nil (reparse-symbol indented_block_body) [539 556])
                            ("self" variable nil (reparse-symbol indented_block_body) [565 592]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [440 444])
                            ("skip" variable nil (reparse-symbol function_parameters) [446 450]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [427 593])
                    ("canonic" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [610 614])
                            ("filename" variable nil (reparse-symbol function_parameters) [616 624]))                          )
                        (reparse-symbol indented_block_body) [598 939])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [954 958]))                          )
                        (reparse-symbol indented_block_body) [944 1085])
                    ("trace_dispatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1109 1113])
                            ("frame" variable nil (reparse-symbol function_parameters) [1115 1120])
                            ("event" variable nil (reparse-symbol function_parameters) [1122 1127])
                            ("arg" variable nil (reparse-symbol function_parameters) [1129 1132]))                          )
                        (reparse-symbol indented_block_body) [1090 1829])
                    ("dispatch_line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1852 1856])
                            ("frame" variable nil (reparse-symbol function_parameters) [1858 1863]))                          )
                        (reparse-symbol indented_block_body) [1834 2039])
                    ("dispatch_call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2062 2066])
                            ("frame" variable nil (reparse-symbol function_parameters) [2068 2073])
                            ("arg" variable nil (reparse-symbol function_parameters) [2075 2078]))                          )
                        (reparse-symbol indented_block_body) [2044 2575])
                    ("dispatch_return" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2600 2604])
                            ("frame" variable nil (reparse-symbol function_parameters) [2606 2611])
                            ("arg" variable nil (reparse-symbol function_parameters) [2613 2616]))                          )
                        (reparse-symbol indented_block_body) [2580 2933])
                    ("dispatch_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2961 2965])
                            ("frame" variable nil (reparse-symbol function_parameters) [2967 2972])
                            ("arg" variable nil (reparse-symbol function_parameters) [2974 2977]))                          )
                        (reparse-symbol indented_block_body) [2938 3137])
                    ("is_skipped_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3328 3332])
                            ("module_name" variable nil (reparse-symbol function_parameters) [3334 3345]))                          )
                        (reparse-symbol indented_block_body) [3306 3485])
                    ("stop_here" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3504 3508])
                            ("frame" variable nil (reparse-symbol function_parameters) [3510 3515]))                          )
                        (reparse-symbol indented_block_body) [3490 4122])
                    ("break_here" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4142 4146])
                            ("frame" variable nil (reparse-symbol function_parameters) [4148 4153]))                          )
                        (reparse-symbol indented_block_body) [4127 4943])
                    ("do_clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4961 4965])
                            ("arg" variable nil (reparse-symbol function_parameters) [4967 4970]))                          )
                        (reparse-symbol indented_block_body) [4948 5052])
                    ("break_anywhere" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5076 5080])
                            ("frame" variable nil (reparse-symbol function_parameters) [5082 5087]))                          )
                        (reparse-symbol indented_block_body) [5057 5159])
                    ("user_call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5259 5263])
                            ("frame" variable nil (reparse-symbol function_parameters) [5265 5270])
                            ("argument_list" variable nil (reparse-symbol function_parameters) [5272 5285]))                          
                        :documentation "This method is called when there is the remote possibility
        that we ever need to stop in this function.")
                        (reparse-symbol indented_block_body) [5245 5426])
                    ("user_line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5445 5449])
                            ("frame" variable nil (reparse-symbol function_parameters) [5451 5456]))                          
                        :documentation "This method is called when we stop or break at this line.")
                        (reparse-symbol indented_block_body) [5431 5544])
                    ("user_return" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5565 5569])
                            ("frame" variable nil (reparse-symbol function_parameters) [5571 5576])
                            ("return_value" variable nil (reparse-symbol function_parameters) [5578 5590]))                          
                        :documentation "This method is called when a return trap is set here.")
                        (reparse-symbol indented_block_body) [5549 5674])
                    ("user_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5698 5702])
                            ("frame" variable nil (reparse-symbol function_parameters) [5704 5709])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [5711 5719]))                          )
                        (reparse-symbol indented_block_body) [5679 5913])
                    ("_set_stopinfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5936 5940])
                            ("stopframe" variable nil (reparse-symbol function_parameters) [5942 5951])
                            ("returnframe" variable nil (reparse-symbol function_parameters) [5953 5964])
                            ("stoplineno" variable nil (reparse-symbol function_parameters) [5966 5976]))                          )
                        (reparse-symbol indented_block_body) [5918 6231])
                    ("set_until" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6352 6356])
                            ("frame" variable nil (reparse-symbol function_parameters) [6358 6363]))                          
                        :documentation "Stop when the line with the line no greater than the current one is
        reached or when returning from current frame")
                        (reparse-symbol indented_block_body) [6338 6599])
                    ("set_step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6617 6621]))                          
                        :documentation "Stop after one line of code.")
                        (reparse-symbol indented_block_body) [6604 7169])
                    ("set_next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7187 7191])
                            ("frame" variable nil (reparse-symbol function_parameters) [7193 7198]))                          
                        :documentation "Stop on the next line in or below the given frame.")
                        (reparse-symbol indented_block_body) [7174 7306])
                    ("set_return" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7326 7330])
                            ("frame" variable nil (reparse-symbol function_parameters) [7332 7337]))                          
                        :documentation "Stop when returning from the given frame.")
                        (reparse-symbol indented_block_body) [7311 7444])
                    ("set_trace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7463 7467])
                            ("frame" variable nil (reparse-symbol function_parameters) [7469 7474]))                          
                        :documentation "Start debugging from `frame`.

        If frame is not specified, debugging starts from caller's frame.
        ")
                        (reparse-symbol indented_block_body) [7449 7901])
                    ("set_continue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7923 7927]))                          )
                        (reparse-symbol indented_block_body) [7906 8331])
                    ("set_quit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8349 8353]))                          )
                        (reparse-symbol indented_block_body) [8336 8480])
                    ("set_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8876 8880])
                            ("filename" variable nil (reparse-symbol function_parameters) [8882 8890])
                            ("lineno" variable nil (reparse-symbol function_parameters) [8892 8898])
                            ("temporary" variable nil (reparse-symbol function_parameters) [8900 8909])
                            ("cond" variable nil (reparse-symbol function_parameters) [8913 8917])
                            ("funcname" variable nil (reparse-symbol function_parameters) [8944 8952]))                          )
                        (reparse-symbol indented_block_body) [8862 9479])
                    ("_prune_breaks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9502 9506])
                            ("filename" variable nil (reparse-symbol function_parameters) [9508 9516])
                            ("lineno" variable nil (reparse-symbol function_parameters) [9518 9524]))                          )
                        (reparse-symbol indented_block_body) [9484 9708])
                    ("clear_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9729 9733])
                            ("filename" variable nil (reparse-symbol function_parameters) [9735 9743])
                            ("lineno" variable nil (reparse-symbol function_parameters) [9745 9751]))                          )
                        (reparse-symbol indented_block_body) [9713 10295])
                    ("clear_bpbynumber" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10321 10325])
                            ("arg" variable nil (reparse-symbol function_parameters) [10327 10330]))                          )
                        (reparse-symbol indented_block_body) [10300 10755])
                    ("clear_all_file_breaks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10786 10790])
                            ("filename" variable nil (reparse-symbol function_parameters) [10792 10800]))                          )
                        (reparse-symbol indented_block_body) [10760 11138])
                    ("clear_all_breaks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11164 11168]))                          )
                        (reparse-symbol indented_block_body) [11143 11360])
                    ("get_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11379 11383])
                            ("filename" variable nil (reparse-symbol function_parameters) [11385 11393])
                            ("lineno" variable nil (reparse-symbol function_parameters) [11395 11401]))                          )
                        (reparse-symbol indented_block_body) [11365 11535])
                    ("get_breaks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11555 11559])
                            ("filename" variable nil (reparse-symbol function_parameters) [11561 11569])
                            ("lineno" variable nil (reparse-symbol function_parameters) [11571 11577]))                          )
                        (reparse-symbol indented_block_body) [11540 11771])
                    ("get_file_breaks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11796 11800])
                            ("filename" variable nil (reparse-symbol function_parameters) [11802 11810]))                          )
                        (reparse-symbol indented_block_body) [11776 11968])
                    ("get_all_breaks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11992 11996]))                          )
                        (reparse-symbol indented_block_body) [11973 12026])
                    ("get_stack" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12168 12172])
                            ("f" variable nil (reparse-symbol function_parameters) [12174 12175])
                            ("t" variable nil (reparse-symbol function_parameters) [12177 12178]))                          )
                        (reparse-symbol indented_block_body) [12154 12664])
                    ("format_stack_entry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12699 12703])
                            ("frame_lineno" variable nil (reparse-symbol function_parameters) [12705 12717])
                            ("lprefix" variable nil (reparse-symbol function_parameters) [12719 12726]))                          )
                        (reparse-symbol indented_block_body) [12676 13519])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13655 13659])
                            ("cmd" variable nil (reparse-symbol function_parameters) [13661 13664])
                            ("globals" variable nil (reparse-symbol function_parameters) [13666 13673])
                            ("locals" variable nil (reparse-symbol function_parameters) [13680 13686]))                          )
                        (reparse-symbol indented_block_body) [13647 14156])
                    ("runeval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14173 14177])
                            ("expr" variable nil (reparse-symbol function_parameters) [14179 14183])
                            ("globals" variable nil (reparse-symbol function_parameters) [14185 14192])
                            ("locals" variable nil (reparse-symbol function_parameters) [14199 14205]))                          )
                        (reparse-symbol indented_block_body) [14161 14685])
                    ("runctx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14701 14705])
                            ("cmd" variable nil (reparse-symbol function_parameters) [14707 14710])
                            ("globals" variable nil (reparse-symbol function_parameters) [14712 14719])
                            ("locals" variable nil (reparse-symbol function_parameters) [14721 14727]))                          )
                        (reparse-symbol indented_block_body) [14690 14797])
                    ("runcall" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14881 14885])
                            ("func" variable nil (reparse-symbol function_parameters) [14887 14891])
                            ("args" variable nil (reparse-symbol function_parameters) [14893 14898])
                            ("kwds" variable nil (reparse-symbol function_parameters) [14900 14906]))                          )
                        (reparse-symbol indented_block_body) [14869 15180]))                  
                :type "class")
                nil [186 15180])
            ("set_trace" function nil nil [15182 15221])
            ("Breakpoint" type
               (:documentation "Breakpoint class

    Implements temporary breakpoints, ignore counts, disabling and
    (re)-enabling, and conditionals.

    Breakpoints are indexed by number through bpbynumber and by
    the file,line tuple using bplist.  The former points to a
    single instance of class Breakpoint.  The latter points to a
    list of such instances since there may be more than one
    breakpoint per line.

    "
                :members 
                  ( ("next" variable nil (reparse-symbol indented_block_body) [15784 15792])
                    ("bplist" variable nil (reparse-symbol indented_block_body) [15829 15840])
                    ("bpbynumber" variable nil (reparse-symbol indented_block_body) [15883 15902])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [16144 16168])
                            ("self" variable nil (reparse-symbol indented_block_body) [16219 16257])
                            ("self" variable nil (reparse-symbol indented_block_body) [16266 16282])
                            ("self" variable nil (reparse-symbol indented_block_body) [16330 16346])
                            ("self" variable nil (reparse-symbol indented_block_body) [16355 16381])
                            ("self" variable nil (reparse-symbol indented_block_body) [16390 16406])
                            ("self" variable nil (reparse-symbol indented_block_body) [16415 16431])
                            ("self" variable nil (reparse-symbol indented_block_body) [16440 16455])
                            ("self" variable nil (reparse-symbol indented_block_body) [16464 16477])
                            ("self" variable nil (reparse-symbol indented_block_body) [16486 16515])
                            ("Breakpoint" code nil (reparse-symbol indented_block_body) [16524 16561])
                            ("self" code nil (reparse-symbol indented_block_body) [16600 16628])
                            ("if" code nil (reparse-symbol indented_block_body) [16637 16777]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16078 16082])
                            ("file" variable nil (reparse-symbol function_parameters) [16084 16088])
                            ("line" variable nil (reparse-symbol function_parameters) [16090 16094])
                            ("temporary" variable nil (reparse-symbol function_parameters) [16096 16105])
                            ("cond" variable nil (reparse-symbol function_parameters) [16109 16113])
                            ("funcname" variable nil (reparse-symbol function_parameters) [16120 16128]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16065 16777])
                    ("deleteMe" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16796 16800]))                          )
                        (reparse-symbol indented_block_body) [16783 17062])
                    ("enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17078 17082]))                          )
                        (reparse-symbol indented_block_body) [17067 17110])
                    ("disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17127 17131]))                          )
                        (reparse-symbol indented_block_body) [17115 17159])
                    ("bpprint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17176 17180])
                            ("out" variable nil (reparse-symbol function_parameters) [17182 17185]))                          )
                        (reparse-symbol indented_block_body) [17164 17969]))                  
                :type "class")
                nil [15223 17969])
            ("checkfuncname" function
               (:documentation "Check whether we should break here because of `b.funcname`."
                :arguments 
                  ( ("b" variable nil (reparse-symbol function_parameters) [18036 18037])
                    ("frame" variable nil (reparse-symbol function_parameters) [18039 18044]))                  )
                nil [18018 18915])
            ("effective" function
               (:documentation "Determine which breakpoint for this file:line is to be acted upon.

    Called only if we know there is a bpt at this
    location.  Returns breakpoint that was triggered and a flag
    that indicates if it is ok to delete a temporary bp.

    "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [19052 19056])
                    ("line" variable nil (reparse-symbol function_parameters) [19058 19062])
                    ("frame" variable nil (reparse-symbol function_parameters) [19064 19069]))                  )
                nil [19038 20784])
            ("Tdb" type
               (:superclasses ("Bdb")
                :members 
                  ( ("user_call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20872 20876])
                            ("frame" variable nil (reparse-symbol function_parameters) [20878 20883])
                            ("args" variable nil (reparse-symbol function_parameters) [20885 20889]))                          )
                        (reparse-symbol indented_block_body) [20858 20999])
                    ("user_line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21017 21021])
                            ("frame" variable nil (reparse-symbol function_parameters) [21023 21028]))                          )
                        (reparse-symbol indented_block_body) [21003 21313])
                    ("user_return" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21333 21337])
                            ("frame" variable nil (reparse-symbol function_parameters) [21339 21344])
                            ("retval" variable nil (reparse-symbol function_parameters) [21346 21352]))                          )
                        (reparse-symbol indented_block_body) [21317 21390])
                    ("user_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21413 21417])
                            ("frame" variable nil (reparse-symbol function_parameters) [21419 21424])
                            ("exc_stuff" variable nil (reparse-symbol function_parameters) [21426 21435]))                          )
                        (reparse-symbol indented_block_body) [21394 21507]))                  
                :type "class")
                nil [20838 21507])
            ("foo" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [21516 21517]))              ) nil [21508 21591])
            ("bar" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [21600 21601]))              ) nil [21592 21644])
            ("test" function nil nil [21645 21708]))          
      :file "bdb.py"
      :pointmax 21715
      :fsize 21714
      :lastmodtime '(21896 22713 0 0)
      :unmatched-syntax '((INDENT_BLOCK 15100 . 15161) (NEWLINE 15099 . 15100) (COLON 15098 . 15099) (FINALLY 15091 . 15098) (INDENT_BLOCK 14624 . 14685) (NEWLINE 14623 . 14624) (COLON 14622 . 14623) (FINALLY 14615 . 14622) (INDENT_BLOCK 14095 . 14156) (NEWLINE 14094 . 14095) (COLON 14093 . 14094) (FINALLY 14086 . 14093) (NAME 466 . 470) (IF 488 . 490) (ELSE 496 . 500)))
    (semanticdb-table "repr.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Redo the builtin repr() (representation) but with limits on most sizes.\"\"\"" code nil nil [1 78])
            ("__all__" variable nil nil [80 105])
            ("__builtin__" include nil nil [107 125])
            ("itertools" include nil nil [126 154])
            ("Repr" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [201 218])
                            ("self" variable nil (reparse-symbol indented_block_body) [227 244])
                            ("self" variable nil (reparse-symbol indented_block_body) [253 269])
                            ("self" variable nil (reparse-symbol indented_block_body) [278 295])
                            ("self" variable nil (reparse-symbol indented_block_body) [304 320])
                            ("self" variable nil (reparse-symbol indented_block_body) [329 344])
                            ("self" variable nil (reparse-symbol indented_block_body) [353 374])
                            ("self" variable nil (reparse-symbol indented_block_body) [383 400])
                            ("self" variable nil (reparse-symbol indented_block_body) [409 428])
                            ("self" variable nil (reparse-symbol indented_block_body) [437 454])
                            ("self" variable nil (reparse-symbol indented_block_body) [463 481]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [186 190]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [173 482])
                    ("repr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [496 500])
                            ("x" variable nil (reparse-symbol function_parameters) [502 503]))                          )
                        (reparse-symbol indented_block_body) [487 550])
                    ("repr1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [565 569])
                            ("x" variable nil (reparse-symbol function_parameters) [571 572])
                            ("level" variable nil (reparse-symbol function_parameters) [574 579]))                          )
                        (reparse-symbol indented_block_body) [555 1085])
                    ("_repr_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1109 1113])
                            ("x" variable nil (reparse-symbol function_parameters) [1115 1116])
                            ("level" variable nil (reparse-symbol function_parameters) [1118 1123])
                            ("left" variable nil (reparse-symbol function_parameters) [1125 1129])
                            ("right" variable nil (reparse-symbol function_parameters) [1131 1136])
                            ("maxiter" variable nil (reparse-symbol function_parameters) [1138 1145])
                            ("trail" variable nil (reparse-symbol function_parameters) [1147 1152]))                          )
                        (reparse-symbol indented_block_body) [1090 1565])
                    ("repr_tuple" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1585 1589])
                            ("x" variable nil (reparse-symbol function_parameters) [1591 1592])
                            ("level" variable nil (reparse-symbol function_parameters) [1594 1599]))                          )
                        (reparse-symbol indented_block_body) [1570 1677])
                    ("repr_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1696 1700])
                            ("x" variable nil (reparse-symbol function_parameters) [1702 1703])
                            ("level" variable nil (reparse-symbol function_parameters) [1705 1710]))                          )
                        (reparse-symbol indented_block_body) [1682 1782])
                    ("repr_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1802 1806])
                            ("x" variable nil (reparse-symbol function_parameters) [1808 1809])
                            ("level" variable nil (reparse-symbol function_parameters) [1811 1816]))                          )
                        (reparse-symbol indented_block_body) [1787 1939])
                    ("repr_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1957 1961])
                            ("x" variable nil (reparse-symbol function_parameters) [1963 1964])
                            ("level" variable nil (reparse-symbol function_parameters) [1966 1971]))                          )
                        (reparse-symbol indented_block_body) [1944 2079])
                    ("repr_frozenset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2103 2107])
                            ("x" variable nil (reparse-symbol function_parameters) [2109 2110])
                            ("level" variable nil (reparse-symbol function_parameters) [2112 2117]))                          )
                        (reparse-symbol indented_block_body) [2084 2272])
                    ("repr_deque" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2292 2296])
                            ("x" variable nil (reparse-symbol function_parameters) [2298 2299])
                            ("level" variable nil (reparse-symbol function_parameters) [2301 2306]))                          )
                        (reparse-symbol indented_block_body) [2277 2386])
                    ("repr_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2405 2409])
                            ("x" variable nil (reparse-symbol function_parameters) [2411 2412])
                            ("level" variable nil (reparse-symbol function_parameters) [2414 2419]))                          )
                        (reparse-symbol indented_block_body) [2391 2903])
                    ("repr_str" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2921 2925])
                            ("x" variable nil (reparse-symbol function_parameters) [2927 2928])
                            ("level" variable nil (reparse-symbol function_parameters) [2930 2935]))                          )
                        (reparse-symbol indented_block_body) [2908 3229])
                    ("repr_long" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3248 3252])
                            ("x" variable nil (reparse-symbol function_parameters) [3254 3255])
                            ("level" variable nil (reparse-symbol function_parameters) [3257 3262]))                          )
                        (reparse-symbol indented_block_body) [3234 3512])
                    ("repr_instance" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3535 3539])
                            ("x" variable nil (reparse-symbol function_parameters) [3541 3542])
                            ("level" variable nil (reparse-symbol function_parameters) [3544 3549]))                          )
                        (reparse-symbol indented_block_body) [3517 3993]))                  
                :type "class")
                nil [156 3993])
            ("_possibly_sorted" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [4016 4017]))              ) nil [3995 4263])
            ("aRepr" variable nil nil [4264 4278])
            ("repr" variable nil nil [4279 4296]))          
      :file "repr.py"
      :pointmax 4297
      :fsize 4296
      :lastmodtime '(21896 22713 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "re.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    \".\"      Matches any character except a newline.
    \"^\"      Matches the start of the string.
    \"$\"      Matches the end of the string or just before the newline at
             the end of the string.
    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.
    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    \"\\\\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A \"^\" as the first character indicates a complementing set.
    \"|\"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of \"\\\\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \\number  Matches the contents of the group of the same number.
    \\A       Matches only at the start of the string.
    \\Z       Matches only at the end of the string.
    \\b       Matches the empty string, but only at the start or end of a word.
    \\B       Matches the empty string, but not at the start or end of a word.
    \\d       Matches any decimal digit; equivalent to the set [0-9].
    \\D       Matches any non-digit character; equivalent to the set [^0-9].
    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v].
    \\S       Matches any non-whitespace character; equiv. to [^ \\t\\n\\r\\f\\v].
    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \\W       Matches the complement of \\w.
    \\\\       Matches a literal backslash.

This module exports the following functions:
    match    Match a regular expression pattern to the beginning of a string.
    search   Search a string for the presence of a pattern.
    sub      Substitute occurrences of a pattern found in a string.
    subn     Same as sub, but also return the number of substitutions made.
    split    Split a string by the occurrences of a pattern.
    findall  Find all occurrences of a pattern in a string.
    finditer Return an iterator yielding a match object for each match.
    compile  Compile a pattern into a RegexObject.
    purge    Clear the regular expression cache.
    escape   Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.
    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)
                   as well as the string.
                   \"$\" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      \".\" matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     Make \\w, \\W, \\b, \\B, dependent on the Unicode locale.

This module also defines an exception 'error'.

\"\"\"" code nil nil [501 5342])
            ("sys" include nil nil [5344 5354])
            ("sre_compile" include nil nil [5355 5373])
            ("sre_parse" include nil nil [5374 5390])
            ("__all__" variable nil nil [5409 5637])
            ("__version__" variable nil nil [5639 5660])
            ("I" variable nil nil [5670 5718])
            ("L" variable nil nil [5733 5773])
            ("U" variable nil nil [5804 5846])
            ("M" variable nil nil [5871 5917])
            ("S" variable nil nil [5950 5990])
            ("X" variable nil nil [6016 6058])
            ("T" variable nil nil [6146 6190])
            ("DEBUG" variable nil nil [6214 6248])
            ("error" variable nil nil [6299 6324])
            ("match" function
               (:documentation "Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6427 6434])
                    ("string" variable nil (reparse-symbol function_parameters) [6436 6442])
                    ("flags" variable nil (reparse-symbol function_parameters) [6444 6449]))                  )
                nil [6417 6628])
            ("search" function
               (:documentation "Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6640 6647])
                    ("string" variable nil (reparse-symbol function_parameters) [6649 6655])
                    ("flags" variable nil (reparse-symbol function_parameters) [6657 6662]))                  )
                nil [6629 6845])
            ("sub" function
               (:documentation "Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6854 6861])
                    ("repl" variable nil (reparse-symbol function_parameters) [6863 6867])
                    ("string" variable nil (reparse-symbol function_parameters) [6869 6875])
                    ("count" variable nil (reparse-symbol function_parameters) [6877 6882])
                    ("flags" variable nil (reparse-symbol function_parameters) [6886 6891]))                  )
                nil [6846 7314])
            ("subn" function
               (:documentation "Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the match object and must
    return a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7324 7331])
                    ("repl" variable nil (reparse-symbol function_parameters) [7333 7337])
                    ("string" variable nil (reparse-symbol function_parameters) [7339 7345])
                    ("count" variable nil (reparse-symbol function_parameters) [7347 7352])
                    ("flags" variable nil (reparse-symbol function_parameters) [7356 7361]))                  )
                nil [7315 7914])
            ("split" function
               (:documentation "Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7925 7932])
                    ("string" variable nil (reparse-symbol function_parameters) [7934 7940])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [7942 7950])
                    ("flags" variable nil (reparse-symbol function_parameters) [7954 7959]))                  )
                nil [7915 8151])
            ("findall" function
               (:documentation "Return a list of all non-overlapping matches in the string.

    If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8164 8171])
                    ("string" variable nil (reparse-symbol function_parameters) [8173 8179])
                    ("flags" variable nil (reparse-symbol function_parameters) [8181 8186]))                  )
                nil [8152 8518])
            ("if" code nil nil [8519 8878])
            ("compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [8891 8898])
                ("flags" variable nil (reparse-symbol function_parameters) [8900 8905]))              ) nil [8879 9018])
            ("purge" function nil nil [9019 9116])
            ("template" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9130 9137])
                ("flags" variable nil (reparse-symbol function_parameters) [9139 9144]))              ) nil [9117 9248])
            ("_alphanum" variable nil nil [9249 9341])
            ("escape" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9354 9361]))              ) nil [9343 13071]))          
      :file "re.py"
      :pointmax 13071
      :fsize 13070
      :lastmodtime '(21896 22713 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "pprint.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Support to pretty-print lists, tuples, & dictionaries recursively.

Very simple, but useful, especially in debugging data structures.

Classes
-------

PrettyPrinter()
    Handle pretty-printing operations onto a stream using a configured
    set of formatting parameters.

Functions
---------

pformat()
    Format a Python object into a pretty-printed representation.

pprint()
    Pretty-print a Python object to a stream [default is sys.stdout].

saferepr()
    Generate a 'standard' repr()-like value, but protect against recursive
    data structures.

\"\"\"" code nil nil [489 1054])
            ("sys" include nil nil [1056 1074])
            ("warnings" include nil nil [1075 1090])
            ("try" code nil nil [1092 1212])
            ("__all__" variable nil nil [1213 1309])
            ("_commajoin" variable nil nil [1344 1366])
            ("_id" variable nil nil [1367 1375])
            ("_len" variable nil nil [1376 1386])
            ("_type" variable nil nil [1387 1399])
            ("pprint" function
               (:documentation "Pretty-print a Python object to a stream [default is sys.stdout]."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1413 1419])
                    ("stream" variable nil (reparse-symbol function_parameters) [1421 1427])
                    ("indent" variable nil (reparse-symbol function_parameters) [1434 1440])
                    ("width" variable nil (reparse-symbol function_parameters) [1444 1449])
                    ("depth" variable nil (reparse-symbol function_parameters) [1454 1459]))                  )
                nil [1402 1663])
            ("pformat" function
               (:documentation "Format a Python object into a pretty-printed representation."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1676 1682])
                    ("indent" variable nil (reparse-symbol function_parameters) [1684 1690])
                    ("width" variable nil (reparse-symbol function_parameters) [1694 1699])
                    ("depth" variable nil (reparse-symbol function_parameters) [1704 1709]))                  )
                nil [1664 1870])
            ("saferepr" function
               (:documentation "Version of repr() which can handle recursive data structures."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1884 1890]))                  )
                nil [1871 2011])
            ("isreadable" function
               (:documentation "Determine if saferepr(object) is readable by eval()."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2027 2033]))                  )
                nil [2012 2145])
            ("isrecursive" function
               (:documentation "Determine if object requires a recursive representation."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2162 2168]))                  )
                nil [2146 2284])
            ("_sorted" function (:arguments 
              ( ("iterable" variable nil (reparse-symbol function_parameters) [2297 2305]))              ) nil [2285 2551])
            ("PrettyPrinter" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Handle pretty printing operations onto a stream using a set of
        configured parameters.

        indent
            Number of spaces to indent for each level of nesting.

        width
            Attempted maximum number of columns in the output.

        depth
            The maximum depth to print out nested structures.

        stream
            The desired output stream.  If omitted (or false), the standard
            output stream available at construction will be used.

        \"\"\"" code nil (reparse-symbol indented_block_body) [2650 3154])
                            ("indent" variable nil (reparse-symbol indented_block_body) [3163 3183])
                            ("width" variable nil (reparse-symbol indented_block_body) [3192 3210])
                            ("assert" code nil (reparse-symbol indented_block_body) [3219 3260])
                            ("assert" code nil (reparse-symbol indented_block_body) [3269 3323])
                            ("assert" code nil (reparse-symbol indented_block_body) [3332 3366])
                            ("self" variable nil (reparse-symbol indented_block_body) [3375 3394])
                            ("self" variable nil (reparse-symbol indented_block_body) [3403 3434])
                            ("self" variable nil (reparse-symbol indented_block_body) [3443 3462])
                            ("if" code nil (reparse-symbol indented_block_body) [3471 3581]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2590 2594])
                            ("indent" variable nil (reparse-symbol function_parameters) [2596 2602])
                            ("width" variable nil (reparse-symbol function_parameters) [2606 2611])
                            ("depth" variable nil (reparse-symbol function_parameters) [2616 2621])
                            ("stream" variable nil (reparse-symbol function_parameters) [2628 2634]))                          
                        :documentation "Handle pretty printing operations onto a stream using a set of
        configured parameters.

        indent
            Number of spaces to indent for each level of nesting.

        width
            Attempted maximum number of columns in the output.

        depth
            The maximum depth to print out nested structures.

        stream
            The desired output stream.  If omitted (or false), the standard
            output stream available at construction will be used.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2577 3581])
                    ("pprint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3597 3601])
                            ("object" variable nil (reparse-symbol function_parameters) [3603 3609]))                          )
                        (reparse-symbol indented_block_body) [3586 3701])
                    ("pformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3718 3722])
                            ("object" variable nil (reparse-symbol function_parameters) [3724 3730]))                          )
                        (reparse-symbol indented_block_body) [3706 3836])
                    ("isrecursive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3857 3861])
                            ("object" variable nil (reparse-symbol function_parameters) [3863 3869]))                          )
                        (reparse-symbol indented_block_body) [3841 3920])
                    ("isreadable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3940 3944])
                            ("object" variable nil (reparse-symbol function_parameters) [3946 3952]))                          )
                        (reparse-symbol indented_block_body) [3925 4060])
                    ("_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4077 4081])
                            ("object" variable nil (reparse-symbol function_parameters) [4083 4089])
                            ("stream" variable nil (reparse-symbol function_parameters) [4091 4097])
                            ("indent" variable nil (reparse-symbol function_parameters) [4099 4105])
                            ("allowance" variable nil (reparse-symbol function_parameters) [4107 4116])
                            ("context" variable nil (reparse-symbol function_parameters) [4118 4125])
                            ("level" variable nil (reparse-symbol function_parameters) [4127 4132]))                          )
                        (reparse-symbol indented_block_body) [4065 7653])
                    ("_repr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7668 7672])
                            ("object" variable nil (reparse-symbol function_parameters) [7674 7680])
                            ("context" variable nil (reparse-symbol function_parameters) [7682 7689])
                            ("level" variable nil (reparse-symbol function_parameters) [7691 7696]))                          )
                        (reparse-symbol indented_block_body) [7658 7976])
                    ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7992 7996])
                            ("object" variable nil (reparse-symbol function_parameters) [7998 8004])
                            ("context" variable nil (reparse-symbol function_parameters) [8006 8013])
                            ("maxlevels" variable nil (reparse-symbol function_parameters) [8015 8024])
                            ("level" variable nil (reparse-symbol function_parameters) [8026 8031]))                          
                        :documentation "Format object for a specific context, returning a string
        and flags indicating whether the representation is 'readable'
        and whether the object represents a recursive construct.
        ")
                        (reparse-symbol indented_block_body) [7981 8310]))                  
                :type "class")
                nil [2552 8310])
            ("_safe_repr" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [8384 8390])
                ("context" variable nil (reparse-symbol function_parameters) [8392 8399])
                ("maxlevels" variable nil (reparse-symbol function_parameters) [8401 8410])
                ("level" variable nil (reparse-symbol function_parameters) [8412 8417]))              ) nil [8369 11264])
            ("_recursion" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [11281 11287]))              ) nil [11266 11386])
            ("_perfcheck" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [11403 11409]))              ) nil [11388 11733])
            ("if" code nil nil [11734 11778]))          
      :file "pprint.py"
      :pointmax 11778
      :fsize 11777
      :lastmodtime '(21896 22713 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "traceback.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Extract, format and print information about Python stack traces.\"\"\"" code nil nil [1 71])
            ("linecache" include nil nil [73 89])
            ("sys" include nil nil [90 100])
            ("types" include nil nil [101 113])
            ("__all__" variable nil nil [115 378])
            ("_print" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [391 395])
                ("str" variable nil (reparse-symbol function_parameters) [397 400])
                ("terminator" variable nil (reparse-symbol function_parameters) [405 415]))              ) nil [380 454])
            ("print_list" function
               (:documentation "Print the list of tuples as returned by extract_tb() or
    extract_stack() as a formatted stack trace to the given file."
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [471 485])
                    ("file" variable nil (reparse-symbol function_parameters) [487 491]))                  )
                nil [456 893])
            ("format_list" function
               (:documentation "Format a list of traceback entry tuples for printing.

    Given a list of tuples as returned by extract_tb() or
    extract_stack(), return a list of strings ready for printing.
    Each string in the resulting list corresponds to the item with the
    same index in the argument list.  Each string ends in a newline;
    the strings may contain internal newlines as well, for those items
    whose source text line is not None.
    "
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [910 924]))                  )
                nil [894 1625])
            ("print_tb" function
               (:documentation "Print up to 'limit' stack trace entries from the traceback 'tb'.

    If 'limit' is omitted or None, all entries are printed.  If 'file'
    is omitted or None, the output goes to sys.stderr; otherwise
    'file' should be an open file or file-like object with a write()
    method.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1640 1642])
                    ("limit" variable nil (reparse-symbol function_parameters) [1644 1649])
                    ("file" variable nil (reparse-symbol function_parameters) [1656 1660]))                  )
                nil [1627 2612])
            ("format_tb" function
               (:documentation "A shorthand for 'format_list(extract_tb(tb, limit))'."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2627 2629])
                    ("limit" variable nil (reparse-symbol function_parameters) [2631 2636]))                  )
                nil [2613 2756])
            ("extract_tb" function
               (:documentation "Return list of up to limit pre-processed entries from traceback.

    This is useful for alternate formatting of stack traces.  If
    'limit' is omitted or None, all entries are extracted.  A
    pre-processed stack trace entry is a quadruple (filename, line
    number, function name, text) representing the information that is
    usually printed for a stack trace.  The text is a string with
    leading and trailing whitespace stripped; if the source is not
    available it is None.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2772 2774])
                    ("limit" variable nil (reparse-symbol function_parameters) [2776 2781]))                  )
                nil [2757 3892])
            ("print_exception" function
               (:documentation "Print exception up to 'limit' stack trace entries from 'tb' to 'file'.

    This differs from print_tb() in the following ways: (1) if
    traceback is not None, it prints a header \"Traceback (most recent
    call last):\"; (2) it prints the exception type and value after the
    stack trace; (3) if type is SyntaxError and value has the
    appropriate format, it prints the line where the syntax error
    occurred with a caret on the next line indicating the approximate
    position of the error.
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [3914 3919])
                    ("value" variable nil (reparse-symbol function_parameters) [3921 3926])
                    ("tb" variable nil (reparse-symbol function_parameters) [3928 3930])
                    ("limit" variable nil (reparse-symbol function_parameters) [3932 3937])
                    ("file" variable nil (reparse-symbol function_parameters) [3944 3948]))                  )
                nil [3894 4725])
            ("format_exception" function
               (:documentation "Format a stack trace and the exception information.

    The arguments have the same meaning as the corresponding arguments
    to print_exception().  The return value is a list of strings, each
    ending in a newline and some containing internal newlines.  When
    these lines are concatenated and printed, exactly the same text is
    printed as does print_exception().
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [4747 4752])
                    ("value" variable nil (reparse-symbol function_parameters) [4754 4759])
                    ("tb" variable nil (reparse-symbol function_parameters) [4761 4763])
                    ("limit" variable nil (reparse-symbol function_parameters) [4765 4770]))                  )
                nil [4726 5377])
            ("format_exception_only" function
               (:documentation "Format the exception part of a traceback.

    The arguments are the exception type and value such as given by
    sys.last_type and sys.last_value. The return value is a list of
    strings, each ending in a newline.

    Normally, the list contains a single string; however, for
    SyntaxError exceptions, it contains several lines that (when
    printed) display detailed information about where the syntax
    error occurred.

    The message indicating which exception occurred is always the last
    string in the list.

    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [5404 5409])
                    ("value" variable nil (reparse-symbol function_parameters) [5411 5416]))                  )
                nil [5378 7519])
            ("_format_final_exc_line" function
               (:documentation "Return a list of a single line -- normal case for format_exception_only"
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [7547 7552])
                    ("value" variable nil (reparse-symbol function_parameters) [7554 7559]))                  )
                nil [7520 7816])
            ("_some_str" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [7831 7836]))              ) nil [7817 8101])
            ("print_exc" function
               (:documentation "Shorthand for 'print_exception(sys.exc_type, sys.exc_value, sys.exc_traceback, limit, file)'.
    (In fact, it uses sys.exc_info() to retrieve the same information
    in a thread-safe way.)"
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8117 8122])
                    ("file" variable nil (reparse-symbol function_parameters) [8129 8133]))                  )
                nil [8103 8542])
            ("format_exc" function
               (:documentation "Like print_exc() but return a string."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8559 8564]))                  )
                nil [8544 8784])
            ("print_last" function
               (:documentation "This is a shorthand for 'print_exception(sys.last_type,
    sys.last_value, sys.last_traceback, limit, file)'."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8801 8806])
                    ("file" variable nil (reparse-symbol function_parameters) [8813 8817]))                  )
                nil [8786 9181])
            ("print_stack" function
               (:documentation "Print a stack trace from its invocation point.

    The optional 'f' argument can be used to specify an alternate
    stack frame at which to start. The optional 'limit' and 'file'
    arguments have the same meaning as for print_exception().
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9199 9200])
                    ("limit" variable nil (reparse-symbol function_parameters) [9207 9212])
                    ("file" variable nil (reparse-symbol function_parameters) [9219 9223]))                  )
                nil [9183 9686])
            ("format_stack" function
               (:documentation "Shorthand for 'format_list(extract_stack(f, limit))'."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9704 9705])
                    ("limit" variable nil (reparse-symbol function_parameters) [9712 9717]))                  )
                nil [9687 9988])
            ("extract_stack" function
               (:documentation "Extract the raw traceback from the current stack frame.

    The return value has the same format as for extract_tb().  The
    optional 'f' and 'limit' arguments have the same meaning as for
    print_stack().  Each item in the list is a quadruple (filename,
    line number, function name, text), and the entries are in order
    from oldest to newest stack frame.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [10007 10008])
                    ("limit" variable nil (reparse-symbol function_parameters) [10015 10020]))                  )
                nil [9989 11149])
            ("tb_lineno" function
               (:documentation "Calculate correct line number of traceback given in tb.

    Obsolete in 2.3.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [11164 11166]))                  )
                nil [11150 11286]))          
      :file "traceback.py"
      :pointmax 11286
      :fsize 11285
      :lastmodtime '(21896 22713 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "types.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Define names for all type symbols known in the standard interpreter.

Types that are part of optional modules (e.g. array) are not listed.
\"\"\"" code nil nil [1 146])
            ("sys" include nil nil [147 157])
            ("NoneType" variable nil nil [408 429])
            ("TypeType" variable nil nil [430 445])
            ("ObjectType" variable nil nil [446 465])
            ("IntType" variable nil nil [467 480])
            ("LongType" variable nil nil [481 496])
            ("FloatType" variable nil nil [497 514])
            ("BooleanType" variable nil nil [515 533])
            ("try" code nil nil [534 592])
            ("StringType" variable nil nil [593 609])
            ("try" code nil nil [801 926])
            ("BufferType" variable nil nil [927 946])
            ("TupleType" variable nil nil [948 965])
            ("ListType" variable nil nil [966 981])
            ("DictType" variable nil nil [982 1014])
            ("_f" function nil nil [1016 1031])
            ("FunctionType" variable nil nil [1031 1054])
            ("LambdaType" variable nil nil [1055 1086])
            ("CodeType" variable nil nil [1118 1147])
            ("_g" function nil nil [1149 1171])
            ("GeneratorType" variable nil nil [1171 1197])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1220 1224]))                          )
                        (reparse-symbol indented_block_body) [1213 1232]))                  
                :type "class")
                nil [1199 1232])
            ("ClassType" variable nil nil [1232 1252])
            ("UnboundMethodType" variable nil nil [1253 1284])
            ("_x" variable nil nil [1314 1323])
            ("InstanceType" variable nil nil [1324 1347])
            ("MethodType" variable nil nil [1348 1372])
            ("BuiltinFunctionType" variable nil nil [1374 1405])
            ("BuiltinMethodType" variable nil nil [1406 1441])
            ("ModuleType" variable nil nil [1477 1499])
            ("FileType" variable nil nil [1500 1515])
            ("XRangeType" variable nil nil [1516 1535])
            ("try" code nil nil [1537 1681])
            ("SliceType" variable nil nil [1682 1699])
            ("EllipsisType" variable nil nil [1700 1729])
            ("DictProxyType" variable nil nil [1731 1770])
            ("NotImplementedType" variable nil nil [1771 1812])
            ("GetSetDescriptorType" variable nil nil [1866 1917])
            ("MemberDescriptorType" variable nil nil [1918 1972])
            ("del" code nil nil [1974 1997]))          
      :file "types.py"
      :pointmax 2041
      :fsize 2040
      :lastmodtime '(21896 22713 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "string.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"A collection of string operations (most are no longer used).

Warning: most of the code you see here isn't normally used nowadays.
Beginning with Python 1.6, many of these functions are implemented as
methods on the standard string object. They used to be implemented by
a built-in module called strop, but strop is now obsolete itself.

Public module variables:

whitespace -- a string containing all characters considered whitespace
lowercase -- a string containing all characters considered lowercase letters
uppercase -- a string containing all characters considered uppercase letters
letters -- a string containing all characters considered letters
digits -- a string containing all characters considered decimal digits
hexdigits -- a string containing all characters considered hexadecimal digits
octdigits -- a string containing all characters considered octal digits
punctuation -- a string containing all characters considered punctuation
printable -- a string containing all characters considered printable

\"\"\"" code nil nil [1 1025])
            ("whitespace" variable nil nil [1083 1109])
            ("lowercase" variable nil nil [1110 1150])
            ("uppercase" variable nil nil [1151 1191])
            ("letters" code nil nil [1192 1223])
            ("ascii_lowercase" variable nil nil [1224 1251])
            ("ascii_uppercase" variable nil nil [1252 1279])
            ("ascii_letters" code nil nil [1280 1329])
            ("digits" variable nil nil [1330 1351])
            ("hexdigits" code nil nil [1352 1392])
            ("octdigits" variable nil nil [1393 1415])
            ("punctuation" variable nil nil [1416 1468])
            ("printable" code nil nil [1469 1524])
            ("l" variable nil nil [1603 1628])
            ("_idmap" variable nil nil [1629 1653])
            ("del" code nil nil [1654 1659])
            ("capwords" function
               (:documentation "capwords(s [,sep]) -> string

    Split the argument into words using split, capitalize each
    word using capitalize, and join the capitalized words using
    join.  If the optional second argument sep is absent or None,
    runs of whitespace characters are replaced by a single space
    and leading and trailing whitespace are removed, otherwise
    sep is used to split and join the words.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1797 1798])
                    ("sep" variable nil (reparse-symbol function_parameters) [1800 1803]))                  )
                nil [1784 2290])
            ("_idmapL" variable nil nil [2325 2339])
            ("maketrans" function
               (:documentation "maketrans(frm, to) -> string

    Return a translation table (a string of 256 bytes long)
    suitable for use in string.translate.  The strings frm and to
    must be of the same length.

    "
                :arguments 
                  ( ("fromstr" variable nil (reparse-symbol function_parameters) [2354 2361])
                    ("tostr" variable nil (reparse-symbol function_parameters) [2363 2368]))                  )
                nil [2340 2890])
            ("re" include nil nil [2962 2978])
            ("_multimap" type
               (:documentation "Helper class for combining multiple mappings.

    Used by .{safe_,}substitute() to combine the mapping and keyword
    arguments.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3195 3218])
                            ("self" variable nil (reparse-symbol indented_block_body) [3227 3254]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3160 3164])
                            ("primary" variable nil (reparse-symbol function_parameters) [3166 3173])
                            ("secondary" variable nil (reparse-symbol function_parameters) [3175 3184]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3147 3255])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3276 3280])
                            ("key" variable nil (reparse-symbol function_parameters) [3282 3285]))                          )
                        (reparse-symbol indented_block_body) [3260 3404]))                  
                :type "class")
                nil [2980 3404])
            ("_TemplateMetaclass" type
               (:superclasses ("type")
                :members 
                  ( ("pattern" variable nil (reparse-symbol indented_block_body) [3442 3762])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3813 3870])
                            ("if" code nil (reparse-symbol indented_block_body) [3879 4113])
                            ("cls" variable nil (reparse-symbol indented_block_body) [4121 4185]))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3781 3784])
                            ("name" variable nil (reparse-symbol function_parameters) [3786 3790])
                            ("bases" variable nil (reparse-symbol function_parameters) [3792 3797])
                            ("dct" variable nil (reparse-symbol function_parameters) [3799 3802]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3768 4186]))                  
                :type "class")
                nil [3406 4186])
            ("Template" type
               (:documentation "A string class for supporting $-substitutions."
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [4265 4299])
                    ("delimiter" variable nil (reparse-symbol indented_block_body) [4305 4320])
                    ("idpattern" variable nil (reparse-symbol indented_block_body) [4325 4356])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4400 4424]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4375 4379])
                            ("template" variable nil (reparse-symbol function_parameters) [4381 4389]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4362 4425])
                    ("_invalid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4510 4514])
                            ("mo" variable nil (reparse-symbol function_parameters) [4516 4518]))                          )
                        (reparse-symbol indented_block_body) [4497 4884])
                    ("substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4904 4908])
                            ("args" variable nil (reparse-symbol function_parameters) [4910 4915])
                            ("kws" variable nil (reparse-symbol function_parameters) [4917 4922]))                          )
                        (reparse-symbol indented_block_body) [4889 5933])
                    ("safe_substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5958 5962])
                            ("args" variable nil (reparse-symbol function_parameters) [5964 5969])
                            ("kws" variable nil (reparse-symbol function_parameters) [5971 5976]))                          )
                        (reparse-symbol indented_block_body) [5938 7244]))                  
                :type "class")
                nil [4188 7244])
            ("index_error" variable nil nil [7475 7499])
            ("atoi_error" variable nil nil [7500 7523])
            ("atof_error" variable nil nil [7524 7547])
            ("atol_error" variable nil nil [7548 7571])
            ("lower" function
               (:documentation "lower(s) -> string

    Return a copy of the string s converted to lowercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7626 7627]))                  )
                nil [7616 7745])
            ("upper" function
               (:documentation "upper(s) -> string

    Return a copy of the string s converted to uppercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7799 7800]))                  )
                nil [7789 7918])
            ("swapcase" function
               (:documentation "swapcase(s) -> string

    Return a copy of the string s with upper case characters
    converted to lowercase and vice versa.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7973 7974]))                  )
                nil [7960 8144])
            ("strip" function
               (:documentation "strip(s [,chars]) -> string

    Return a copy of the string s with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is unicode, S will be converted to unicode before stripping.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8200 8201])
                    ("chars" variable nil (reparse-symbol function_parameters) [8203 8208]))                  )
                nil [8190 8517])
            ("lstrip" function
               (:documentation "lstrip(s [,chars]) -> string

    Return a copy of the string s with leading whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8561 8562])
                    ("chars" variable nil (reparse-symbol function_parameters) [8564 8569]))                  )
                nil [8550 8789])
            ("rstrip" function
               (:documentation "rstrip(s [,chars]) -> string

    Return a copy of the string s with trailing whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8834 8835])
                    ("chars" variable nil (reparse-symbol function_parameters) [8837 8842]))                  )
                nil [8823 9063])
            ("split" function
               (:documentation "split(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string.  If maxsplit is given, splits at no more than
    maxsplit places (resulting in at most maxsplit+1 words).  If sep
    is not specified or is None, any whitespace string is a separator.

    (split and splitfields are synonymous)

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9133 9134])
                    ("sep" variable nil (reparse-symbol function_parameters) [9136 9139])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9146 9154]))                  )
                nil [9123 9575])
            ("splitfields" variable nil nil [9575 9594])
            ("rsplit" function
               (:documentation "rsplit(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string, starting at the end of the string and working
    to the front.  If maxsplit is given, at most maxsplit splits are
    done. If sep is not specified or is None, any whitespace string
    is a separator.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9665 9666])
                    ("sep" variable nil (reparse-symbol function_parameters) [9668 9671])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9678 9686]))                  )
                nil [9654 10081])
            ("join" function
               (:documentation "join(list [,sep]) -> string

    Return a string composed of the words in list, with
    intervening occurrences of sep.  The default separator is a
    single space.

    (joinfields and join are synonymous)

    "
                :arguments 
                  ( ("words" variable nil (reparse-symbol function_parameters) [10129 10134])
                    ("sep" variable nil (reparse-symbol function_parameters) [10136 10139]))                  )
                nil [10120 10400])
            ("joinfields" variable nil nil [10400 10417])
            ("index" function
               (:documentation "index(s, sub [,start [,end]]) -> int

    Like find but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10476 10477])
                    ("args" variable nil (reparse-symbol function_parameters) [10479 10484]))                  )
                nil [10466 10636])
            ("rindex" function
               (:documentation "rindex(s, sub [,start [,end]]) -> int

    Like rfind but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10700 10701])
                    ("args" variable nil (reparse-symbol function_parameters) [10703 10708]))                  )
                nil [10689 10863])
            ("count" function
               (:documentation "count(s, sub[, start[,end]]) -> int

    Return the number of occurrences of substring sub in string
    s[start:end].  Optional arguments start and end are
    interpreted as in slice notation.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10923 10924])
                    ("args" variable nil (reparse-symbol function_parameters) [10926 10931]))                  )
                nil [10913 11171])
            ("find" function
               (:documentation "find(s, sub [,start [,end]]) -> in

    Return the lowest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11222 11223])
                    ("args" variable nil (reparse-symbol function_parameters) [11225 11230]))                  )
                nil [11213 11528])
            ("rfind" function
               (:documentation "rfind(s, sub [,start [,end]]) -> int

    Return the highest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11585 11586])
                    ("args" variable nil (reparse-symbol function_parameters) [11588 11593]))                  )
                nil [11575 11895])
            ("_float" variable nil nil [11917 11931])
            ("_int" variable nil nil [11932 11942])
            ("_long" variable nil nil [11943 11955])
            ("atof" function
               (:documentation "atof(s) -> float

    Return the floating point number represented by the string s.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11992 11993]))                  )
                nil [11983 12117])
            ("atoi" function
               (:documentation "atoi(s [,base]) -> int

    Return the integer represented by the string s in the given
    base, which defaults to 10.  The string s must consist of one
    or more digits, possibly preceded by a sign.  If base is 0, it
    is chosen from the leading characters of s, 0 for octal, 0x or
    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is
    accepted.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12156 12157])
                    ("base" variable nil (reparse-symbol function_parameters) [12160 12164]))                  )
                nil [12147 12577])
            ("atol" function
               (:documentation "atol(s [,base]) -> long

    Return the long integer represented by the string s in the
    given base, which defaults to 10.  The string s must consist
    of one or more digits, possibly preceded by a sign.  If base
    is 0, it is chosen from the leading characters of s, 0 for
    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding
    0x or 0X is accepted.  A trailing L or l is not accepted,
    unless base is 0.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12621 12622])
                    ("base" variable nil (reparse-symbol function_parameters) [12624 12628]))                  )
                nil [12612 13106])
            ("ljust" function
               (:documentation "ljust(s, width[, fillchar]) -> string

    Return a left-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13142 13143])
                    ("width" variable nil (reparse-symbol function_parameters) [13145 13150])
                    ("args" variable nil (reparse-symbol function_parameters) [13152 13157]))                  )
                nil [13132 13449])
            ("rjust" function
               (:documentation "rjust(s, width[, fillchar]) -> string

    Return a right-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13485 13486])
                    ("width" variable nil (reparse-symbol function_parameters) [13488 13493])
                    ("args" variable nil (reparse-symbol function_parameters) [13495 13500]))                  )
                nil [13475 13793])
            ("center" function
               (:documentation "center(s, width[, fillchar]) -> string

    Return a center version of s, in a field of the specified
    width. padded with spaces as needed.  The string is never
    truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13823 13824])
                    ("width" variable nil (reparse-symbol function_parameters) [13826 13831])
                    ("args" variable nil (reparse-symbol function_parameters) [13833 13838]))                  )
                nil [13812 14124])
            ("zfill" function
               (:documentation "zfill(x, width) -> string

    Pad a numeric string x with zeros on the left, to fill a field
    of the specified width.  The string x is never truncated.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [14336 14337])
                    ("width" variable nil (reparse-symbol function_parameters) [14339 14344]))                  )
                nil [14326 14603])
            ("expandtabs" function
               (:documentation "expandtabs(s [,tabsize]) -> string

    Return a copy of the string s with all tab characters replaced
    by the appropriate number of spaces, depending on the current
    column, and the tabsize (default 8).

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [14718 14719])
                    ("tabsize" variable nil (reparse-symbol function_parameters) [14721 14728]))                  )
                nil [14703 14992])
            ("translate" function
               (:documentation "translate(s,table [,deletions]) -> string

    Return a copy of the string s, where all characters occurring
    in the optional argument deletions are removed, and the
    remaining characters have been mapped through the given
    translation table, which must be a string of length 256.  The
    deletions argument is not allowed for Unicode strings.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15054 15055])
                    ("table" variable nil (reparse-symbol function_parameters) [15057 15062])
                    ("deletions" variable nil (reparse-symbol function_parameters) [15064 15073]))                  )
                nil [15040 15803])
            ("capitalize" function
               (:documentation "capitalize(s) -> string

    Return a copy of the string s with only its first character
    capitalized.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15873 15874]))                  )
                nil [15858 16025])
            ("replace" function
               (:documentation "replace (str, old, new[, maxreplace]) -> string

    Return a copy of string str with all occurrences of substring
    old replaced by new. If the optional argument maxreplace is
    given, only the first maxreplace occurrences are replaced.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [16071 16072])
                    ("old" variable nil (reparse-symbol function_parameters) [16074 16077])
                    ("new" variable nil (reparse-symbol function_parameters) [16079 16082])
                    ("maxreplace" variable nil (reparse-symbol function_parameters) [16084 16094]))                  )
                nil [16059 16401])
            ("try" code nil nil [16643 16848])
            ("Formatter" type
               (:superclasses ("object")
                :members 
                  ( ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17294 17298])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17300 17313])
                            ("args" variable nil (reparse-symbol function_parameters) [17315 17320])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17322 17330]))                          )
                        (reparse-symbol indented_block_body) [17283 17390])
                    ("vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17407 17411])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17413 17426])
                            ("args" variable nil (reparse-symbol function_parameters) [17428 17432])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17434 17440]))                          )
                        (reparse-symbol indented_block_body) [17395 17621])
                    ("_vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17639 17643])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17645 17658])
                            ("args" variable nil (reparse-symbol function_parameters) [17660 17664])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17666 17672])
                            ("used_args" variable nil (reparse-symbol function_parameters) [17674 17683])
                            ("recursion_depth" variable nil (reparse-symbol function_parameters) [17685 17700]))                          )
                        (reparse-symbol indented_block_body) [17626 18930])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18950 18954])
                            ("key" variable nil (reparse-symbol function_parameters) [18956 18959])
                            ("args" variable nil (reparse-symbol function_parameters) [18961 18965])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18967 18973]))                          )
                        (reparse-symbol indented_block_body) [18936 19091])
                    ("check_unused_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19119 19123])
                            ("used_args" variable nil (reparse-symbol function_parameters) [19125 19134])
                            ("args" variable nil (reparse-symbol function_parameters) [19136 19140])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19142 19148]))                          )
                        (reparse-symbol indented_block_body) [19097 19164])
                    ("format_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19187 19191])
                            ("value" variable nil (reparse-symbol function_parameters) [19193 19198])
                            ("format_spec" variable nil (reparse-symbol function_parameters) [19200 19211]))                          )
                        (reparse-symbol indented_block_body) [19170 19256])
                    ("convert_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19280 19284])
                            ("value" variable nil (reparse-symbol function_parameters) [19286 19291])
                            ("conversion" variable nil (reparse-symbol function_parameters) [19293 19303]))                          )
                        (reparse-symbol indented_block_body) [19262 19621])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19996 20000])
                            ("format_string" variable nil (reparse-symbol function_parameters) [20002 20015]))                          )
                        (reparse-symbol indented_block_body) [19986 20067])
                    ("get_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20344 20348])
                            ("field_name" variable nil (reparse-symbol function_parameters) [20350 20360])
                            ("args" variable nil (reparse-symbol function_parameters) [20362 20366])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20368 20374]))                          )
                        (reparse-symbol indented_block_body) [20330 20757]))                  
                :type "class")
                nil [17254 20757]))          
      :file "string.py"
      :pointmax 20757
      :fsize 20756
      :lastmodtime '(21896 22713 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "fnmatch.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Filename matching with shell patterns.

fnmatch(FILENAME, PATTERN) matches according to the local convention.
fnmatchcase(FILENAME, PATTERN) always takes case in account.

The functions operate by translating the pattern into a regular
expression.  They cache the compiled regular expressions for speed.

The function translate(PATTERN) returns a regular expression
corresponding to PATTERN.  (It does not compile it.)
\"\"\"" code nil nil [1 426])
            ("re" include nil nil [428 437])
            ("__all__" variable nil nil [439 498])
            ("_cache" variable nil nil [500 511])
            ("_MAXCACHE" variable nil nil [512 527])
            ("_purge" function (:documentation "Clear the pattern cache") nil [529 596])
            ("fnmatch" function
               (:documentation "Test whether FILENAME matches PATTERN.

    Patterns are Unix shell style:

    *       matches everything
    ?       matches any single character
    [seq]   matches any character in seq
    [!seq]  matches any char not in seq

    An initial period in FILENAME is not special.
    Both FILENAME and PATTERN are first case-normalized
    if the operating system requires it.
    If you don't want this, use fnmatchcase(FILENAME, PATTERN).
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [609 613])
                    ("pat" variable nil (reparse-symbol function_parameters) [615 618]))                  )
                nil [597 1192])
            ("filter" function
               (:documentation "Return the subset of the list NAMES that match PAT"
                :arguments 
                  ( ("names" variable nil (reparse-symbol function_parameters) [1204 1209])
                    ("pat" variable nil (reparse-symbol function_parameters) [1211 1214]))                  )
                nil [1193 1856])
            ("fnmatchcase" function
               (:documentation "Test whether FILENAME matches PATTERN, including case.

    This is a version of fnmatch() which doesn't case-normalize
    its arguments.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1873 1877])
                    ("pat" variable nil (reparse-symbol function_parameters) [1879 1882]))                  )
                nil [1857 2244])
            ("translate" function
               (:documentation "Translate a shell PATTERN to a regular expression.

    There is no way to quote meta-characters.
    "
                :arguments 
                  ( ("pat" variable nil (reparse-symbol function_parameters) [2259 2262]))                  )
                nil [2245 3240]))          
      :file "fnmatch.py"
      :pointmax 3240
      :fsize 3239
      :lastmodtime '(21896 22713 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "sre_compile.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [225 262])
            ("sys" include nil nil [264 280])
            ("_sre" include nil nil [264 280])
            ("sre_parse" include nil nil [281 297])
            ("sre_constants" include nil nil [298 325])
            ("assert" code nil nil [327 376])
            ("if" code nil nil [378 453])
            ("_identityfunction" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [476 477]))              ) nil [454 493])
            ("_LITERAL_CODES" variable nil nil [494 538])
            ("_REPEATING_CODES" variable nil nil [539 595])
            ("_SUCCESS_CODES" variable nil nil [596 636])
            ("_ASSERT_CODES" variable nil nil [637 678])
            ("_compile" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [693 697])
                ("pattern" variable nil (reparse-symbol function_parameters) [699 706])
                ("flags" variable nil (reparse-symbol function_parameters) [708 713]))              ) nil [680 6012])
            ("_compile_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6034 6041])
                ("flags" variable nil (reparse-symbol function_parameters) [6043 6048])
                ("code" variable nil (reparse-symbol function_parameters) [6050 6054])
                ("fixup" variable nil (reparse-symbol function_parameters) [6056 6061]))              ) nil [6013 6919])
            ("_optimize_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6942 6949])
                ("fixup" variable nil (reparse-symbol function_parameters) [6951 6956]))              ) nil [6920 8337])
            ("_mk_bitmap" function (:arguments 
              ( ("bits" variable nil (reparse-symbol function_parameters) [8353 8357]))              ) nil [8338 8669])
            ("_optimize_unicode" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [10019 10026])
                ("fixup" variable nil (reparse-symbol function_parameters) [10028 10033]))              ) nil [9997 11588])
            ("_simple" function (:arguments 
              ( ("av" variable nil (reparse-symbol function_parameters) [11601 11603]))              ) nil [11589 11732])
            ("_compile_info" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [11751 11755])
                ("pattern" variable nil (reparse-symbol function_parameters) [11757 11764])
                ("flags" variable nil (reparse-symbol function_parameters) [11766 11771]))              ) nil [11733 15131])
            ("try" code nil nil [15132 15253])
            ("isstring" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [15267 15270]))              ) nil [15254 15367])
            ("_code" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15378 15379])
                ("flags" variable nil (reparse-symbol function_parameters) [15381 15386]))              ) nil [15368 15613])
            ("compile" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15626 15627])
                ("flags" variable nil (reparse-symbol function_parameters) [15629 15634]))              ) nil [15614 16358]))          
      :file "sre_compile.py"
      :pointmax 16358
      :fsize 16357
      :lastmodtime '(21896 22713 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "sre_parse.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [240 277])
            ("sys" include nil nil [345 355])
            ("sre_constants" include nil nil [357 384])
            ("SPECIAL_CHARS" variable nil nil [386 417])
            ("REPEAT_CHARS" variable nil nil [418 439])
            ("DIGITS" variable nil nil [441 467])
            ("OCTDIGITS" variable nil nil [469 496])
            ("HEXDIGITS" variable nil nil [497 538])
            ("WHITESPACE" variable nil nil [540 571])
            ("ESCAPES" variable nil nil [573 849])
            ("CATEGORIES" variable nil nil [851 1327])
            ("FLAGS" variable nil nil [1329 1571])
            ("Pattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1683 1697])
                            ("self" variable nil (reparse-symbol indented_block_body) [1706 1720])
                            ("self" variable nil (reparse-symbol indented_block_body) [1729 1744])
                            ("self" variable nil (reparse-symbol indented_block_body) [1753 1772]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1668 1672]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1655 1773])
                    ("opengroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1791 1795])
                            ("name" variable nil (reparse-symbol function_parameters) [1797 1801]))                          )
                        (reparse-symbol indented_block_body) [1777 2214])
                    ("closegroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2233 2237])
                            ("gid" variable nil (reparse-symbol function_parameters) [2239 2242]))                          )
                        (reparse-symbol indented_block_body) [2218 2275])
                    ("checkgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2294 2298])
                            ("gid" variable nil (reparse-symbol function_parameters) [2300 2303]))                          )
                        (reparse-symbol indented_block_body) [2279 2364]))                  
                :type "class")
                nil [1573 2364])
            ("SubPattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2476 2498])
                            ("if" code nil (reparse-symbol indented_block_body) [2507 2546])
                            ("self" variable nil (reparse-symbol indented_block_body) [2554 2570])
                            ("self" variable nil (reparse-symbol indented_block_body) [2579 2596]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2441 2445])
                            ("pattern" variable nil (reparse-symbol function_parameters) [2447 2454])
                            ("data" variable nil (reparse-symbol function_parameters) [2456 2460]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2428 2597])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2610 2614])
                            ("level" variable nil (reparse-symbol function_parameters) [2616 2621]))                          )
                        (reparse-symbol indented_block_body) [2601 3557])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3574 3578]))                          )
                        (reparse-symbol indented_block_body) [3561 3612])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3628 3632]))                          )
                        (reparse-symbol indented_block_body) [3616 3665])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3685 3689])
                            ("index" variable nil (reparse-symbol function_parameters) [3691 3696]))                          )
                        (reparse-symbol indented_block_body) [3669 3728])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3748 3752])
                            ("index" variable nil (reparse-symbol function_parameters) [3754 3759]))                          )
                        (reparse-symbol indented_block_body) [3732 3893])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3913 3917])
                            ("index" variable nil (reparse-symbol function_parameters) [3919 3924])
                            ("code" variable nil (reparse-symbol function_parameters) [3926 3930]))                          )
                        (reparse-symbol indented_block_body) [3897 3965])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3980 3984])
                            ("index" variable nil (reparse-symbol function_parameters) [3986 3991])
                            ("code" variable nil (reparse-symbol function_parameters) [3993 3997]))                          )
                        (reparse-symbol indented_block_body) [3969 4038])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4053 4057])
                            ("code" variable nil (reparse-symbol function_parameters) [4059 4063]))                          )
                        (reparse-symbol indented_block_body) [4042 4097])
                    ("getwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4114 4118]))                          )
                        (reparse-symbol indented_block_body) [4101 5322]))                  
                :type "class")
                nil [2365 5322])
            ("Tokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5380 5400])
                            ("self" variable nil (reparse-symbol indented_block_body) [5409 5423])
                            ("self" code nil (reparse-symbol indented_block_body) [5432 5445]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5357 5361])
                            ("string" variable nil (reparse-symbol function_parameters) [5363 5369]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5344 5446])
                    ("raise" code nil (reparse-symbol indented_block_body) [7715 7761]))                  
                :type "class")
                nil [5323 7762])
            ("_escape" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [7775 7781])
                ("escape" variable nil (reparse-symbol function_parameters) [7783 7789])
                ("state" variable nil (reparse-symbol function_parameters) [7791 7796]))              ) nil [7763 9455])
            ("_parse_sub" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [9471 9477])
                ("state" variable nil (reparse-symbol function_parameters) [9479 9484])
                ("nested" variable nil (reparse-symbol function_parameters) [9486 9492]))              ) nil [9456 11081])
            ("_parse_sub_cond" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11102 11108])
                ("state" variable nil (reparse-symbol function_parameters) [11110 11115])
                ("condgroup" variable nil (reparse-symbol function_parameters) [11117 11126]))              ) nil [11082 11600])
            ("_PATTERNENDERS" variable nil nil [11601 11627])
            ("_ASSERTCHARS" variable nil nil [11628 11653])
            ("_LOOKBEHINDASSERTCHARS" variable nil nil [11654 11688])
            ("_REPEATCODES" variable nil nil [11689 11733])
            ("_parse" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11746 11752])
                ("state" variable nil (reparse-symbol function_parameters) [11754 11759]))              ) nil [11735 27055])
            ("expand_template" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [27076 27084])
                ("match" variable nil (reparse-symbol function_parameters) [27086 27091]))              ) nil [27056 27461]))          
      :file "sre_parse.py"
      :pointmax 27461
      :fsize 27460
      :lastmodtime '(21896 22713 0 0)
      :unmatched-syntax '((ASSIGN 26768 . 26769) (INDENT_BLOCK 7698 . 7711) (NEWLINE 7697 . 7698) (COLON 7696 . 7697)))
    (semanticdb-table "warnings.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Python part of the warnings subsystem.\"\"\"" code nil nil [1 45])
            ("linecache" include nil nil [172 188])
            ("sys" include nil nil [189 199])
            ("types" include nil nil [200 212])
            ("__all__" variable nil nil [214 328])
            ("warnpy3k" function
               (:documentation "Issue a deprecation warning for Python 3.x related changes.

    Warnings are omitted unless Python is started with the -3 option.
    "
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [344 351])
                    ("category" variable nil (reparse-symbol function_parameters) [353 361])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [368 378]))                  )
                nil [331 670])
            ("_show_warning" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [689 696])
                    ("category" variable nil (reparse-symbol function_parameters) [698 706])
                    ("filename" variable nil (reparse-symbol function_parameters) [708 716])
                    ("lineno" variable nil (reparse-symbol function_parameters) [718 724])
                    ("file" variable nil (reparse-symbol function_parameters) [726 730])
                    ("line" variable nil (reparse-symbol function_parameters) [737 741]))                  )
                nil [671 1047])
            ("showwarning" variable nil nil [1134 1161])
            ("formatwarning" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [1181 1188])
                    ("category" variable nil (reparse-symbol function_parameters) [1190 1198])
                    ("filename" variable nil (reparse-symbol function_parameters) [1200 1208])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1210 1216])
                    ("line" variable nil (reparse-symbol function_parameters) [1218 1222]))                  )
                nil [1163 1519])
            ("filterwarnings" function
               (:documentation "Insert an entry into the list of warnings filters (at the front).

    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'message' -- a regex that the warning message must match
    'category' -- a class that the warning must be a subclass of
    'module' -- a regex that the module name must match
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [1539 1545])
                    ("message" variable nil (reparse-symbol function_parameters) [1547 1554])
                    ("category" variable nil (reparse-symbol function_parameters) [1559 1567])
                    ("module" variable nil (reparse-symbol function_parameters) [1577 1583])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1588 1594])
                    ("append" variable nil (reparse-symbol function_parameters) [1617 1623]))                  )
                nil [1520 2854])
            ("simplefilter" function
               (:documentation "Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'category' -- a class that the warning must be a subclass of
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [2872 2878])
                    ("category" variable nil (reparse-symbol function_parameters) [2880 2888])
                    ("lineno" variable nil (reparse-symbol function_parameters) [2898 2904])
                    ("append" variable nil (reparse-symbol function_parameters) [2908 2914]))                  )
                nil [2855 3709])
            ("resetwarnings" function (:documentation "Clear the list of warning filters, so that no filters are active.") nil [3710 3827])
            ("_OptionError" type
               (:documentation "Exception used by option processing helpers."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3918 3922]))                  
                :type "class")
                nil [3828 3923])
            ("_processoptions" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [4002 4006]))              ) nil [3982 4171])
            ("_setoption" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [4218 4221]))              ) nil [4203 5029])
            ("_getaction" function (:arguments 
              ( ("action" variable nil (reparse-symbol function_parameters) [5071 5077]))              ) nil [5056 5356])
            ("_getcategory" function (:arguments 
              ( ("category" variable nil (reparse-symbol function_parameters) [5400 5408]))              ) nil [5383 6216])
            ("warn" function
               (:documentation "Issue a warning, or maybe ignore it or raise an exception."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [6266 6273])
                    ("category" variable nil (reparse-symbol function_parameters) [6275 6283])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [6290 6300]))                  )
                nil [6257 7596])
            ("warn_explicit" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [7615 7622])
                ("category" variable nil (reparse-symbol function_parameters) [7624 7632])
                ("filename" variable nil (reparse-symbol function_parameters) [7634 7642])
                ("lineno" variable nil (reparse-symbol function_parameters) [7644 7650])
                ("module" variable nil (reparse-symbol function_parameters) [7670 7676])
                ("registry" variable nil (reparse-symbol function_parameters) [7683 7691])
                ("module_globals" variable nil (reparse-symbol function_parameters) [7698 7712]))              ) nil [7597 9607])
            ("WarningMessage" type
               (:documentation "Holds the result of a single showwarning() call."
                :superclasses ("object")
                :members 
                  ( ("_WARNING_DETAILS" variable nil (reparse-symbol indented_block_body) [9704 9808])
                    ("__init__" function
                       (:suite 
                          ( ("local_values" variable nil (reparse-symbol indented_block_body) [9921 9944])
                            ("for" code nil (reparse-symbol indented_block_body) [9953 10040])
                            ("None" code nil (reparse-symbol indented_block_body) [10105 10109]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9827 9831])
                            ("message" variable nil (reparse-symbol function_parameters) [9833 9840])
                            ("category" variable nil (reparse-symbol function_parameters) [9842 9850])
                            ("filename" variable nil (reparse-symbol function_parameters) [9852 9860])
                            ("lineno" variable nil (reparse-symbol function_parameters) [9862 9868])
                            ("file" variable nil (reparse-symbol function_parameters) [9870 9874])
                            ("line" variable nil (reparse-symbol function_parameters) [9901 9905]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9814 10110])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10127 10131]))                          )
                        (reparse-symbol indented_block_body) [10115 10358]))                  
                :type "class")
                nil [9609 10358])
            ("catch_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        \"\"\"" code nil (reparse-symbol indented_block_body) [11117 11357])
                            ("self" variable nil (reparse-symbol indented_block_body) [11366 11387])
                            ("module" code nil (reparse-symbol indented_block_body) [11458 11464])
                            ("self" variable nil (reparse-symbol indented_block_body) [11473 11494]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11075 11079])
                            ("record" variable nil (reparse-symbol function_parameters) [11081 11087])
                            ("module" variable nil (reparse-symbol function_parameters) [11095 11101]))                          
                        :documentation "Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11062 11495])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11513 11517]))                          )
                        (reparse-symbol indented_block_body) [11500 11795])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11814 11818]))                          )
                        (reparse-symbol indented_block_body) [11800 12349])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12367 12371])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [12373 12382]))                          )
                        (reparse-symbol indented_block_body) [12354 12592]))                  
                :type "class")
                nil [10360 12592])
            ("_warnings_defaults" variable nil nil [13044 13070])
            ("try" code nil nil [13071 13379])
            ("_processoptions" code nil nil [13405 13437])
            ("if" code nil nil [13438 14022])
            ("del" code nil nil [14022 14044]))          
      :file "warnings.py"
      :pointmax 14045
      :fsize 14044
      :lastmodtime '(21896 22713 0 0)
      :unmatched-syntax '((NAME 11396 . 11400) (IF 11435 . 11437) (ELSE 11453 . 11457) (NAME 10048 . 10052) (IF 10088 . 10090) (ELSE 10100 . 10104) (NAME 1367 . 1371) (IF 1410 . 1412) (ELSE 1426 . 1430)))
    (semanticdb-table "sre_constants.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("try" code nil nil [399 510])
            ("error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [617 621]))                  
                :type "class")
                nil [589 622])
            ("FAILURE" variable nil nil [636 655])
            ("SUCCESS" variable nil nil [656 675])
            ("ANY" variable nil nil [677 688])
            ("ANY_ALL" variable nil nil [689 708])
            ("ASSERT" variable nil nil [709 726])
            ("ASSERT_NOT" variable nil nil [727 752])
            ("AT" variable nil nil [753 762])
            ("BIGCHARSET" variable nil nil [763 788])
            ("BRANCH" variable nil nil [789 806])
            ("CALL" variable nil nil [807 820])
            ("CATEGORY" variable nil nil [821 842])
            ("CHARSET" variable nil nil [843 862])
            ("GROUPREF" variable nil nil [863 884])
            ("GROUPREF_IGNORE" variable nil nil [885 920])
            ("GROUPREF_EXISTS" variable nil nil [921 956])
            ("IN" variable nil nil [957 966])
            ("IN_IGNORE" variable nil nil [967 990])
            ("INFO" variable nil nil [991 1004])
            ("JUMP" variable nil nil [1005 1018])
            ("LITERAL" variable nil nil [1019 1038])
            ("LITERAL_IGNORE" variable nil nil [1039 1072])
            ("MARK" variable nil nil [1073 1086])
            ("MAX_REPEAT" variable nil nil [1087 1112])
            ("MAX_UNTIL" variable nil nil [1113 1136])
            ("MIN_REPEAT" variable nil nil [1137 1162])
            ("MIN_UNTIL" variable nil nil [1163 1186])
            ("NEGATE" variable nil nil [1187 1204])
            ("NOT_LITERAL" variable nil nil [1205 1232])
            ("NOT_LITERAL_IGNORE" variable nil nil [1233 1274])
            ("RANGE" variable nil nil [1275 1290])
            ("REPEAT" variable nil nil [1291 1308])
            ("REPEAT_ONE" variable nil nil [1309 1334])
            ("SUBPATTERN" variable nil nil [1335 1360])
            ("MIN_REPEAT_ONE" variable nil nil [1361 1394])
            ("AT_BEGINNING" variable nil nil [1408 1437])
            ("AT_BEGINNING_LINE" variable nil nil [1438 1477])
            ("AT_BEGINNING_STRING" variable nil nil [1478 1521])
            ("AT_BOUNDARY" variable nil nil [1522 1549])
            ("AT_NON_BOUNDARY" variable nil nil [1550 1585])
            ("AT_END" variable nil nil [1586 1603])
            ("AT_END_LINE" variable nil nil [1604 1631])
            ("AT_END_STRING" variable nil nil [1632 1663])
            ("AT_LOC_BOUNDARY" variable nil nil [1664 1699])
            ("AT_LOC_NON_BOUNDARY" variable nil nil [1700 1743])
            ("AT_UNI_BOUNDARY" variable nil nil [1744 1779])
            ("AT_UNI_NON_BOUNDARY" variable nil nil [1780 1823])
            ("CATEGORY_DIGIT" variable nil nil [1838 1871])
            ("CATEGORY_NOT_DIGIT" variable nil nil [1872 1913])
            ("CATEGORY_SPACE" variable nil nil [1914 1947])
            ("CATEGORY_NOT_SPACE" variable nil nil [1948 1989])
            ("CATEGORY_WORD" variable nil nil [1990 2021])
            ("CATEGORY_NOT_WORD" variable nil nil [2022 2061])
            ("CATEGORY_LINEBREAK" variable nil nil [2062 2103])
            ("CATEGORY_NOT_LINEBREAK" variable nil nil [2104 2153])
            ("CATEGORY_LOC_WORD" variable nil nil [2154 2193])
            ("CATEGORY_LOC_NOT_WORD" variable nil nil [2194 2241])
            ("CATEGORY_UNI_DIGIT" variable nil nil [2242 2283])
            ("CATEGORY_UNI_NOT_DIGIT" variable nil nil [2284 2333])
            ("CATEGORY_UNI_SPACE" variable nil nil [2334 2375])
            ("CATEGORY_UNI_NOT_SPACE" variable nil nil [2376 2425])
            ("CATEGORY_UNI_WORD" variable nil nil [2426 2465])
            ("CATEGORY_UNI_NOT_WORD" variable nil nil [2466 2513])
            ("CATEGORY_UNI_LINEBREAK" variable nil nil [2514 2563])
            ("CATEGORY_UNI_NOT_LINEBREAK" variable nil nil [2564 2621])
            ("OPCODES" variable nil nil [2623 3120])
            ("ATCODES" variable nil nil [3122 3346])
            ("CHCODES" variable nil nil [3348 3762])
            ("makedict" function (:arguments 
              ( ("list" variable nil (reparse-symbol function_parameters) [3777 3781]))              ) nil [3764 3878])
            ("OPCODES" variable nil nil [3879 3906])
            ("ATCODES" variable nil nil [3907 3934])
            ("CHCODES" variable nil nil [3935 3962])
            ("OP_IGNORE" variable nil nil [4012 4142])
            ("AT_MULTILINE" variable nil nil [4144 4223])
            ("AT_LOCALE" variable nil nil [4225 4315])
            ("AT_UNICODE" variable nil nil [4317 4408])
            ("CH_LOCALE" variable nil nil [4410 4764])
            ("CH_UNICODE" variable nil nil [4766 5145])
            ("SRE_FLAG_TEMPLATE" variable nil nil [5155 5176])
            ("SRE_FLAG_IGNORECASE" variable nil nil [5216 5239])
            ("SRE_FLAG_LOCALE" variable nil nil [5259 5278])
            ("SRE_FLAG_MULTILINE" variable nil nil [5302 5324])
            ("SRE_FLAG_DOTALL" variable nil nil [5360 5380])
            ("SRE_FLAG_UNICODE" variable nil nil [5415 5436])
            ("SRE_FLAG_VERBOSE" variable nil nil [5458 5479])
            ("SRE_FLAG_DEBUG" variable nil nil [5513 5533])
            ("SRE_INFO_PREFIX" variable nil nil [5574 5593])
            ("SRE_INFO_LITERAL" variable nil nil [5607 5627])
            ("SRE_INFO_CHARSET" variable nil nil [5674 5694])
            ("if" code nil nil [5743 7198]))          
      :file "sre_constants.py"
      :pointmax 7198
      :fsize 7197
      :lastmodtime '(21896 22713 0 0)
      :unmatched-syntax nil))
  :file "!usr!lib!python2.7!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
