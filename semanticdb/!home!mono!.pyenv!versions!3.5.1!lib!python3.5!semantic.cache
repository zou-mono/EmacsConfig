;; Object python3.5/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "python3.5/"
  :tables
  (list
    (semanticdb-table "os.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"OS routines for NT or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt or ce, e.g. unlink, stat, etc.
  - os.path is either posixpath or ntpath
  - os.name is either 'posix', 'nt' or 'ce'.
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')
  - os.extsep is the extension separator (always '.')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1129])
            ("errno" include nil nil [1135 1152])
            ("sys" include nil nil [1135 1152])
            ("stat" include nil nil [1153 1170])
            ("_names" variable nil nil [1172 1205])
            ("__all__" variable nil nil [1255 1501])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [1515 1519]))              ) nil [1503 1551])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1574 1580]))              ) nil [1552 1710])
            ("if" code nil nil [1823 3050])
            ("sys" variable nil nil [3051 3080])
            ("" code nil nil [3101 3169])
            ("del" code nil nil [3171 3181])
            ("if" code nil nil [3184 6406])
            ("SEEK_SET" variable nil nil [6598 6610])
            ("SEEK_CUR" variable nil nil [6611 6623])
            ("SEEK_END" variable nil nil [6624 6636])
            ("makedirs" function
               (:documentation "makedirs(name [, mode=0o777][, exist_ok=False])

    Super-mkdir; create a leaf directory and all intermediate ones.  Works like
    mkdir, except that any intermediate path segment (not just the rightmost)
    will be created if it does not exist. If the target directory already
    exists, raise an OSError if exist_ok is False. Otherwise no exception is
    raised.  This is recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [6742 6746])
                    ("mode" variable nil (reparse-symbol function_parameters) [6748 6752])
                    ("exist_ok" variable nil (reparse-symbol function_parameters) [6760 6768]))                  )
                nil [6729 7958])
            ("removedirs" function
               (:documentation "removedirs(name)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [7974 7978]))                  )
                nil [7959 8667])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [8680 8683])
                    ("new" variable nil (reparse-symbol function_parameters) [8685 8688]))                  )
                nil [8668 9537])
            ("__all__" code nil nil [9538 9591])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune the
    search, or to impose a specific order of visiting.  Modifying dirnames when
    topdown is false is ineffective, since the directories in dirnames have
    already been generated by the time dirnames itself is generated. No matter
    the value of topdown, the list of subdirectories is retrieved before the
    tuples for the directory and its subdirectories are generated.

    By default errors from the os.scandir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an OSError instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print(root, \"consumes\", end=\"\")
        print(sum([getsize(join(root, name)) for name in files]), end=\"\")
        print(\"bytes in\", len(files), \"non-directory files\")
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories

    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [9602 9605])
                    ("topdown" variable nil (reparse-symbol function_parameters) [9607 9614])
                    ("onerror" variable nil (reparse-symbol function_parameters) [9621 9628])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [9635 9646]))                  )
                nil [9593 15091])
            ("__all__" code nil nil [15092 15114])
            ("if" code nil nil [15116 19004])
            ("try" code nil nil [19045 19097])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [19108 19112])
                    ("args" variable nil (reparse-symbol function_parameters) [19114 19119]))                  )
                nil [19098 19267])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [19279 19283])
                    ("args" variable nil (reparse-symbol function_parameters) [19285 19290]))                  )
                nil [19268 19494])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [19506 19510])
                    ("args" variable nil (reparse-symbol function_parameters) [19512 19517]))                  )
                nil [19495 19703])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [19716 19720])
                    ("args" variable nil (reparse-symbol function_parameters) [19722 19727]))                  )
                nil [19704 19973])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [19985 19989])
                    ("args" variable nil (reparse-symbol function_parameters) [19991 19995]))                  )
                nil [19974 20226])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [20239 20243])
                    ("args" variable nil (reparse-symbol function_parameters) [20245 20249])
                    ("env" variable nil (reparse-symbol function_parameters) [20251 20254]))                  )
                nil [20227 20521])
            ("__all__" code nil nil [20522 20594])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [20609 20613])
                ("args" variable nil (reparse-symbol function_parameters) [20615 20619])
                ("env" variable nil (reparse-symbol function_parameters) [20621 20624]))              ) nil [20596 21561])
            ("get_exec_path" function
               (:documentation "Returns the sequence of directories that will be searched for the
    named executable (similar to a shell) when launching a process.

    *env* must be an environment variable dict or None.  If *env* is None,
    os.environ will be used.
    "
                :arguments 
                  ( ("env" variable nil (reparse-symbol function_parameters) [21581 21584]))                  )
                nil [21563 23034])
            ("_collections_abc" include nil nil [23109 23152])
            ("_Environ" type
               (:superclasses ("MutableMapping")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [23290 23316])
                            ("self" variable nil (reparse-symbol indented_block_body) [23325 23351])
                            ("self" variable nil (reparse-symbol indented_block_body) [23360 23390])
                            ("self" variable nil (reparse-symbol indented_block_body) [23399 23429])
                            ("self" variable nil (reparse-symbol indented_block_body) [23438 23458])
                            ("self" variable nil (reparse-symbol indented_block_body) [23467 23491])
                            ("self" variable nil (reparse-symbol indented_block_body) [23500 23517]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23203 23207])
                            ("data" variable nil (reparse-symbol function_parameters) [23209 23213])
                            ("encodekey" variable nil (reparse-symbol function_parameters) [23215 23224])
                            ("decodekey" variable nil (reparse-symbol function_parameters) [23226 23235])
                            ("encodevalue" variable nil (reparse-symbol function_parameters) [23237 23248])
                            ("decodevalue" variable nil (reparse-symbol function_parameters) [23250 23261])
                            ("putenv" variable nil (reparse-symbol function_parameters) [23263 23269])
                            ("unsetenv" variable nil (reparse-symbol function_parameters) [23271 23279]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23190 23518])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23539 23543])
                            ("key" variable nil (reparse-symbol function_parameters) [23545 23548]))                          )
                        (reparse-symbol indented_block_body) [23523 23779])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23800 23804])
                            ("key" variable nil (reparse-symbol function_parameters) [23806 23809])
                            ("value" variable nil (reparse-symbol function_parameters) [23811 23816]))                          )
                        (reparse-symbol indented_block_body) [23784 23957])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23978 23982])
                            ("key" variable nil (reparse-symbol function_parameters) [23984 23987]))                          )
                        (reparse-symbol indented_block_body) [23962 24241])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24259 24263]))                          )
                        (reparse-symbol indented_block_body) [24246 24335])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24352 24356]))                          )
                        (reparse-symbol indented_block_body) [24340 24390])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24408 24412]))                          )
                        (reparse-symbol indented_block_body) [24395 24597])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24611 24615]))                          )
                        (reparse-symbol indented_block_body) [24602 24644])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24664 24668])
                            ("key" variable nil (reparse-symbol function_parameters) [24670 24673])
                            ("value" variable nil (reparse-symbol function_parameters) [24675 24680]))                          )
                        (reparse-symbol indented_block_body) [24649 24766]))                  
                :type "class")
                nil [23154 24766])
            ("try" code nil nil [24767 24920])
            ("try" code nil nil [24921 25089])
            ("_createenviron" function nil nil [25090 26133])
            ("environ" variable nil nil [26152 26178])
            ("del" code nil nil [26179 26197])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default.
    key, default and the result are str."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [26211 26214])
                    ("default" variable nil (reparse-symbol function_parameters) [26216 26223]))                  )
                nil [26200 26448])
            ("supports_bytes_environ" variable nil nil [26449 26488])
            ("__all__" code nil nil [26489 26541])
            ("if" code nil nil [26543 27223])
            ("_fscodec" function nil nil [27224 28516])
            ("fsencode, fsdecode" code nil nil [28517 28548])
            ("del" code nil nil [28549 28561])
            ("if" code nil nil [28606 31635])
            ("if" code nil nil [31637 32612])
            ("if" code nil nil [32614 33696])
            ("popen" function (:arguments 
              ( ("cmd" variable nil (reparse-symbol function_parameters) [33728 33731])
                ("mode" variable nil (reparse-symbol function_parameters) [33733 33737])
                ("buffering" variable nil (reparse-symbol function_parameters) [33743 33752]))              ) nil [33718 34625])
            ("_wrap_close" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [34768 34789])
                            ("self" variable nil (reparse-symbol indented_block_body) [34798 34815]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34739 34743])
                            ("stream" variable nil (reparse-symbol function_parameters) [34745 34751])
                            ("proc" variable nil (reparse-symbol function_parameters) [34753 34757]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34726 34816])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34830 34834]))                          )
                        (reparse-symbol indented_block_body) [34820 35097])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35115 35119]))                          )
                        (reparse-symbol indented_block_body) [35101 35142])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35159 35163])
                            ("args" variable nil (reparse-symbol function_parameters) [35165 35170]))                          )
                        (reparse-symbol indented_block_body) [35146 35194])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35214 35218])
                            ("name" variable nil (reparse-symbol function_parameters) [35220 35224]))                          )
                        (reparse-symbol indented_block_body) [35198 35270])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35287 35291]))                          )
                        (reparse-symbol indented_block_body) [35274 35328]))                  
                :type "class")
                nil [34703 35328])
            ("fdopen" function (:arguments 
              ( ("fd" variable nil (reparse-symbol function_parameters) [35361 35363])
                ("args" variable nil (reparse-symbol function_parameters) [35365 35370])
                ("kwargs" variable nil (reparse-symbol function_parameters) [35372 35380]))              ) nil [35350 35546]))          
      :file "os.py"
      :pointmax 35546
      :fsize 35545
      :lastmodtime '(22333 27206 338105 881000)
      :unmatched-syntax '((RAISE 24211 . 24216) (FROM 24231 . 24235) (NEWLINE 24240 . 24241) (RAISE 23710 . 23715) (FROM 23730 . 23734) (NEWLINE 23739 . 23740) (INDENT_BLOCK 21227 . 21456) (NEWLINE 21226 . 21227) (COLON 21225 . 21226) (TRY 21151 . 21154) (AS 21221 . 21223) (INDENT_BLOCK 18520 . 18616) (NEWLINE 18519 . 18520) (COLON 18518 . 18519) (TRY 18337 . 18340) (AS 18512 . 18514) (MULT 15239 . 15240) (COMMA 15240 . 15241) (INDENT_BLOCK 13221 . 13307) (NEWLINE 13220 . 13221) (COLON 13219 . 13220) (TRY 13069 . 13072) (AS 13211 . 13213) (INDENT_BLOCK 12970 . 13044) (NEWLINE 12969 . 12970) (COLON 12968 . 12969) (TRY 12814 . 12817) (AS 12960 . 12962)))
    (semanticdb-table "pdb.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
The Python Debugger Pdb
=======================

To use the debugger in its simplest form:

        >>> import pdb
        >>> pdb.run('<a statement>')

The debugger's prompt is '(Pdb) '.  This will stop in the first
function call in <a statement>.

Alternatively, if a statement terminated with an unhandled exception,
you can use pdb's post-mortem facility to inspect the contents of the
traceback:

        >>> <a statement>
        <exception traceback>
        >>> import pdb
        >>> pdb.pm()

The commands recognized by the debugger are listed in the next
section.  Most can be abbreviated as indicated; e.g., h(elp) means
that 'help' can be typed as 'h' or 'help' (but not as 'he' or 'hel',
nor as 'H' or 'Help' or 'HELP').  Optional arguments are enclosed in
square brackets.  Alternatives in the command syntax are separated
by a vertical bar (|).

A blank line repeats the previous command literally, except for
'list', where it lists the next 11 lines.

Commands that the debugger doesn't recognize are assumed to be Python
statements and are executed in the context of the program being
debugged.  Python statements can also be prefixed with an exclamation
point ('!').  This is a powerful way to inspect the program being
debugged; it is even possible to change variables or call functions.
When an exception occurs in such a statement, the exception name is
printed but the debugger's state is not changed.

The debugger supports aliases, which can save typing.  And aliases can
have parameters (see the alias help entry) which allows one a certain
level of adaptability to the context under examination.

Multiple commands may be entered on a single line, separated by the
pair ';;'.  No intelligence is applied to separating the commands; the
input is split at the first ';;', even if it is in the middle of a
quoted string.

If a file \".pdbrc\" exists in your home directory or in the current
directory, it is read in and executed as if it had been typed at the
debugger prompt.  This is particularly useful for aliases.  If both
files exist, the one in the home directory is read first and aliases
defined there can be overriden by the local file.

Aside from aliases, the debugger is not directly programmable; but it
is implemented as a class from which you can derive your own debugger
class, which you can make as fancy as you like.


Debugger commands
=================

\"\"\"" code nil nil [26 2430])
            ("os" include nil nil [2581 2590])
            ("re" include nil nil [2591 2600])
            ("sys" include nil nil [2601 2611])
            ("cmd" include nil nil [2612 2622])
            ("bdb" include nil nil [2623 2633])
            ("dis" include nil nil [2634 2644])
            ("code" include nil nil [2645 2656])
            ("glob" include nil nil [2657 2668])
            ("pprint" include nil nil [2669 2682])
            ("signal" include nil nil [2683 2696])
            ("inspect" include nil nil [2697 2711])
            ("traceback" include nil nil [2712 2728])
            ("linecache" include nil nil [2729 2745])
            ("Restart" type
               (:documentation "Causes a debugger to be restarted for the debugged python program."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2855 2859]))                  
                :type "class")
                nil [2748 2860])
            ("__all__" variable nil nil [2861 2970])
            ("find_function" function (:arguments 
              ( ("funcname" variable nil (reparse-symbol function_parameters) [2990 2998])
                ("filename" variable nil (reparse-symbol function_parameters) [3000 3008]))              ) nil [2972 3372])
            ("getsourcelines" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [3392 3395]))              ) nil [3373 3709])
            ("lasti2lineno" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [3727 3731])
                ("lasti" variable nil (reparse-symbol function_parameters) [3733 3738]))              ) nil [3710 3909])
            ("_rstr" type
               (:documentation "String that doesn't quote its repr."
                :superclasses ("str")
                :members 
                  ( ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3992 3996]))                          )
                        (reparse-symbol indented_block_body) [3979 4019]))                  
                :type "class")
                nil [3911 4019])
            ("line_prefix" variable nil nil [4328 4349])
            ("Pdb" type
               (:superclasses ("bdb.Bdb" "cmd.Cmd")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("bdb" code nil (reparse-symbol indented_block_body) [4531 4564])
                            ("cmd" code nil (reparse-symbol indented_block_body) [4573 4623])
                            ("if" code nil (reparse-symbol indented_block_body) [4632 4677])
                            ("self" variable nil (reparse-symbol indented_block_body) [4685 4707])
                            ("self" variable nil (reparse-symbol indented_block_body) [4716 4733])
                            ("self" variable nil (reparse-symbol indented_block_body) [4742 4762])
                            ("self" variable nil (reparse-symbol indented_block_body) [4771 4791])
                            ("self" variable nil (reparse-symbol indented_block_body) [4800 4833])
                            ("self" variable nil (reparse-symbol indented_block_body) [4842 4861])
                            ("try" code nil (reparse-symbol indented_block_body) [4914 5125])
                            ("self" variable nil (reparse-symbol indented_block_body) [5133 5158])
                            ("self" variable nil (reparse-symbol indented_block_body) [5167 5191])
                            ("self" variable nil (reparse-symbol indented_block_body) [5242 5259])
                            ("if" code nil (reparse-symbol indented_block_body) [5268 5518])
                            ("try" code nil (reparse-symbol indented_block_body) [5526 5659])
                            ("self" variable nil (reparse-symbol indented_block_body) [5668 5686])
                            ("self" variable nil (reparse-symbol indented_block_body) [5745 5772])
                            ("self" variable nil (reparse-symbol indented_block_body) [5899 5924])
                            ("self" variable nil (reparse-symbol indented_block_body) [6054 6084])
                            ("self" variable nil (reparse-symbol indented_block_body) [6189 6214]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4428 4432])
                            ("completekey" variable nil (reparse-symbol function_parameters) [4434 4445])
                            ("stdin" variable nil (reparse-symbol function_parameters) [4453 4458])
                            ("stdout" variable nil (reparse-symbol function_parameters) [4465 4471])
                            ("skip" variable nil (reparse-symbol function_parameters) [4478 4482])
                            ("nosigint" variable nil (reparse-symbol function_parameters) [4506 4514]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4415 6256])
                    ("sigint_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6332 6336])
                            ("signum" variable nil (reparse-symbol function_parameters) [6338 6344])
                            ("frame" variable nil (reparse-symbol function_parameters) [6346 6351]))                          )
                        (reparse-symbol indented_block_body) [6313 6655])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6670 6674]))                          )
                        (reparse-symbol indented_block_body) [6660 6727])
                    ("forget" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6743 6747]))                          )
                        (reparse-symbol indented_block_body) [6732 6887])
                    ("setup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6902 6906])
                            ("f" variable nil (reparse-symbol function_parameters) [6908 6909])
                            ("tb" variable nil (reparse-symbol function_parameters) [6911 6913]))                          )
                        (reparse-symbol indented_block_body) [6892 7740])
                    ("execRcLines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7815 7819]))                          )
                        (reparse-symbol indented_block_body) [7799 8458])
                    ("user_call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8505 8509])
                            ("frame" variable nil (reparse-symbol function_parameters) [8511 8516])
                            ("argument_list" variable nil (reparse-symbol function_parameters) [8518 8531]))                          
                        :documentation "This method is called when there is the remote possibility
        that we ever need to stop in this function.")
                        (reparse-symbol indented_block_body) [8491 8829])
                    ("user_line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8848 8852])
                            ("frame" variable nil (reparse-symbol function_parameters) [8854 8859]))                          
                        :documentation "This function is called when we stop or break at this line.")
                        (reparse-symbol indented_block_body) [8834 9236])
                    ("bp_commands" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9257 9261])
                            ("frame" variable nil (reparse-symbol function_parameters) [9263 9268]))                          
                        :documentation "Call every command that was set for the current active breakpoint
        (if there is one).

        Returns True if the normal interaction function must be called,
        False otherwise.")
                        (reparse-symbol indented_block_body) [9241 10188])
                    ("user_return" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10209 10213])
                            ("frame" variable nil (reparse-symbol function_parameters) [10215 10220])
                            ("return_value" variable nil (reparse-symbol function_parameters) [10222 10234]))                          
                        :documentation "This function is called when a return trap is set here.")
                        (reparse-symbol indented_block_body) [10193 10489])
                    ("user_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10513 10517])
                            ("frame" variable nil (reparse-symbol function_parameters) [10519 10524])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [10526 10534]))                          
                        :documentation "This function is called if an exception occurs,
        but only if we are to stop at or just below this level.")
                        (reparse-symbol indented_block_body) [10494 11506])
                    ("_cmdloop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11559 11563]))                          )
                        (reparse-symbol indented_block_body) [11546 11979])
                    ("preloop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12050 12054]))                          )
                        (reparse-symbol indented_block_body) [12038 12690])
                    ("interaction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12711 12715])
                            ("frame" variable nil (reparse-symbol function_parameters) [12717 12722])
                            ("traceback" variable nil (reparse-symbol function_parameters) [12724 12733]))                          )
                        (reparse-symbol indented_block_body) [12695 13045])
                    ("displayhook" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13066 13070])
                            ("obj" variable nil (reparse-symbol function_parameters) [13072 13075]))                          
                        :documentation "Custom displayhook for the exec in default(), which prevents
        assignment of the _ variable in the builtins.
        ")
                        (reparse-symbol indented_block_body) [13050 13360])
                    ("default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13377 13381])
                            ("line" variable nil (reparse-symbol function_parameters) [13383 13387]))                          )
                        (reparse-symbol indented_block_body) [13365 14188])
                    ("precmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14204 14208])
                            ("line" variable nil (reparse-symbol function_parameters) [14210 14214]))                          
                        :documentation "Handle alias expansion and ';;' separator.")
                        (reparse-symbol indented_block_body) [14193 15089])
                    ("onecmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15105 15109])
                            ("line" variable nil (reparse-symbol function_parameters) [15111 15115]))                          
                        :documentation "Interpret the argument as though it had been typed in response
        to the prompt.

        Checks whether this line is typed at the normal prompt or in
        a breakpoint command list definition.
        ")
                        (reparse-symbol indented_block_body) [15094 15491])
                    ("handle_command_def" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15519 15523])
                            ("line" variable nil (reparse-symbol function_parameters) [15525 15529]))                          
                        :documentation "Handles one command line during command list definition.")
                        (reparse-symbol indented_block_body) [15496 16476])
                    ("message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16532 16536])
                            ("msg" variable nil (reparse-symbol function_parameters) [16538 16541]))                          )
                        (reparse-symbol indented_block_body) [16520 16581])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16596 16600])
                            ("msg" variable nil (reparse-symbol function_parameters) [16602 16605]))                          )
                        (reparse-symbol indented_block_body) [16586 16652])
                    ("_complete_location" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16805 16809])
                            ("text" variable nil (reparse-symbol function_parameters) [16811 16815])
                            ("line" variable nil (reparse-symbol function_parameters) [16817 16821])
                            ("begidx" variable nil (reparse-symbol function_parameters) [16823 16829])
                            ("endidx" variable nil (reparse-symbol function_parameters) [16831 16837]))                          )
                        (reparse-symbol indented_block_body) [16782 17582])
                    ("_complete_bpnumber" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17610 17614])
                            ("text" variable nil (reparse-symbol function_parameters) [17616 17620])
                            ("line" variable nil (reparse-symbol function_parameters) [17622 17626])
                            ("begidx" variable nil (reparse-symbol function_parameters) [17628 17634])
                            ("endidx" variable nil (reparse-symbol function_parameters) [17636 17642]))                          )
                        (reparse-symbol indented_block_body) [17587 17972])
                    ("_complete_expression" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18002 18006])
                            ("text" variable nil (reparse-symbol function_parameters) [18008 18012])
                            ("line" variable nil (reparse-symbol function_parameters) [18014 18018])
                            ("begidx" variable nil (reparse-symbol function_parameters) [18020 18026])
                            ("endidx" variable nil (reparse-symbol function_parameters) [18028 18034]))                          )
                        (reparse-symbol indented_block_body) [17977 19135])
                    ("do_commands" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19315 19319])
                            ("arg" variable nil (reparse-symbol function_parameters) [19321 19324]))                          
                        :documentation "commands [bpnumber]
        (com) ...
        (com) end
        (Pdb)

        Specify a list of commands for breakpoint number bpnumber.
        The commands themselves are entered on the following lines.
        Type a line containing just 'end' to terminate the commands.
        The commands are executed when the breakpoint is hit.

        To remove all commands from a breakpoint, type commands and
        follow it immediately with end; that is, give no commands.

        With no bpnumber argument, commands refers to the last
        breakpoint set.

        You can use breakpoint commands to start your program up
        again.  Simply use the continue command, or step, or any other
        command that resumes execution.

        Specifying any command resuming execution (currently continue,
        step, next, return, jump, quit and their abbreviations)
        terminates the command list (as if that command was
        immediately followed by end).  This is because any time you
        resume execution (even with a simple next or step), you may
        encounter another breakpoint -- which could have its own
        command list, leading to ambiguities about which list to
        execute.

        If you use the 'silent' command in the command list, the usual
        message about stopping at a breakpoint is not printed.  This
        may be desirable for breakpoints that are to print a specific
        message and then continue.  If none of the other commands
        print anything, you will see no sign that the breakpoint was
        reached.
        ")
                        (reparse-symbol indented_block_body) [19299 22439])
                    ("complete_commands" variable nil (reparse-symbol indented_block_body) [22444 22482])
                    ("do_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22501 22505])
                            ("arg" variable nil (reparse-symbol function_parameters) [22507 22510])
                            ("temporary" variable nil (reparse-symbol function_parameters) [22512 22521]))                          
                        :documentation "b(reak) [ ([filename:]lineno | function) [, condition] ]
        Without argument, list all breaks.

        With a line number argument, set a break at this line in the
        current file.  With a function name, set a break at the first
        executable line of that function.  If a second argument is
        present, it is a string specifying an expression which must
        evaluate to true before the breakpoint is honored.

        The line number may be prefixed with a filename and a colon,
        to specify a breakpoint in another file (probably one that
        hasn't been loaded yet).  The file is searched for on
        sys.path; the .py suffix may be omitted.
        ")
                        (reparse-symbol indented_block_body) [22488 26232])
                    ("defaultFile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26297 26301]))                          
                        :documentation "Produce a reasonable default.")
                        (reparse-symbol indented_block_body) [26281 26518])
                    ("do_b" variable nil (reparse-symbol indented_block_body) [26523 26538])
                    ("complete_break" variable nil (reparse-symbol indented_block_body) [26544 26579])
                    ("complete_b" variable nil (reparse-symbol indented_block_body) [26584 26615])
                    ("do_tbreak" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26635 26639])
                            ("arg" variable nil (reparse-symbol function_parameters) [26641 26644]))                          
                        :documentation "tbreak [ ([filename:]lineno | function) [, condition] ]
        Same arguments as break, but sets a temporary breakpoint: it
        is automatically deleted when first hit.
        ")
                        (reparse-symbol indented_block_body) [26621 26874])
                    ("complete_tbreak" variable nil (reparse-symbol indented_block_body) [26879 26915])
                    ("lineinfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26934 26938])
                            ("identifier" variable nil (reparse-symbol function_parameters) [26940 26950]))                          )
                        (reparse-symbol indented_block_body) [26921 27976])
                    ("checkline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27995 27999])
                            ("filename" variable nil (reparse-symbol function_parameters) [28001 28009])
                            ("lineno" variable nil (reparse-symbol function_parameters) [28011 28017]))                          
                        :documentation "Check whether specified line seems to be executable.

        Return `lineno` if it is, 0 if not (e.g. a docstring, comment, blank
        line or EOF). Warning: testing is not comprehensive.
        ")
                        (reparse-symbol indented_block_body) [27981 28859])
                    ("do_enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28878 28882])
                            ("arg" variable nil (reparse-symbol function_parameters) [28884 28887]))                          
                        :documentation "enable bpnumber [bpnumber ...]
        Enables the breakpoints given as a space separated list of
        breakpoint numbers.
        ")
                        (reparse-symbol indented_block_body) [28864 29314])
                    ("complete_enable" variable nil (reparse-symbol indented_block_body) [29319 29355])
                    ("do_disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29376 29380])
                            ("arg" variable nil (reparse-symbol function_parameters) [29382 29385]))                          
                        :documentation "disable bpnumber [bpnumber ...]
        Disables the breakpoints given as a space separated list of
        breakpoint numbers.  Disabling a breakpoint means it cannot
        cause the program to stop execution, but unlike clearing a
        breakpoint, it remains in the list of breakpoints and can be
        (re-)enabled.
        ")
                        (reparse-symbol indented_block_body) [29361 30014])
                    ("complete_disable" variable nil (reparse-symbol indented_block_body) [30019 30056])
                    ("do_condition" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30079 30083])
                            ("arg" variable nil (reparse-symbol function_parameters) [30085 30088]))                          
                        :documentation "condition bpnumber [condition]
        Set a new condition for the breakpoint, an expression which
        must evaluate to true before the breakpoint is honored.  If
        condition is absent, any existing condition is removed; i.e.,
        the breakpoint is made unconditional.
        ")
                        (reparse-symbol indented_block_body) [30062 30975])
                    ("complete_condition" variable nil (reparse-symbol indented_block_body) [30980 31019])
                    ("do_ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31039 31043])
                            ("arg" variable nil (reparse-symbol function_parameters) [31045 31048]))                          
                        :documentation "ignore bpnumber [count]
        Set the ignore count for the given breakpoint number.  If
        count is omitted, the ignore count is set to 0.  A breakpoint
        becomes active when the ignore count is zero.  When non-zero,
        the count is decremented each time the breakpoint is reached
        and the breakpoint is not disabled and any associated
        condition evaluates to true.
        ")
                        (reparse-symbol indented_block_body) [31025 32280])
                    ("complete_ignore" variable nil (reparse-symbol indented_block_body) [32285 32321])
                    ("do_clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32340 32344])
                            ("arg" variable nil (reparse-symbol function_parameters) [32346 32349]))                          
                        :documentation "cl(ear) filename:lineno\\ncl(ear) [bpnumber [bpnumber...]]
        With a space separated list of breakpoint numbers, clear
        those breakpoints.  Without argument, clear all breaks (but
        first ask confirmation).  With a filename:lineno argument,
        clear all breaks at that line in that file.
        ")
                        (reparse-symbol indented_block_body) [32327 34050])
                    ("do_cl" variable nil (reparse-symbol indented_block_body) [34054 34070])
                    ("complete_clear" variable nil (reparse-symbol indented_block_body) [34124 34159])
                    ("complete_cl" variable nil (reparse-symbol indented_block_body) [34164 34196])
                    ("do_where" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34215 34219])
                            ("arg" variable nil (reparse-symbol function_parameters) [34221 34224]))                          
                        :documentation "w(here)
        Print a stack trace, with the most recent frame at the bottom.
        An arrow indicates the \"current frame\", which determines the
        context of most commands.  'bt' is an alias for this command.
        ")
                        (reparse-symbol indented_block_body) [34202 34501])
                    ("do_w" variable nil (reparse-symbol indented_block_body) [34505 34520])
                    ("do_bt" variable nil (reparse-symbol indented_block_body) [34525 34541])
                    ("_select_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34565 34569])
                            ("number" variable nil (reparse-symbol function_parameters) [34571 34577]))                          )
                        (reparse-symbol indented_block_body) [34547 34848])
                    ("do_up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34863 34867])
                            ("arg" variable nil (reparse-symbol function_parameters) [34869 34872]))                          
                        :documentation "u(p) [count]
        Move the current frame count (default one) levels up in the
        stack trace (to an older frame).
        ")
                        (reparse-symbol indented_block_body) [34853 35410])
                    ("do_u" variable nil (reparse-symbol indented_block_body) [35414 35426])
                    ("do_down" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35444 35448])
                            ("arg" variable nil (reparse-symbol function_parameters) [35450 35453]))                          
                        :documentation "d(own) [count]
        Move the current frame count (default one) levels down in the
        stack trace (to a newer frame).
        ")
                        (reparse-symbol indented_block_body) [35432 36048])
                    ("do_d" variable nil (reparse-symbol indented_block_body) [36052 36066])
                    ("do_until" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36085 36089])
                            ("arg" variable nil (reparse-symbol function_parameters) [36091 36094]))                          
                        :documentation "unt(il) [lineno]
        Without argument, continue execution until the line with a
        number greater than the current one is reached.  With a line
        number, continue execution until a line with a number greater
        or equal to that is reached.  In both cases, also stop when
        the current frame returns.
        ")
                        (reparse-symbol indented_block_body) [36072 36916])
                    ("do_unt" variable nil (reparse-symbol indented_block_body) [36920 36937])
                    ("do_step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36955 36959])
                            ("arg" variable nil (reparse-symbol function_parameters) [36961 36964]))                          
                        :documentation "s(tep)
        Execute the current line, stop at the first possible occasion
        (either in a function that is called or in the current
        function).
        ")
                        (reparse-symbol indented_block_body) [36943 37190])
                    ("do_s" variable nil (reparse-symbol indented_block_body) [37194 37208])
                    ("do_next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37226 37230])
                            ("arg" variable nil (reparse-symbol function_parameters) [37232 37235]))                          
                        :documentation "n(ext)
        Continue execution until the next line in the current function
        is reached or it returns.
        ")
                        (reparse-symbol indented_block_body) [37214 37427])
                    ("do_n" variable nil (reparse-symbol indented_block_body) [37431 37445])
                    ("do_run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37462 37466])
                            ("arg" variable nil (reparse-symbol function_parameters) [37468 37471]))                          
                        :documentation "run [args...]
        Restart the debugged python program. If a string is supplied
        it is split with \"shlex\", and the result is used as the new
        sys.argv.  History, breakpoints, actions and debugger options
        are preserved.  \"restart\" is an alias for \"run\".
        ")
                        (reparse-symbol indented_block_body) [37451 37996])
                    ("do_restart" variable nil (reparse-symbol indented_block_body) [38001 38020])
                    ("do_return" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38040 38044])
                            ("arg" variable nil (reparse-symbol function_parameters) [38046 38049]))                          
                        :documentation "r(eturn)
        Continue execution until the current function returns.
        ")
                        (reparse-symbol indented_block_body) [38026 38203])
                    ("do_r" variable nil (reparse-symbol indented_block_body) [38207 38223])
                    ("do_continue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38245 38249])
                            ("arg" variable nil (reparse-symbol function_parameters) [38251 38254]))                          
                        :documentation "c(ont(inue))
        Continue execution, only stop when a breakpoint is encountered.
        ")
                        (reparse-symbol indented_block_body) [38229 38873])
                    ("do_c" variable nil (reparse-symbol indented_block_body) [38877 38905])
                    ("do_jump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38923 38927])
                            ("arg" variable nil (reparse-symbol function_parameters) [38929 38932]))                          
                        :documentation "j(ump) lineno
        Set the next line that will be executed.  Only available in
        the bottom-most frame.  This lets you jump back and execute
        code again, or jump forward to skip code that you don't want
        to run.

        It should be noted that not all jumps are allowed -- for
        instance it is not possible to jump into the middle of a
        for loop or out of a finally clause.
        ")
                        (reparse-symbol indented_block_body) [38911 40054])
                    ("do_j" variable nil (reparse-symbol indented_block_body) [40058 40072])
                    ("do_debug" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40091 40095])
                            ("arg" variable nil (reparse-symbol function_parameters) [40097 40100]))                          
                        :documentation "debug code
        Enter a recursive debugger that steps through the code
        argument (which is an arbitrary expression or statement to be
        executed in the current environment).
        ")
                        (reparse-symbol indented_block_body) [40078 40765])
                    ("complete_debug" variable nil (reparse-symbol indented_block_body) [40770 40807])
                    ("do_quit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40825 40829])
                            ("arg" variable nil (reparse-symbol function_parameters) [40831 40834]))                          
                        :documentation "q(uit)\\nexit
        Quit from the debugger. The program being executed is aborted.
        ")
                        (reparse-symbol indented_block_body) [40813 41026])
                    ("do_q" variable nil (reparse-symbol indented_block_body) [41031 41045])
                    ("do_exit" variable nil (reparse-symbol indented_block_body) [41050 41067])
                    ("do_EOF" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41084 41088])
                            ("arg" variable nil (reparse-symbol function_parameters) [41090 41093]))                          
                        :documentation "EOF
        Handles the receipt of EOF as a command.
        ")
                        (reparse-symbol indented_block_body) [41073 41279])
                    ("do_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41296 41300])
                            ("arg" variable nil (reparse-symbol function_parameters) [41302 41305]))                          
                        :documentation "a(rgs)
        Print the argument list of the current function.
        ")
                        (reparse-symbol indented_block_body) [41284 41801])
                    ("do_a" variable nil (reparse-symbol indented_block_body) [41805 41819])
                    ("do_retval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41839 41843])
                            ("arg" variable nil (reparse-symbol function_parameters) [41845 41848]))                          
                        :documentation "retval
        Print the return value for the last return of a function.
        ")
                        (reparse-symbol indented_block_body) [41825 42121])
                    ("do_rv" variable nil (reparse-symbol indented_block_body) [42125 42142])
                    ("_getval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42160 42164])
                            ("arg" variable nil (reparse-symbol function_parameters) [42166 42169]))                          )
                        (reparse-symbol indented_block_body) [42148 42416])
                    ("_getval_except" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42440 42444])
                            ("arg" variable nil (reparse-symbol function_parameters) [42446 42449])
                            ("frame" variable nil (reparse-symbol function_parameters) [42451 42456]))                          )
                        (reparse-symbol indented_block_body) [42421 42852])
                    ("do_p" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42866 42870])
                            ("arg" variable nil (reparse-symbol function_parameters) [42872 42875]))                          
                        :documentation "p expression
        Print the value of the expression.
        ")
                        (reparse-symbol indented_block_body) [42857 43053])
                    ("do_pp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43068 43072])
                            ("arg" variable nil (reparse-symbol function_parameters) [43074 43077]))                          
                        :documentation "pp expression
        Pretty-print the value of the expression.
        ")
                        (reparse-symbol indented_block_body) [43058 43273])
                    ("complete_print" variable nil (reparse-symbol indented_block_body) [43278 43315])
                    ("complete_p" variable nil (reparse-symbol indented_block_body) [43320 43353])
                    ("complete_pp" variable nil (reparse-symbol indented_block_body) [43358 43392])
                    ("do_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43410 43414])
                            ("arg" variable nil (reparse-symbol function_parameters) [43416 43419]))                          
                        :documentation "l(ist) [first [,last] | .]

        List source code for the current file.  Without arguments,
        list 11 lines around the current line or continue the previous
        listing.  With . as argument, list 11 lines around the current
        line.  With one argument, list 11 lines starting at that line.
        With two arguments, list the given range; if the second
        argument is less than the first, it is a count.

        The current line in the current frame is indicated by \"->\".
        If an exception is being debugged, the line where the
        exception was originally raised or propagated is indicated by
        \">>\", if it differs from the current line.
        ")
                        (reparse-symbol indented_block_body) [43398 45430])
                    ("do_l" variable nil (reparse-symbol indented_block_body) [45434 45448])
                    ("do_longlist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45470 45474])
                            ("arg" variable nil (reparse-symbol function_parameters) [45476 45479]))                          
                        :documentation "longlist | ll
        List the whole source code for the current function or frame.
        ")
                        (reparse-symbol indented_block_body) [45454 45908])
                    ("do_ll" variable nil (reparse-symbol indented_block_body) [45912 45931])
                    ("do_source" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45951 45955])
                            ("arg" variable nil (reparse-symbol function_parameters) [45957 45960]))                          
                        :documentation "source expression
        Try to get source code for the given object and display it.
        ")
                        (reparse-symbol indented_block_body) [45937 46349])
                    ("complete_source" variable nil (reparse-symbol indented_block_body) [46354 46392])
                    ("_print_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46415 46419])
                            ("lines" variable nil (reparse-symbol function_parameters) [46421 46426])
                            ("start" variable nil (reparse-symbol function_parameters) [46428 46433])
                            ("breaks" variable nil (reparse-symbol function_parameters) [46435 46441])
                            ("frame" variable nil (reparse-symbol function_parameters) [46446 46451]))                          
                        :documentation "Print a range of lines.")
                        (reparse-symbol indented_block_body) [46398 47099])
                    ("do_whatis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47118 47122])
                            ("arg" variable nil (reparse-symbol function_parameters) [47124 47127]))                          
                        :documentation "whatis arg
        Print the type of the argument.
        ")
                        (reparse-symbol indented_block_body) [47104 48019])
                    ("complete_whatis" variable nil (reparse-symbol indented_block_body) [48024 48062])
                    ("do_display" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48083 48087])
                            ("arg" variable nil (reparse-symbol function_parameters) [48089 48092]))                          
                        :documentation "display [expression]

        Display the value of the expression if it changed, each time execution
        stops in the current frame.

        Without expression, list all display expressions for the current frame.
        ")
                        (reparse-symbol indented_block_body) [48068 48706])
                    ("complete_display" variable nil (reparse-symbol indented_block_body) [48711 48750])
                    ("do_undisplay" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48773 48777])
                            ("arg" variable nil (reparse-symbol function_parameters) [48779 48782]))                          
                        :documentation "undisplay [expression]

        Do not display the expression any more in the current frame.

        Without expression, clear all display expressions for the current frame.
        ")
                        (reparse-symbol indented_block_body) [48756 49230])
                    ("complete_undisplay" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49258 49262])
                            ("text" variable nil (reparse-symbol function_parameters) [49264 49268])
                            ("line" variable nil (reparse-symbol function_parameters) [49270 49274])
                            ("begidx" variable nil (reparse-symbol function_parameters) [49276 49282])
                            ("endidx" variable nil (reparse-symbol function_parameters) [49284 49290]))                          )
                        (reparse-symbol indented_block_body) [49235 49398])
                    ("do_interact" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49419 49423])
                            ("arg" variable nil (reparse-symbol function_parameters) [49425 49428]))                          
                        :documentation "interact

        Start an interactive interpreter whose global namespace
        contains all the (global and local) names found in the current scope.
        ")
                        (reparse-symbol indented_block_body) [49403 49739])
                    ("do_alias" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49757 49761])
                            ("arg" variable nil (reparse-symbol function_parameters) [49763 49766]))                          
                        :documentation "alias [name [command [parameter parameter ...] ]]
        Create an alias called 'name' that executes 'command'.  The
        command must *not* be enclosed in quotes.  Replaceable
        parameters can be indicated by %1, %2, and so on, while %* is
        replaced by all the parameters.  If no command is given, the
        current alias for name is shown. If no name is given, all
        aliases are listed.

        Aliases may be nested and can contain anything that can be
        legally typed at the pdb prompt.  Note!  You *can* override
        internal pdb commands with aliases!  Those internal commands
        are then hidden until the alias is removed.  Aliasing is
        recursively applied to the first word of the command line; all
        other words in the line are left alone.

        As an example, here are two useful aliases (especially when
        placed in the .pdbrc file):

        # Print instance variables (usage \"pi classInst\")
        alias pi for k in %1.__dict__.keys(): print(\"%1.\",k,\"=\",%1.__dict__[k])
        # Print instance variables in self
        alias ps pi self
        ")
                        (reparse-symbol indented_block_body) [49744 51324])
                    ("do_unalias" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51344 51348])
                            ("arg" variable nil (reparse-symbol function_parameters) [51350 51353]))                          
                        :documentation "unalias name
        Delete the specified alias.
        ")
                        (reparse-symbol indented_block_body) [51329 51563])
                    ("complete_unalias" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51589 51593])
                            ("text" variable nil (reparse-symbol function_parameters) [51595 51599])
                            ("line" variable nil (reparse-symbol function_parameters) [51601 51605])
                            ("begidx" variable nil (reparse-symbol function_parameters) [51607 51613])
                            ("endidx" variable nil (reparse-symbol function_parameters) [51615 51621]))                          )
                        (reparse-symbol indented_block_body) [51568 51687])
                    ("commands_resuming" variable nil (reparse-symbol indented_block_body) [51760 51877])
                    ("print_stack_trace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52309 52313]))                          )
                        (reparse-symbol indented_block_body) [52287 52477])
                    ("print_stack_entry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52504 52508])
                            ("frame_lineno" variable nil (reparse-symbol function_parameters) [52510 52522])
                            ("prompt_prefix" variable nil (reparse-symbol function_parameters) [52524 52537]))                          )
                        (reparse-symbol indented_block_body) [52482 52795])
                    ("do_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52832 52836])
                            ("arg" variable nil (reparse-symbol function_parameters) [52838 52841]))                          
                        :documentation "h(elp)
        Without argument, print the list of available commands.
        With a command name as argument, print help about that command.
        \"help pdb\" shows the full pdb documentation.
        \"help exec\" gives help on the ! command.
        ")
                        (reparse-symbol indented_block_body) [52820 53727])
                    ("do_h" variable nil (reparse-symbol indented_block_body) [53732 53746])
                    ("help_exec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53766 53770]))                          
                        :documentation "(!) statement
        Execute the (one-line) statement in the context of the current
        stack frame.  The exclamation point can be omitted unless the
        first word of the statement resembles a debugger command.  To
        assign to a global variable you must always prefix the command
        with a 'global' command, e.g.:
        (Pdb) global list_options; list_options = ['-l']
        (Pdb)
        ")
                        (reparse-symbol indented_block_body) [53752 54263])
                    ("help_pdb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54281 54285]))                          )
                        (reparse-symbol indented_block_body) [54268 54303])
                    ("lookupmodule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54355 54359])
                            ("filename" variable nil (reparse-symbol function_parameters) [54361 54369]))                          
                        :documentation "Helper function for break/clear parsing -- may be overridden.

        lookupmodule() translates (possibly incomplete) file or module name
        into an absolute file name.
        ")
                        (reparse-symbol indented_block_body) [54338 55247])
                    ("_runscript" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55267 55271])
                            ("filename" variable nil (reparse-symbol function_parameters) [55273 55281]))                          )
                        (reparse-symbol indented_block_body) [55252 56483]))                  
                :type "class")
                nil [4381 56483])
            ("if" code nil nil [56548 57206])
            ("run" function (:arguments 
              ( ("statement" variable nil (reparse-symbol function_parameters) [57240 57249])
                ("globals" variable nil (reparse-symbol function_parameters) [57251 57258])
                ("locals" variable nil (reparse-symbol function_parameters) [57265 57271]))              ) nil [57232 57321])
            ("runeval" function (:arguments 
              ( ("expression" variable nil (reparse-symbol function_parameters) [57334 57344])
                ("globals" variable nil (reparse-symbol function_parameters) [57346 57353])
                ("locals" variable nil (reparse-symbol function_parameters) [57360 57366]))              ) nil [57322 57428])
            ("runctx" function (:arguments 
              ( ("statement" variable nil (reparse-symbol function_parameters) [57440 57449])
                ("globals" variable nil (reparse-symbol function_parameters) [57451 57458])
                ("locals" variable nil (reparse-symbol function_parameters) [57460 57466]))              ) nil [57429 57529])
            ("runcall" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [57542 57547])
                ("kwds" variable nil (reparse-symbol function_parameters) [57549 57555]))              ) nil [57530 57598])
            ("set_trace" function nil nil [57599 57660])
            ("post_mortem" function (:arguments 
              ( ("t" variable nil (reparse-symbol function_parameters) [57702 57703]))              ) nil [57686 58110])
            ("pm" function nil nil [58111 58157])
            ("TESTCMD" variable nil nil [58187 58217])
            ("test" function nil nil [58219 58248])
            ("help" function nil nil [58262 58316])
            ("_usage" variable nil nil [58317 58765])
            ("main" function nil nil [58767 60863])
            ("if" code nil nil [60929 60986]))          
      :file "pdb.py"
      :pointmax 60986
      :fsize 60985
      :lastmodtime '(22333 27206 342105 881000)
      :unmatched-syntax '((INDENT_BLOCK 46261 . 46308) (NEWLINE 46260 . 46261) (COLON 46259 . 46260) (TRY 46164 . 46167) (AS 46253 . 46255) (INDENT_BLOCK 45794 . 45841) (NEWLINE 45793 . 45794) (COLON 45792 . 45793) (TRY 45700 . 45703) (AS 45786 . 45788) (INDENT_BLOCK 40004 . 40054) (NEWLINE 40003 . 40004) (COLON 40002 . 40003) (TRY 39666 . 39669) (AS 39998 . 40000) (INDENT_BLOCK 33961 . 34050) (NEWLINE 33960 . 33961) (COLON 33959 . 33960) (ELSE 33955 . 33959) (INDENT_BLOCK 33911 . 33943) (NEWLINE 33910 . 33911) (COLON 33909 . 33910) (TRY 33824 . 33827) (AS 33903 . 33905) (INDENT_BLOCK 31814 . 32280) (NEWLINE 31813 . 31814) (COLON 31812 . 31813) (ELSE 31808 . 31812) (INDENT_BLOCK 31772 . 31800) (NEWLINE 31771 . 31772) (COLON 31770 . 31771) (TRY 31599 . 31602) (AS 31764 . 31766) (INDENT_BLOCK 30744 . 30975) (NEWLINE 30743 . 30744) (COLON 30742 . 30743) (ELSE 30738 . 30742) (INDENT_BLOCK 30702 . 30730) (NEWLINE 30701 . 30702) (COLON 30700 . 30701) (TRY 30529 . 30532) (AS 30694 . 30696) (INDENT_BLOCK 29936 . 30014) (NEWLINE 29935 . 29936) (COLON 29934 . 29935) (ELSE 29930 . 29934) (INDENT_BLOCK 29886 . 29918) (NEWLINE 29885 . 29886) (COLON 29884 . 29885) (TRY 29799 . 29802) (AS 29878 . 29880) (INDENT_BLOCK 29238 . 29314) (NEWLINE 29237 . 29238) (COLON 29236 . 29237) (ELSE 29232 . 29236) (INDENT_BLOCK 29188 . 29220) (NEWLINE 29187 . 29188) (COLON 29186 . 29187) (TRY 29101 . 29104) (AS 29180 . 29182) (NAME 28377 . 28382) (IF 28409 . 28411) (ELSE 28438 . 28442) (INDENT_BLOCK 22358 . 22439) (NEWLINE 22357 . 22358) (COLON 22356 . 22357) (FINALLY 22349 . 22356) (NAME 11223 . 11229) (IF 11244 . 11246) (ELSE 11333 . 11337)))
    (semanticdb-table "stat.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Constants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *
\"\"\"" code nil nil [1 118])
            ("ST_MODE" variable nil nil [190 202])
            ("ST_INO" variable nil nil [203 215])
            ("ST_DEV" variable nil nil [216 228])
            ("ST_NLINK" variable nil nil [229 241])
            ("ST_UID" variable nil nil [242 254])
            ("ST_GID" variable nil nil [255 267])
            ("ST_SIZE" variable nil nil [268 280])
            ("ST_ATIME" variable nil nil [281 293])
            ("ST_MTIME" variable nil nil [294 306])
            ("ST_CTIME" variable nil nil [307 319])
            ("S_IMODE" function
               (:documentation "Return the portion of the file's mode that can be set by
    os.chmod().
    "
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [363 367]))                  )
                nil [351 483])
            ("S_IFMT" function
               (:documentation "Return the portion of the file's mode that describes the
    file type.
    "
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [495 499]))                  )
                nil [484 616])
            ("S_IFDIR" variable nil nil [713 732])
            ("S_IFCHR" variable nil nil [746 765])
            ("S_IFBLK" variable nil nil [786 805])
            ("S_IFREG" variable nil nil [822 841])
            ("S_IFIFO" variable nil nil [858 877])
            ("S_IFLNK" variable nil nil [899 918])
            ("S_IFSOCK" variable nil nil [936 955])
            ("S_ISDIR" function
               (:documentation "Return True if mode is from a directory."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1024 1028]))                  )
                nil [1012 1117])
            ("S_ISCHR" function
               (:documentation "Return True if mode is from a character special device file."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1130 1134]))                  )
                nil [1118 1243])
            ("S_ISBLK" function
               (:documentation "Return True if mode is from a block special device file."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1256 1260]))                  )
                nil [1244 1365])
            ("S_ISREG" function
               (:documentation "Return True if mode is from a regular file."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1378 1382]))                  )
                nil [1366 1474])
            ("S_ISFIFO" function
               (:documentation "Return True if mode is from a FIFO (named pipe)."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1488 1492]))                  )
                nil [1475 1589])
            ("S_ISLNK" function
               (:documentation "Return True if mode is from a symbolic link."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1602 1606]))                  )
                nil [1590 1699])
            ("S_ISSOCK" function
               (:documentation "Return True if mode is from a socket."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1713 1717]))                  )
                nil [1700 1804])
            ("S_ISUID" variable nil nil [1834 1850])
            ("S_ISGID" variable nil nil [1866 1882])
            ("S_ENFMT" variable nil nil [1898 1915])
            ("S_ISVTX" variable nil nil [1943 1959])
            ("S_IREAD" variable nil nil [1974 1990])
            ("S_IWRITE" variable nil nil [2022 2039])
            ("S_IEXEC" variable nil nil [2070 2086])
            ("S_IRWXU" variable nil nil [2118 2134])
            ("S_IRUSR" variable nil nil [2165 2181])
            ("S_IWUSR" variable nil nil [2199 2215])
            ("S_IXUSR" variable nil nil [2234 2250])
            ("S_IRWXG" variable nil nil [2271 2287])
            ("S_IRGRP" variable nil nil [2318 2334])
            ("S_IWGRP" variable nil nil [2352 2368])
            ("S_IXGRP" variable nil nil [2387 2403])
            ("S_IRWXO" variable nil nil [2424 2440])
            ("S_IROTH" variable nil nil [2487 2503])
            ("S_IWOTH" variable nil nil [2522 2538])
            ("S_IXOTH" variable nil nil [2558 2574])
            ("UF_NODUMP" variable nil nil [2621 2646])
            ("UF_IMMUTABLE" variable nil nil [2667 2692])
            ("UF_APPEND" variable nil nil [2720 2745])
            ("UF_OPAQUE" variable nil nil [2778 2803])
            ("UF_NOUNLINK" variable nil nil [2861 2886])
            ("UF_COMPRESSED" variable nil nil [2925 2951])
            ("UF_HIDDEN" variable nil nil [2983 3008])
            ("SF_ARCHIVED" variable nil nil [3047 3072])
            ("SF_IMMUTABLE" variable nil nil [3097 3122])
            ("SF_APPEND" variable nil nil [3150 3175])
            ("SF_NOUNLINK" variable nil nil [3208 3233])
            ("SF_SNAPSHOT" variable nil nil [3272 3297])
            ("_filemode_table" variable nil nil [3327 3975])
            ("filemode" function
               (:documentation "Convert a file's mode to a string of the form '-rwxrwxrwx'."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [3990 3994]))                  )
                nil [3977 4305])
            ("FILE_ATTRIBUTE_ARCHIVE" variable nil nil [4402 4429])
            ("FILE_ATTRIBUTE_COMPRESSED" variable nil nil [4430 4462])
            ("FILE_ATTRIBUTE_DEVICE" variable nil nil [4463 4489])
            ("FILE_ATTRIBUTE_DIRECTORY" variable nil nil [4490 4519])
            ("FILE_ATTRIBUTE_ENCRYPTED" variable nil nil [4520 4552])
            ("FILE_ATTRIBUTE_HIDDEN" variable nil nil [4553 4578])
            ("FILE_ATTRIBUTE_INTEGRITY_STREAM" variable nil nil [4579 4618])
            ("FILE_ATTRIBUTE_NORMAL" variable nil nil [4619 4646])
            ("FILE_ATTRIBUTE_NOT_CONTENT_INDEXED" variable nil nil [4647 4688])
            ("FILE_ATTRIBUTE_NO_SCRUB_DATA" variable nil nil [4689 4726])
            ("FILE_ATTRIBUTE_OFFLINE" variable nil nil [4727 4756])
            ("FILE_ATTRIBUTE_READONLY" variable nil nil [4757 4784])
            ("FILE_ATTRIBUTE_REPARSE_POINT" variable nil nil [4785 4820])
            ("FILE_ATTRIBUTE_SPARSE_FILE" variable nil nil [4821 4853])
            ("FILE_ATTRIBUTE_SYSTEM" variable nil nil [4854 4879])
            ("FILE_ATTRIBUTE_TEMPORARY" variable nil nil [4880 4910])
            ("FILE_ATTRIBUTE_VIRTUAL" variable nil nil [4911 4941])
            ("try" code nil nil [4981 5039]))          
      :file "stat.py"
      :pointmax 5039
      :fsize 5038
      :lastmodtime '(22333 27206 418105 880000)
      :unmatched-syntax nil)
    (semanticdb-table "_collections_abc.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.

Unit tests are in test_collections.
\"\"\"" code nil nil [102 214])
            ("abc" include nil nil [216 255])
            ("sys" include nil nil [256 266])
            ("__all__" variable nil nil [268 660])
            ("__name__" variable nil nil [905 933])
            ("bytes_iterator" variable nil nil [1283 1315])
            ("bytearray_iterator" variable nil nil [1316 1360])
            ("dict_keyiterator" variable nil nil [1386 1426])
            ("dict_valueiterator" variable nil nil [1427 1471])
            ("dict_itemiterator" variable nil nil [1472 1514])
            ("list_iterator" variable nil nil [1515 1545])
            ("list_reverseiterator" variable nil nil [1546 1593])
            ("range_iterator" variable nil nil [1594 1631])
            ("set_iterator" variable nil nil [1632 1664])
            ("str_iterator" variable nil nil [1665 1694])
            ("tuple_iterator" variable nil nil [1695 1726])
            ("zip_iterator" variable nil nil [1727 1759])
            ("dict_keys" variable nil nil [1772 1799])
            ("dict_values" variable nil nil [1800 1831])
            ("dict_items" variable nil nil [1832 1861])
            ("mappingproxy" variable nil nil [1873 1907])
            ("generator" variable nil nil [1908 1945])
            ("_coro" function nil nil [1968 1986])
            ("_coro" variable nil nil [1986 2001])
            ("coroutine" variable nil nil [2002 2025])
            ("_coro" code nil nil [2026 2039])
            ("del" code nil nil [2067 2076])
            ("Hashable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [2145 2159])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2198 2202]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2165 2222])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2265 2268])
                            ("C" variable nil (reparse-symbol function_parameters) [2270 2271]))                          )
                        (reparse-symbol indented_block_body) [2227 2518]))                  
                :type "class")
                nil [2105 2518])
            ("Awaitable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [2561 2575])
                    ("__await__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2615 2619]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2581 2636])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2679 2682])
                            ("C" variable nil (reparse-symbol function_parameters) [2684 2685]))                          )
                        (reparse-symbol indented_block_body) [2641 2935]))                  
                :type "class")
                nil [2520 2935])
            ("Coroutine" type
               (:superclasses ("Awaitable")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [2970 2984])
                    ("send" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3019 3023])
                            ("value" variable nil (reparse-symbol function_parameters) [3025 3030]))                          
                        :documentation "Send a value into the coroutine.
        Return next yielded value or raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [2990 3175])
                    ("throw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3210 3214])
                            ("typ" variable nil (reparse-symbol function_parameters) [3216 3219])
                            ("val" variable nil (reparse-symbol function_parameters) [3221 3224])
                            ("tb" variable nil (reparse-symbol function_parameters) [3231 3233]))                          
                        :documentation "Raise an exception in the coroutine.
        Return next yielded value or raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [3180 3546])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3561 3565]))                          
                        :documentation "Raise GeneratorExit inside coroutine.
        ")
                        (reparse-symbol indented_block_body) [3551 3824])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3867 3870])
                            ("C" variable nil (reparse-symbol function_parameters) [3872 3873]))                          )
                        (reparse-symbol indented_block_body) [3829 4229]))                  
                :type "class")
                nil [2937 4229])
            ("Coroutine" code nil nil [4231 4260])
            ("AsyncIterable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4308 4322])
                    ("__aiter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4368 4372]))                          )
                        (reparse-symbol indented_block_body) [4354 4406])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4449 4452])
                            ("C" variable nil (reparse-symbol function_parameters) [4454 4455]))                          )
                        (reparse-symbol indented_block_body) [4411 4615]))                  
                :type "class")
                nil [4263 4615])
            ("AsyncIterator" type
               (:superclasses ("AsyncIterable")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4658 4672])
                    ("__anext__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4718 4722]))                          
                        :documentation "Return the next item or raise StopAsyncIteration when exhausted.")
                        (reparse-symbol indented_block_body) [4704 4837])
                    ("__aiter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4862 4866]))                          )
                        (reparse-symbol indented_block_body) [4848 4889])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4932 4935])
                            ("C" variable nil (reparse-symbol function_parameters) [4937 4938]))                          )
                        (reparse-symbol indented_block_body) [4894 5170]))                  
                :type "class")
                nil [4617 5170])
            ("Iterable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [5212 5226])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5265 5269]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5232 5316])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5359 5362])
                            ("C" variable nil (reparse-symbol function_parameters) [5364 5365]))                          )
                        (reparse-symbol indented_block_body) [5321 5519]))                  
                :type "class")
                nil [5172 5519])
            ("Iterator" type
               (:superclasses ("Iterable")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [5552 5566])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5605 5609]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5572 5726])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5744 5748]))                          )
                        (reparse-symbol indented_block_body) [5731 5771])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5814 5817])
                            ("C" variable nil (reparse-symbol function_parameters) [5819 5820]))                          )
                        (reparse-symbol indented_block_body) [5776 6045]))                  
                :type "class")
                nil [5521 6045])
            ("Iterator" code nil nil [6046 6079])
            ("Iterator" code nil nil [6080 6117])
            ("Iterator" code nil nil [6156 6191])
            ("Iterator" code nil nil [6192 6229])
            ("Iterator" code nil nil [6230 6266])
            ("Iterator" code nil nil [6267 6299])
            ("Iterator" code nil nil [6300 6339])
            ("Iterator" code nil nil [6340 6373])
            ("Iterator" code nil nil [6374 6405])
            ("Iterator" code nil nil [6406 6437])
            ("Iterator" code nil nil [6438 6471])
            ("Iterator" code nil nil [6472 6503])
            ("Generator" type
               (:superclasses ("Iterator")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [6538 6552])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6571 6575]))                          
                        :documentation "Return the next item from the generator.
        When exhausted, raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [6558 6718])
                    ("send" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6752 6756])
                            ("value" variable nil (reparse-symbol function_parameters) [6758 6763]))                          
                        :documentation "Send a value into the generator.
        Return next yielded value or raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [6723 6908])
                    ("throw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6943 6947])
                            ("typ" variable nil (reparse-symbol function_parameters) [6949 6952])
                            ("val" variable nil (reparse-symbol function_parameters) [6954 6957])
                            ("tb" variable nil (reparse-symbol function_parameters) [6964 6966]))                          
                        :documentation "Raise an exception in the generator.
        Return next yielded value or raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [6913 7279])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7294 7298]))                          
                        :documentation "Raise GeneratorExit inside generator.
        ")
                        (reparse-symbol indented_block_body) [7284 7557])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7600 7603])
                            ("C" variable nil (reparse-symbol function_parameters) [7605 7606]))                          )
                        (reparse-symbol indented_block_body) [7562 7973]))                  
                :type "class")
                nil [6506 7973])
            ("Generator" code nil nil [7975 8004])
            ("Sized" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [8044 8058])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8096 8100]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8064 8120])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8163 8166])
                            ("C" variable nil (reparse-symbol function_parameters) [8168 8169]))                          )
                        (reparse-symbol indented_block_body) [8125 8319]))                  
                :type "class")
                nil [8007 8319])
            ("Container" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [8362 8376])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8419 8423])
                            ("x" variable nil (reparse-symbol function_parameters) [8425 8426]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8382 8450])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8493 8496])
                            ("C" variable nil (reparse-symbol function_parameters) [8498 8499]))                          )
                        (reparse-symbol indented_block_body) [8455 8658]))                  
                :type "class")
                nil [8321 8658])
            ("Callable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [8700 8714])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8753 8757])
                            ("args" variable nil (reparse-symbol function_parameters) [8759 8764])
                            ("kwds" variable nil (reparse-symbol function_parameters) [8766 8772]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8720 8796])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8839 8842])
                            ("C" variable nil (reparse-symbol function_parameters) [8844 8845]))                          )
                        (reparse-symbol indented_block_body) [8801 8999]))                  
                :type "class")
                nil [8660 8999])
            ("Set" type
               (:documentation "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), redefine __le__ and __ge__,
    then the other operations will automatically follow suit.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [9418 9432])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9449 9453])
                            ("other" variable nil (reparse-symbol function_parameters) [9455 9460]))                          )
                        (reparse-symbol indented_block_body) [9438 9705])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9721 9725])
                            ("other" variable nil (reparse-symbol function_parameters) [9727 9732]))                          )
                        (reparse-symbol indented_block_body) [9710 9869])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9885 9889])
                            ("other" variable nil (reparse-symbol function_parameters) [9891 9896]))                          )
                        (reparse-symbol indented_block_body) [9874 10033])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10049 10053])
                            ("other" variable nil (reparse-symbol function_parameters) [10055 10060]))                          )
                        (reparse-symbol indented_block_body) [10038 10305])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10321 10325])
                            ("other" variable nil (reparse-symbol function_parameters) [10327 10332]))                          )
                        (reparse-symbol indented_block_body) [10310 10470])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [10511 10514])
                            ("it" variable nil (reparse-symbol function_parameters) [10516 10518]))                          )
                        (reparse-symbol indented_block_body) [10475 10747])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10764 10768])
                            ("other" variable nil (reparse-symbol function_parameters) [10770 10775]))                          )
                        (reparse-symbol indented_block_body) [10752 10934])
                    ("__rand__" variable nil (reparse-symbol indented_block_body) [10939 10957])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10978 10982])
                            ("other" variable nil (reparse-symbol function_parameters) [10984 10989]))                          )
                        (reparse-symbol indented_block_body) [10963 11159])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11175 11179])
                            ("other" variable nil (reparse-symbol function_parameters) [11181 11186]))                          )
                        (reparse-symbol indented_block_body) [11164 11363])
                    ("__ror__" variable nil (reparse-symbol indented_block_body) [11368 11384])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11402 11406])
                            ("other" variable nil (reparse-symbol function_parameters) [11408 11413]))                          )
                        (reparse-symbol indented_block_body) [11390 11705])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11723 11727])
                            ("other" variable nil (reparse-symbol function_parameters) [11729 11734]))                          )
                        (reparse-symbol indented_block_body) [11710 12026])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12043 12047])
                            ("other" variable nil (reparse-symbol function_parameters) [12049 12054]))                          )
                        (reparse-symbol indented_block_body) [12031 12276])
                    ("__rxor__" variable nil (reparse-symbol indented_block_body) [12281 12299])
                    ("_hash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12315 12319]))                          
                        :documentation "Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        ")
                        (reparse-symbol indented_block_body) [12305 13309]))                  
                :type "class")
                nil [9016 13309])
            ("Set" code nil nil [13310 13333])
            ("MutableSet" type
               (:documentation "A mutable set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__, __len__,
    add(), and discard().

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
                :superclasses ("Set")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [13766 13780])
                    ("add" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13814 13818])
                            ("value" variable nil (reparse-symbol function_parameters) [13820 13825]))                          
                        :documentation "Add an element.")
                        (reparse-symbol indented_block_body) [13786 13892])
                    ("discard" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13929 13933])
                            ("value" variable nil (reparse-symbol function_parameters) [13935 13940]))                          
                        :documentation "Remove an element.  Do not raise an exception if absent.")
                        (reparse-symbol indented_block_body) [13897 14048])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14064 14068])
                            ("value" variable nil (reparse-symbol function_parameters) [14070 14075]))                          
                        :documentation "Remove an element. If not a member, raise a KeyError.")
                        (reparse-symbol indented_block_body) [14053 14238])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14251 14255]))                          
                        :documentation "Return the popped value.  Raise KeyError if empty.")
                        (reparse-symbol indented_block_body) [14243 14495])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14510 14514]))                          
                        :documentation "This is slow (creates N new iterators!) but effective.")
                        (reparse-symbol indented_block_body) [14500 14692])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14709 14713])
                            ("it" variable nil (reparse-symbol function_parameters) [14715 14717]))                          )
                        (reparse-symbol indented_block_body) [14697 14793])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14811 14815])
                            ("it" variable nil (reparse-symbol function_parameters) [14817 14819]))                          )
                        (reparse-symbol indented_block_body) [14798 14908])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14926 14930])
                            ("it" variable nil (reparse-symbol function_parameters) [14932 14934]))                          )
                        (reparse-symbol indented_block_body) [14913 15265])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15283 15287])
                            ("it" variable nil (reparse-symbol function_parameters) [15289 15291]))                          )
                        (reparse-symbol indented_block_body) [15270 15441]))                  
                :type "class")
                nil [13336 15441])
            ("MutableSet" code nil nil [15442 15466])
            ("Mapping" type
               (:superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [15536 15550])
                    ("\"\"\"A Mapping is a generic container for associating key/value
    pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __iter__, and __len__.

    \"\"\"" code nil (reparse-symbol indented_block_body) [15556 15761])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15803 15807])
                            ("key" variable nil (reparse-symbol function_parameters) [15809 15812]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15767 15838])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15851 15855])
                            ("key" variable nil (reparse-symbol function_parameters) [15857 15860])
                            ("default" variable nil (reparse-symbol function_parameters) [15862 15869]))                          )
                        (reparse-symbol indented_block_body) [15843 16042])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16064 16068])
                            ("key" variable nil (reparse-symbol function_parameters) [16070 16073]))                          )
                        (reparse-symbol indented_block_body) [16047 16199])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16213 16217]))                          )
                        (reparse-symbol indented_block_body) [16204 16319])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16334 16338]))                          )
                        (reparse-symbol indented_block_body) [16324 16443])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16459 16463]))                          )
                        (reparse-symbol indented_block_body) [16448 16563])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16579 16583])
                            ("other" variable nil (reparse-symbol function_parameters) [16585 16590]))                          )
                        (reparse-symbol indented_block_body) [16568 16727]))                  
                :type "class")
                nil [15488 16727])
            ("Mapping" code nil nil [16728 16758])
            ("MappingView" type
               (:superclasses ("Sized")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [16792 16815])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [16858 16881]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16834 16838])
                            ("mapping" variable nil (reparse-symbol function_parameters) [16840 16847]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16821 16882])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16899 16903]))                          )
                        (reparse-symbol indented_block_body) [16887 16940])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16958 16962]))                          )
                        (reparse-symbol indented_block_body) [16945 17034]))                  
                :type "class")
                nil [16761 17034])
            ("KeysView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [17075 17089])
                    ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17131 17135])
                            ("it" variable nil (reparse-symbol function_parameters) [17137 17139]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17095 17165])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17187 17191])
                            ("key" variable nil (reparse-symbol function_parameters) [17193 17196]))                          )
                        (reparse-symbol indented_block_body) [17170 17235])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17253 17257]))                          )
                        (reparse-symbol indented_block_body) [17240 17293]))                  
                :type "class")
                nil [17036 17293])
            ("KeysView" code nil nil [17294 17322])
            ("ItemsView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [17365 17379])
                    ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17421 17425])
                            ("it" variable nil (reparse-symbol function_parameters) [17427 17429]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17385 17455])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17477 17481])
                            ("item" variable nil (reparse-symbol function_parameters) [17483 17487]))                          )
                        (reparse-symbol indented_block_body) [17460 17658])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17676 17680]))                          )
                        (reparse-symbol indented_block_body) [17663 17761]))                  
                :type "class")
                nil [17325 17761])
            ("ItemsView" code nil nil [17762 17792])
            ("ValuesView" type
               (:superclasses ("MappingView")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [17831 17845])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17868 17872])
                            ("value" variable nil (reparse-symbol function_parameters) [17874 17879]))                          )
                        (reparse-symbol indented_block_body) [17851 18009])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18027 18031]))                          )
                        (reparse-symbol indented_block_body) [18014 18105]))                  
                :type "class")
                nil [17795 18105])
            ("ValuesView" code nil nil [18106 18138])
            ("MutableMapping" type
               (:superclasses ("Mapping")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [18177 18191])
                    ("\"\"\"A MutableMapping is a generic container for associating
    key/value pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __setitem__, __delitem__,
    __iter__, and __len__.

    \"\"\"" code nil (reparse-symbol indented_block_body) [18197 18439])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18481 18485])
                            ("key" variable nil (reparse-symbol function_parameters) [18487 18490])
                            ("value" variable nil (reparse-symbol function_parameters) [18492 18497]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18445 18523])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18564 18568])
                            ("key" variable nil (reparse-symbol function_parameters) [18570 18573]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18528 18599])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [18604 18623])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18637 18641])
                            ("key" variable nil (reparse-symbol function_parameters) [18643 18646])
                            ("default" variable nil (reparse-symbol function_parameters) [18648 18655]))                          )
                        (reparse-symbol indented_block_body) [18629 19074])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19091 19095]))                          )
                        (reparse-symbol indented_block_body) [19079 19423])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19438 19442]))                          )
                        (reparse-symbol indented_block_body) [19428 19610])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [19626 19631])
                        ("kwds" variable nil (reparse-symbol function_parameters) [19633 19639]))                      ) (reparse-symbol indented_block_body) [19615 20761])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20781 20785])
                            ("key" variable nil (reparse-symbol function_parameters) [20787 20790])
                            ("default" variable nil (reparse-symbol function_parameters) [20792 20799]))                          )
                        (reparse-symbol indented_block_body) [20766 21004]))                  
                :type "class")
                nil [18141 21004])
            ("MutableMapping" code nil nil [21005 21034])
            ("Sequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [21256 21270])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21312 21316])
                            ("index" variable nil (reparse-symbol function_parameters) [21318 21323]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [21276 21351])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21369 21373]))                          )
                        (reparse-symbol indented_block_body) [21356 21548])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21570 21574])
                            ("value" variable nil (reparse-symbol function_parameters) [21576 21581]))                          )
                        (reparse-symbol indented_block_body) [21553 21683])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21705 21709]))                          )
                        (reparse-symbol indented_block_body) [21688 21783])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21798 21802])
                            ("value" variable nil (reparse-symbol function_parameters) [21804 21809])
                            ("start" variable nil (reparse-symbol function_parameters) [21811 21816])
                            ("stop" variable nil (reparse-symbol function_parameters) [21820 21824]))                          )
                        (reparse-symbol indented_block_body) [21788 22389])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22404 22408])
                            ("value" variable nil (reparse-symbol function_parameters) [22410 22415]))                          )
                        (reparse-symbol indented_block_body) [22394 22545]))                  
                :type "class")
                nil [21057 22545])
            ("Sequence" code nil nil [22546 22570])
            ("Sequence" code nil nil [22571 22593])
            ("Sequence" code nil nil [22594 22618])
            ("Sequence" code nil nil [22619 22648])
            ("ByteString" type
               (:documentation "This unifies bytes and bytearray.

    XXX Should add all their methods.
    "
                :superclasses ("Sequence")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [22773 22787]))                  
                :type "class")
                nil [22651 22788])
            ("ByteString" code nil nil [22789 22815])
            ("ByteString" code nil nil [22816 22846])
            ("MutableSequence" type
               (:superclasses ("Sequence")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [22887 22901])
                    ("\"\"\"All the operations on a read-write sequence.

    Concrete subclasses must provide __new__ or __init__,
    __getitem__, __setitem__, __delitem__, __len__, and insert().

    \"\"\"" code nil (reparse-symbol indented_block_body) [22907 23088])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23130 23134])
                            ("index" variable nil (reparse-symbol function_parameters) [23136 23141])
                            ("value" variable nil (reparse-symbol function_parameters) [23143 23148]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23094 23176])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23217 23221])
                            ("index" variable nil (reparse-symbol function_parameters) [23223 23228]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23181 23256])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23292 23296])
                            ("index" variable nil (reparse-symbol function_parameters) [23298 23303])
                            ("value" variable nil (reparse-symbol function_parameters) [23305 23310]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23261 23400])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23416 23420])
                            ("value" variable nil (reparse-symbol function_parameters) [23422 23427]))                          )
                        (reparse-symbol indented_block_body) [23405 23537])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23552 23556]))                          )
                        (reparse-symbol indented_block_body) [23542 23722])
                    ("reverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23739 23743]))                          )
                        (reparse-symbol indented_block_body) [23727 23898])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23914 23918])
                            ("values" variable nil (reparse-symbol function_parameters) [23920 23926]))                          )
                        (reparse-symbol indented_block_body) [23903 24069])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24082 24086])
                            ("index" variable nil (reparse-symbol function_parameters) [24088 24093]))                          )
                        (reparse-symbol indented_block_body) [24074 24332])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24348 24352])
                            ("value" variable nil (reparse-symbol function_parameters) [24354 24359]))                          )
                        (reparse-symbol indented_block_body) [24337 24531])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24549 24553])
                            ("values" variable nil (reparse-symbol function_parameters) [24555 24561]))                          )
                        (reparse-symbol indented_block_body) [24536 24612]))                  
                :type "class")
                nil [22849 24612])
            ("MutableSequence" code nil nil [24613 24643])
            ("MutableSequence" code nil nil [24644 24679]))          
      :file "_collections_abc.py"
      :pointmax 24719
      :fsize 24718
      :lastmodtime '(22333 27206 174105 884000)
      :unmatched-syntax '((NAME 20144 . 20148) (MULT 20150 . 20151) (YIELD 17268 . 17273) (FROM 17274 . 17278) (NEWLINE 17292 . 17293) (NAME 8675 . 8684) (ASSIGN 8684 . 8685) (NAME 8337 . 8346) (ASSIGN 8346 . 8347) (NAME 8019 . 8028) (ASSIGN 8028 . 8029) (NAME 5187 . 5196) (ASSIGN 5196 . 5197) (NAME 4283 . 4292) (ASSIGN 4292 . 4293) (NAME 2536 . 2545) (ASSIGN 2545 . 2546) (NAME 2120 . 2129) (ASSIGN 2129 . 2130)))
    (semanticdb-table "re.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    \".\"      Matches any character except a newline.
    \"^\"      Matches the start of the string.
    \"$\"      Matches the end of the string or just before the newline at
             the end of the string.
    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.
    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    \"\\\\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A \"^\" as the first character indicates a complementing set.
    \"|\"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?aiLmsux) Set the A, I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of \"\\\\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \\number  Matches the contents of the group of the same number.
    \\A       Matches only at the start of the string.
    \\Z       Matches only at the end of the string.
    \\b       Matches the empty string, but only at the start or end of a word.
    \\B       Matches the empty string, but not at the start or end of a word.
    \\d       Matches any decimal digit; equivalent to the set [0-9] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode digits.
    \\D       Matches any non-digit character; equivalent to [^\\d].
    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode whitespace characters.
    \\S       Matches any non-whitespace character; equivalent to [^\\s].
    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]
             in bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the
             range of Unicode alphanumeric characters (letters plus digits
             plus underscore).
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \\W       Matches the complement of \\w.
    \\\\       Matches a literal backslash.

This module exports the following functions:
    match     Match a regular expression pattern to the beginning of a string.
    fullmatch Match a regular expression pattern to all of a string.
    search    Search a string for the presence of a pattern.
    sub       Substitute occurrences of a pattern found in a string.
    subn      Same as sub, but also return the number of substitutions made.
    split     Split a string by the occurrences of a pattern.
    findall   Find all occurrences of a pattern in a string.
    finditer  Return an iterator yielding a match object for each match.
    compile   Compile a pattern into a RegexObject.
    purge     Clear the regular expression cache.
    escape    Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D
                   match the corresponding ASCII character categories
                   (rather than the whole Unicode categories, which is the
                   default).
                   For bytes patterns, this flag is the only available
                   behaviour and needn't be specified.
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.
    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)
                   as well as the string.
                   \"$\" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      \".\" matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     For compatibility only. Ignored for string patterns (it
                   is the default), and forbidden for bytes patterns.

This module also defines an exception 'error'.

\"\"\"" code nil nil [501 6492])
            ("sys" include nil nil [6494 6504])
            ("sre_compile" include nil nil [6505 6523])
            ("sre_parse" include nil nil [6524 6540])
            ("try" code nil nil [6541 6604])
            ("__all__" variable nil nil [6622 6898])
            ("__version__" variable nil nil [6900 6921])
            ("A" variable nil nil [6931 6969])
            ("I" variable nil nil [6994 7042])
            ("L" variable nil nil [7057 7097])
            ("U" variable nil nil [7128 7170])
            ("M" variable nil nil [7197 7243])
            ("S" variable nil nil [7276 7316])
            ("X" variable nil nil [7342 7384])
            ("T" variable nil nil [7472 7516])
            ("DEBUG" variable nil nil [7540 7574])
            ("error" variable nil nil [7625 7650])
            ("match" function
               (:documentation "Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7753 7760])
                    ("string" variable nil (reparse-symbol function_parameters) [7762 7768])
                    ("flags" variable nil (reparse-symbol function_parameters) [7770 7775]))                  )
                nil [7743 7954])
            ("fullmatch" function
               (:documentation "Try to apply the pattern to all of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7969 7976])
                    ("string" variable nil (reparse-symbol function_parameters) [7978 7984])
                    ("flags" variable nil (reparse-symbol function_parameters) [7986 7991]))                  )
                nil [7955 8168])
            ("search" function
               (:documentation "Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8180 8187])
                    ("string" variable nil (reparse-symbol function_parameters) [8189 8195])
                    ("flags" variable nil (reparse-symbol function_parameters) [8197 8202]))                  )
                nil [8169 8385])
            ("sub" function
               (:documentation "Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8394 8401])
                    ("repl" variable nil (reparse-symbol function_parameters) [8403 8407])
                    ("string" variable nil (reparse-symbol function_parameters) [8409 8415])
                    ("count" variable nil (reparse-symbol function_parameters) [8417 8422])
                    ("flags" variable nil (reparse-symbol function_parameters) [8426 8431]))                  )
                nil [8386 8854])
            ("subn" function
               (:documentation "Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the match object and must
    return a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8864 8871])
                    ("repl" variable nil (reparse-symbol function_parameters) [8873 8877])
                    ("string" variable nil (reparse-symbol function_parameters) [8879 8885])
                    ("count" variable nil (reparse-symbol function_parameters) [8887 8892])
                    ("flags" variable nil (reparse-symbol function_parameters) [8896 8901]))                  )
                nil [8855 9454])
            ("split" function
               (:documentation "Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings.  If
    capturing parentheses are used in pattern, then the text of all
    groups in the pattern are also returned as part of the resulting
    list.  If maxsplit is nonzero, at most maxsplit splits occur,
    and the remainder of the string is returned as the final element
    of the list."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [9465 9472])
                    ("string" variable nil (reparse-symbol function_parameters) [9474 9480])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9482 9490])
                    ("flags" variable nil (reparse-symbol function_parameters) [9494 9499]))                  )
                nil [9455 9984])
            ("findall" function
               (:documentation "Return a list of all non-overlapping matches in the string.

    If one or more capturing groups are present in the pattern, return
    a list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [9997 10004])
                    ("string" variable nil (reparse-symbol function_parameters) [10006 10012])
                    ("flags" variable nil (reparse-symbol function_parameters) [10014 10019]))                  )
                nil [9985 10361])
            ("finditer" function
               (:documentation "Return an iterator over all non-overlapping matches in the
    string.  For each match, the iterator returns a match object.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [10375 10382])
                    ("string" variable nil (reparse-symbol function_parameters) [10384 10390])
                    ("flags" variable nil (reparse-symbol function_parameters) [10392 10397]))                  )
                nil [10362 10637])
            ("compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [10650 10657])
                ("flags" variable nil (reparse-symbol function_parameters) [10659 10664]))              ) nil [10638 10777])
            ("purge" function nil nil [10778 10876])
            ("template" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [10890 10897])
                ("flags" variable nil (reparse-symbol function_parameters) [10899 10904]))              ) nil [10877 11008])
            ("_alphanum_str" variable nil nil [11009 11107])
            ("_alphanum_bytes" variable nil nil [11108 11209])
            ("escape" function
               (:documentation "
    Escape all the characters in pattern except ASCII letters, numbers and '_'.
    "
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [11222 11229]))                  )
                nil [11211 12010])
            ("_cache" variable nil nil [12095 12106])
            ("_cache_repl" variable nil nil [12107 12123])
            ("_pattern_type" variable nil nil [12125 12173])
            ("_MAXCACHE" variable nil nil [12175 12190])
            ("_compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [12204 12211])
                ("flags" variable nil (reparse-symbol function_parameters) [12213 12218]))              ) nil [12191 13125])
            ("_compile_repl" function (:arguments 
              ( ("repl" variable nil (reparse-symbol function_parameters) [13144 13148])
                ("pattern" variable nil (reparse-symbol function_parameters) [13150 13157]))              ) nil [13126 13451])
            ("_expand" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [13464 13471])
                ("match" variable nil (reparse-symbol function_parameters) [13473 13478])
                ("template" variable nil (reparse-symbol function_parameters) [13480 13488]))              ) nil [13452 13653])
            ("_subx" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [13664 13671])
                ("template" variable nil (reparse-symbol function_parameters) [13673 13681]))              ) nil [13654 14015])
            ("copyreg" include nil nil [14048 14062])
            ("_pickle" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [14076 14077]))              ) nil [14064 14122])
            ("copyreg" code nil nil [14123 14171])
            ("Scanner" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("sre_constants" include nil (reparse-symbol indented_block_body) [14372 14416])
                            ("self" variable nil (reparse-symbol indented_block_body) [14425 14447])
                            ("p" variable nil (reparse-symbol indented_block_body) [14506 14512])
                            ("s" variable nil (reparse-symbol indented_block_body) [14521 14544])
                            ("s" variable nil (reparse-symbol indented_block_body) [14553 14568])
                            ("for" code nil (reparse-symbol indented_block_body) [14577 14813])
                            ("p" variable nil (reparse-symbol indented_block_body) [14821 14871])
                            ("self" variable nil (reparse-symbol indented_block_body) [14880 14917]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14339 14343])
                            ("lexicon" variable nil (reparse-symbol function_parameters) [14345 14352])
                            ("flags" variable nil (reparse-symbol function_parameters) [14354 14359]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14326 14918])
                    ("scan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14931 14935])
                            ("string" variable nil (reparse-symbol function_parameters) [14937 14943]))                          )
                        (reparse-symbol indented_block_body) [14922 15502]))                  
                :type "class")
                nil [14307 15502]))          
      :file "re.py"
      :pointmax 15502
      :fsize 15501
      :lastmodtime '(22333 27206 382105 881000)
      :unmatched-syntax nil)
    (semanticdb-table "cmd.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"A generic class to build line-oriented command interpreters.

Interpreters constructed with this class obey the following conventions:

1. End of file on input is processed as the command 'EOF'.
2. A command is parsed out of each line by collecting the prefix composed
   of characters in the identchars member.
3. A command `foo' is dispatched to a method 'do_foo()'; the do_ method
   is passed a single argument consisting of the remainder of the line.
4. Typing an empty line repeats the last command.  (Actually, it calls the
   method `emptyline', which may be overridden in a subclass.)
5. There is a predefined `help' method.  Given an argument `topic', it
   calls the command `help_topic'.  With no arguments, it lists all topics
   with defined help_ functions, broken into up to three topics; documented
   commands, miscellaneous help topics, and undocumented commands.
6. The command '?' is a synonym for `help'.  The command '!' is a synonym
   for `shell', if a do_shell method exists.
7. If completion is enabled, completing commands will be done automatically,
   and completing of commands args is done by calling complete_foo() with
   arguments text, line, begidx, endidx.  text is string we are matching
   against, all returned matches must begin with it.  line is the current
   input line (lstripped), begidx and endidx are the beginning and end
   indexes of the text being matched, which could be used to provide
   different completion depending upon which position the argument is in.

The `default' method may be overridden to intercept commands for which there
is no do_ method.

The `completedefault' method may be overridden to intercept completions for
commands that have no complete_ method.

The data member `self.ruler' sets the character used to draw separator lines
in the help messages.  If empty, no ruler line is drawn.  It defaults to \"=\".

If the value of `self.intro' is nonempty when the cmdloop method is called,
it is printed out on interpreter startup.  This value may be overridden
via an optional argument to the cmdloop() method.

The data members `self.doc_header', `self.misc_header', and
`self.undoc_header' set the headers used for the help function's
listings of documented functions, miscellaneous topics, and undocumented
functions respectively.
\"\"\"" code nil nil [1 2312])
            ("sys" include nil nil [2314 2332])
            ("string" include nil nil [2314 2332])
            ("__all__" variable nil nil [2334 2351])
            ("PROMPT" variable nil nil [2353 2370])
            ("IDENTCHARS" code nil nil [2371 2426])
            ("Cmd" type
               (:documentation "A simple framework for writing line-oriented command interpreters.

    These are often useful for test harnesses, administrative tools, and
    prototypes that will later be wrapped in a more sophisticated interface.

    A Cmd instance or subclass instance is a line-oriented interpreter
    framework.  There is no good reason to instantiate Cmd itself; rather,
    it's useful as a superclass of an interpreter class you define yourself
    in order to inherit Cmd's methods and encapsulate action methods.

    "
                :members 
                  ( ("prompt" variable nil (reparse-symbol indented_block_body) [2970 2985])
                    ("identchars" variable nil (reparse-symbol indented_block_body) [2990 3013])
                    ("ruler" variable nil (reparse-symbol indented_block_body) [3018 3029])
                    ("lastcmd" variable nil (reparse-symbol indented_block_body) [3034 3046])
                    ("intro" variable nil (reparse-symbol indented_block_body) [3051 3063])
                    ("doc_leader" variable nil (reparse-symbol indented_block_body) [3068 3083])
                    ("doc_header" variable nil (reparse-symbol indented_block_body) [3088 3143])
                    ("misc_header" variable nil (reparse-symbol indented_block_body) [3148 3190])
                    ("undoc_header" variable nil (reparse-symbol indented_block_body) [3195 3234])
                    ("nohelp" variable nil (reparse-symbol indented_block_body) [3239 3267])
                    ("use_rawinput" variable nil (reparse-symbol indented_block_body) [3272 3288])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Instantiate a line-oriented interpreter framework.

        The optional argument 'completekey' is the readline name of a
        completion key; it defaults to the Tab key. If completekey is
        not None and the readline module is available, command completion
        is done automatically. The optional arguments stdin and stdout
        specify alternate input and output file objects; if not specified,
        sys.stdin and sys.stdout are used.

        \"\"\"" code nil (reparse-symbol indented_block_body) [3366 3836])
                            ("if" code nil (reparse-symbol indented_block_body) [3845 3947])
                            ("if" code nil (reparse-symbol indented_block_body) [3955 4062])
                            ("self" variable nil (reparse-symbol indented_block_body) [4070 4088])
                            ("self" variable nil (reparse-symbol indented_block_body) [4097 4127]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3307 3311])
                            ("completekey" variable nil (reparse-symbol function_parameters) [3313 3324])
                            ("stdin" variable nil (reparse-symbol function_parameters) [3332 3337])
                            ("stdout" variable nil (reparse-symbol function_parameters) [3344 3350]))                          
                        :documentation "Instantiate a line-oriented interpreter framework.

        The optional argument 'completekey' is the readline name of a
        completion key; it defaults to the Tab key. If completekey is
        not None and the readline module is available, command completion
        is done automatically. The optional arguments stdin and stdout
        specify alternate input and output file objects; if not specified,
        sys.stdin and sys.stdout are used.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3294 4128])
                    ("cmdloop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4145 4149])
                            ("intro" variable nil (reparse-symbol function_parameters) [4151 4156]))                          
                        :documentation "Repeatedly issue a prompt, accept input, parse an initial prefix
        off the received input, and dispatch to action methods, passing them
        the remainder of the line as argument.

        ")
                        (reparse-symbol indented_block_body) [4133 6026])
                    ("precmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6043 6047])
                            ("line" variable nil (reparse-symbol function_parameters) [6049 6053]))                          
                        :documentation "Hook method executed just before the command line is
        interpreted, but after the input prompt is generated and issued.

        ")
                        (reparse-symbol indented_block_body) [6032 6226])
                    ("postcmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6243 6247])
                            ("stop" variable nil (reparse-symbol function_parameters) [6249 6253])
                            ("line" variable nil (reparse-symbol function_parameters) [6255 6259]))                          
                        :documentation "Hook method executed just after a command dispatch is finished.")
                        (reparse-symbol indented_block_body) [6231 6360])
                    ("preloop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6377 6381]))                          
                        :documentation "Hook method executed once when the cmdloop() method is called.")
                        (reparse-symbol indented_block_body) [6365 6474])
                    ("postloop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6492 6496]))                          
                        :documentation "Hook method executed once when the cmdloop() method is about to
        return.

        ")
                        (reparse-symbol indented_block_body) [6479 6616])
                    ("parseline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6635 6639])
                            ("line" variable nil (reparse-symbol function_parameters) [6641 6645]))                          
                        :documentation "Parse the line into a command name and a string containing
        the arguments.  Returns a tuple containing (command, args, line).
        'command' and 'args' may be None if the line couldn't be parsed.
        ")
                        (reparse-symbol indented_block_body) [6621 7365])
                    ("onecmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7381 7385])
                            ("line" variable nil (reparse-symbol function_parameters) [7387 7391]))                          
                        :documentation "Interpret the argument as though it had been typed in response
        to the prompt.

        This may be overridden, but should not normally need to be;
        see the precmd() and postcmd() methods for useful execution hooks.
        The return value is a flag indicating whether interpretation of
        commands by the interpreter should stop.

        ")
                        (reparse-symbol indented_block_body) [7370 8266])
                    ("emptyline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8285 8289]))                          
                        :documentation "Called when an empty line is entered in response to the prompt.

        If this method is not overridden, it repeats the last nonempty
        command entered.

        ")
                        (reparse-symbol indented_block_body) [8271 8547])
                    ("default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8564 8568])
                            ("line" variable nil (reparse-symbol function_parameters) [8570 8574]))                          
                        :documentation "Called on an input line when the command prefix is not recognized.

        If this method is not overridden, it prints an error message and
        returns.

        ")
                        (reparse-symbol indented_block_body) [8552 8818])
                    ("completedefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8843 8847])
                            ("ignored" variable nil (reparse-symbol function_parameters) [8849 8857]))                          
                        :documentation "Method called to complete an input line when no command-specific
        complete_*() method is available.

        By default, it returns an empty list.

        ")
                        (reparse-symbol indented_block_body) [8823 9056])
                    ("completenames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9079 9083])
                            ("text" variable nil (reparse-symbol function_parameters) [9085 9089])
                            ("ignored" variable nil (reparse-symbol function_parameters) [9091 9099]))                          )
                        (reparse-symbol indented_block_body) [9061 9203])
                    ("complete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9221 9225])
                            ("text" variable nil (reparse-symbol function_parameters) [9227 9231])
                            ("state" variable nil (reparse-symbol function_parameters) [9233 9238]))                          
                        :documentation "Return the next possible completion for 'text'.

        If a command has not been entered, then complete against command list.
        Otherwise try to call complete_<command> to get list of completions.
        ")
                        (reparse-symbol indented_block_body) [9208 10392])
                    ("get_names" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10411 10415]))                          )
                        (reparse-symbol indented_block_body) [10397 10557])
                    ("complete_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10580 10584])
                            ("args" variable nil (reparse-symbol function_parameters) [10586 10591]))                          )
                        (reparse-symbol indented_block_body) [10562 10793])
                    ("do_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10810 10814])
                            ("arg" variable nil (reparse-symbol function_parameters) [10816 10819]))                          )
                        (reparse-symbol indented_block_body) [10798 12548])
                    ("print_topics" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12570 12574])
                            ("header" variable nil (reparse-symbol function_parameters) [12576 12582])
                            ("cmds" variable nil (reparse-symbol function_parameters) [12584 12588])
                            ("cmdlen" variable nil (reparse-symbol function_parameters) [12590 12596])
                            ("maxcol" variable nil (reparse-symbol function_parameters) [12598 12604]))                          )
                        (reparse-symbol indented_block_body) [12553 12852])
                    ("columnize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12871 12875])
                            ("list" variable nil (reparse-symbol function_parameters) [12877 12881])
                            ("displaywidth" variable nil (reparse-symbol function_parameters) [12883 12895]))                          
                        :documentation "Display a list of strings as a compact set of columns.

        Each column is only as wide as necessary.
        Columns are separated by two spaces (one was not legible enough).
        ")
                        (reparse-symbol indented_block_body) [12857 14861]))                  
                :type "class")
                nil [2428 14861]))          
      :file "cmd.py"
      :pointmax 14861
      :fsize 14860
      :lastmodtime '(22333 27206 226105 883000)
      :unmatched-syntax nil)
    (semanticdb-table "bdb.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Debugger basics\"\"\"" code nil nil [1 22])
            ("fnmatch" include nil nil [24 38])
            ("sys" include nil nil [39 49])
            ("os" include nil nil [50 59])
            ("inspect" include nil nil [60 92])
            ("__all__" variable nil nil [94 136])
            ("BdbQuit" type
               (:documentation "Exception to give up completely."
                :superclasses ("Exception")
                :type "class")
                nil [138 207])
            ("Bdb" type
               (:documentation "Generic Python debugger base class.

    This class takes care of details of the trace facility;
    a derived class should implement user interaction.
    The standard debugger class (pdb.Pdb) is an example.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("None" code nil (reparse-symbol indented_block_body) [523 527])
                            ("self" variable nil (reparse-symbol indented_block_body) [536 552])
                            ("self" variable nil (reparse-symbol indented_block_body) [561 578])
                            ("self" variable nil (reparse-symbol indented_block_body) [587 614]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [462 466])
                            ("skip" variable nil (reparse-symbol function_parameters) [468 472]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [449 615])
                    ("canonic" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [632 636])
                            ("filename" variable nil (reparse-symbol function_parameters) [638 646]))                          )
                        (reparse-symbol indented_block_body) [620 961])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [976 980]))                          )
                        (reparse-symbol indented_block_body) [966 1107])
                    ("trace_dispatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1131 1135])
                            ("frame" variable nil (reparse-symbol function_parameters) [1137 1142])
                            ("event" variable nil (reparse-symbol function_parameters) [1144 1149])
                            ("arg" variable nil (reparse-symbol function_parameters) [1151 1154]))                          )
                        (reparse-symbol indented_block_body) [1112 1852])
                    ("dispatch_line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1875 1879])
                            ("frame" variable nil (reparse-symbol function_parameters) [1881 1886]))                          )
                        (reparse-symbol indented_block_body) [1857 2062])
                    ("dispatch_call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2085 2089])
                            ("frame" variable nil (reparse-symbol function_parameters) [2091 2096])
                            ("arg" variable nil (reparse-symbol function_parameters) [2098 2101]))                          )
                        (reparse-symbol indented_block_body) [2067 2769])
                    ("dispatch_return" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2794 2798])
                            ("frame" variable nil (reparse-symbol function_parameters) [2800 2805])
                            ("arg" variable nil (reparse-symbol function_parameters) [2807 2810]))                          )
                        (reparse-symbol indented_block_body) [2774 3484])
                    ("dispatch_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3512 3516])
                            ("frame" variable nil (reparse-symbol function_parameters) [3518 3523])
                            ("arg" variable nil (reparse-symbol function_parameters) [3525 3528]))                          )
                        (reparse-symbol indented_block_body) [3489 4582])
                    ("is_skipped_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4773 4777])
                            ("module_name" variable nil (reparse-symbol function_parameters) [4779 4790]))                          )
                        (reparse-symbol indented_block_body) [4751 4930])
                    ("stop_here" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4949 4953])
                            ("frame" variable nil (reparse-symbol function_parameters) [4955 4960]))                          )
                        (reparse-symbol indented_block_body) [4935 5457])
                    ("break_here" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5477 5481])
                            ("frame" variable nil (reparse-symbol function_parameters) [5483 5488]))                          )
                        (reparse-symbol indented_block_body) [5462 6278])
                    ("do_clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6296 6300])
                            ("arg" variable nil (reparse-symbol function_parameters) [6302 6305]))                          )
                        (reparse-symbol indented_block_body) [6283 6387])
                    ("break_anywhere" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6411 6415])
                            ("frame" variable nil (reparse-symbol function_parameters) [6417 6422]))                          )
                        (reparse-symbol indented_block_body) [6392 6494])
                    ("user_call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6594 6598])
                            ("frame" variable nil (reparse-symbol function_parameters) [6600 6605])
                            ("argument_list" variable nil (reparse-symbol function_parameters) [6607 6620]))                          
                        :documentation "This method is called when there is the remote possibility
        that we ever need to stop in this function.")
                        (reparse-symbol indented_block_body) [6580 6761])
                    ("user_line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6780 6784])
                            ("frame" variable nil (reparse-symbol function_parameters) [6786 6791]))                          
                        :documentation "This method is called when we stop or break at this line.")
                        (reparse-symbol indented_block_body) [6766 6879])
                    ("user_return" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6900 6904])
                            ("frame" variable nil (reparse-symbol function_parameters) [6906 6911])
                            ("return_value" variable nil (reparse-symbol function_parameters) [6913 6925]))                          
                        :documentation "This method is called when a return trap is set here.")
                        (reparse-symbol indented_block_body) [6884 7009])
                    ("user_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7033 7037])
                            ("frame" variable nil (reparse-symbol function_parameters) [7039 7044])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [7046 7054]))                          
                        :documentation "This method is called if an exception occurs,
        but only if we are to stop at or just below this level.")
                        (reparse-symbol indented_block_body) [7014 7194])
                    ("_set_stopinfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7217 7221])
                            ("stopframe" variable nil (reparse-symbol function_parameters) [7223 7232])
                            ("returnframe" variable nil (reparse-symbol function_parameters) [7234 7245])
                            ("stoplineno" variable nil (reparse-symbol function_parameters) [7247 7257]))                          )
                        (reparse-symbol indented_block_body) [7199 7516])
                    ("set_until" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7637 7641])
                            ("frame" variable nil (reparse-symbol function_parameters) [7643 7648])
                            ("lineno" variable nil (reparse-symbol function_parameters) [7650 7656]))                          
                        :documentation "Stop when the line with the line no greater than the current one is
        reached or when returning from current frame")
                        (reparse-symbol indented_block_body) [7623 7963])
                    ("set_step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7981 7985]))                          
                        :documentation "Stop after one line of code.")
                        (reparse-symbol indented_block_body) [7968 8533])
                    ("set_next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8551 8555])
                            ("frame" variable nil (reparse-symbol function_parameters) [8557 8562]))                          
                        :documentation "Stop on the next line in or below the given frame.")
                        (reparse-symbol indented_block_body) [8538 8670])
                    ("set_return" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8690 8694])
                            ("frame" variable nil (reparse-symbol function_parameters) [8696 8701]))                          
                        :documentation "Stop when returning from the given frame.")
                        (reparse-symbol indented_block_body) [8675 8923])
                    ("set_trace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8942 8946])
                            ("frame" variable nil (reparse-symbol function_parameters) [8948 8953]))                          
                        :documentation "Start debugging from `frame`.

        If frame is not specified, debugging starts from caller's frame.
        ")
                        (reparse-symbol indented_block_body) [8928 9380])
                    ("set_continue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9402 9406]))                          )
                        (reparse-symbol indented_block_body) [9385 9810])
                    ("set_quit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9828 9832]))                          )
                        (reparse-symbol indented_block_body) [9815 9962])
                    ("set_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10358 10362])
                            ("filename" variable nil (reparse-symbol function_parameters) [10364 10372])
                            ("lineno" variable nil (reparse-symbol function_parameters) [10374 10380])
                            ("temporary" variable nil (reparse-symbol function_parameters) [10382 10391])
                            ("cond" variable nil (reparse-symbol function_parameters) [10399 10403])
                            ("funcname" variable nil (reparse-symbol function_parameters) [10428 10436]))                          )
                        (reparse-symbol indented_block_body) [10344 10864])
                    ("_prune_breaks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10887 10891])
                            ("filename" variable nil (reparse-symbol function_parameters) [10893 10901])
                            ("lineno" variable nil (reparse-symbol function_parameters) [10903 10909]))                          )
                        (reparse-symbol indented_block_body) [10869 11093])
                    ("clear_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11114 11118])
                            ("filename" variable nil (reparse-symbol function_parameters) [11120 11128])
                            ("lineno" variable nil (reparse-symbol function_parameters) [11130 11136]))                          )
                        (reparse-symbol indented_block_body) [11098 11644])
                    ("clear_bpbynumber" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11670 11674])
                            ("arg" variable nil (reparse-symbol function_parameters) [11676 11679]))                          )
                        (reparse-symbol indented_block_body) [11649 11866])
                    ("clear_all_file_breaks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11897 11901])
                            ("filename" variable nil (reparse-symbol function_parameters) [11903 11911]))                          )
                        (reparse-symbol indented_block_body) [11871 12249])
                    ("clear_all_breaks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12275 12279]))                          )
                        (reparse-symbol indented_block_body) [12254 12471])
                    ("get_bpbynumber" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12495 12499])
                            ("arg" variable nil (reparse-symbol function_parameters) [12501 12504]))                          )
                        (reparse-symbol indented_block_body) [12476 13001])
                    ("get_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13020 13024])
                            ("filename" variable nil (reparse-symbol function_parameters) [13026 13034])
                            ("lineno" variable nil (reparse-symbol function_parameters) [13036 13042]))                          )
                        (reparse-symbol indented_block_body) [13006 13176])
                    ("get_breaks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13196 13200])
                            ("filename" variable nil (reparse-symbol function_parameters) [13202 13210])
                            ("lineno" variable nil (reparse-symbol function_parameters) [13212 13218]))                          )
                        (reparse-symbol indented_block_body) [13181 13412])
                    ("get_file_breaks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13437 13441])
                            ("filename" variable nil (reparse-symbol function_parameters) [13443 13451]))                          )
                        (reparse-symbol indented_block_body) [13417 13609])
                    ("get_all_breaks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13633 13637]))                          )
                        (reparse-symbol indented_block_body) [13614 13667])
                    ("get_stack" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13809 13813])
                            ("f" variable nil (reparse-symbol function_parameters) [13815 13816])
                            ("t" variable nil (reparse-symbol function_parameters) [13818 13819]))                          )
                        (reparse-symbol indented_block_body) [13795 14305])
                    ("format_stack_entry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14333 14337])
                            ("frame_lineno" variable nil (reparse-symbol function_parameters) [14339 14351])
                            ("lprefix" variable nil (reparse-symbol function_parameters) [14353 14360]))                          )
                        (reparse-symbol indented_block_body) [14310 15153])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15338 15342])
                            ("cmd" variable nil (reparse-symbol function_parameters) [15344 15347])
                            ("globals" variable nil (reparse-symbol function_parameters) [15349 15356])
                            ("locals" variable nil (reparse-symbol function_parameters) [15363 15369]))                          )
                        (reparse-symbol indented_block_body) [15330 15850])
                    ("runeval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15867 15871])
                            ("expr" variable nil (reparse-symbol function_parameters) [15873 15877])
                            ("globals" variable nil (reparse-symbol function_parameters) [15879 15886])
                            ("locals" variable nil (reparse-symbol function_parameters) [15893 15899]))                          )
                        (reparse-symbol indented_block_body) [15855 16304])
                    ("runctx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16320 16324])
                            ("cmd" variable nil (reparse-symbol function_parameters) [16326 16329])
                            ("globals" variable nil (reparse-symbol function_parameters) [16331 16338])
                            ("locals" variable nil (reparse-symbol function_parameters) [16340 16346]))                          )
                        (reparse-symbol indented_block_body) [16309 16416])
                    ("runcall" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16500 16504])
                            ("func" variable nil (reparse-symbol function_parameters) [16506 16510])
                            ("args" variable nil (reparse-symbol function_parameters) [16512 16517])
                            ("kwds" variable nil (reparse-symbol function_parameters) [16519 16525]))                          )
                        (reparse-symbol indented_block_body) [16488 16802]))                  
                :type "class")
                nil [209 16802])
            ("set_trace" function nil nil [16804 16843])
            ("Breakpoint" type
               (:documentation "Breakpoint class.

    Implements temporary breakpoints, ignore counts, disabling and
    (re)-enabling, and conditionals.

    Breakpoints are indexed by number through bpbynumber and by
    the file,line tuple using bplist.  The former points to a
    single instance of class Breakpoint.  The latter points to a
    list of such instances since there may be more than one
    breakpoint per line.

    "
                :members 
                  ( ("next" variable nil (reparse-symbol indented_block_body) [17406 17414])
                    ("bplist" variable nil (reparse-symbol indented_block_body) [17451 17462])
                    ("bpbynumber" variable nil (reparse-symbol indented_block_body) [17505 17524])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [17770 17794])
                            ("self" variable nil (reparse-symbol indented_block_body) [17845 17883])
                            ("self" variable nil (reparse-symbol indented_block_body) [17892 17908])
                            ("self" variable nil (reparse-symbol indented_block_body) [17956 17972])
                            ("self" variable nil (reparse-symbol indented_block_body) [17981 18007])
                            ("self" variable nil (reparse-symbol indented_block_body) [18016 18032])
                            ("self" variable nil (reparse-symbol indented_block_body) [18041 18060])
                            ("self" variable nil (reparse-symbol indented_block_body) [18069 18084])
                            ("self" variable nil (reparse-symbol indented_block_body) [18093 18106])
                            ("self" variable nil (reparse-symbol indented_block_body) [18115 18144])
                            ("Breakpoint" variable nil (reparse-symbol indented_block_body) [18153 18173])
                            ("self" code nil (reparse-symbol indented_block_body) [18212 18240])
                            ("if" code nil (reparse-symbol indented_block_body) [18249 18389]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17700 17704])
                            ("file" variable nil (reparse-symbol function_parameters) [17706 17710])
                            ("line" variable nil (reparse-symbol function_parameters) [17712 17716])
                            ("temporary" variable nil (reparse-symbol function_parameters) [17718 17727])
                            ("cond" variable nil (reparse-symbol function_parameters) [17735 17739])
                            ("funcname" variable nil (reparse-symbol function_parameters) [17746 17754]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17687 18389])
                    ("deleteMe" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18407 18411]))                          )
                        (reparse-symbol indented_block_body) [18394 18673])
                    ("enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18689 18693]))                          )
                        (reparse-symbol indented_block_body) [18678 18724])
                    ("disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18741 18745]))                          )
                        (reparse-symbol indented_block_body) [18729 18777])
                    ("bpprint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18794 18798])
                            ("out" variable nil (reparse-symbol function_parameters) [18800 18803]))                          )
                        (reparse-symbol indented_block_body) [18782 18905])
                    ("bpformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18923 18927]))                          )
                        (reparse-symbol indented_block_body) [18910 19647])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19664 19668]))                          )
                        (reparse-symbol indented_block_body) [19652 19749]))                  
                :type "class")
                nil [16845 19749])
            ("checkfuncname" function
               (:documentation "Check whether we should break here because of `b.funcname`."
                :arguments 
                  ( ("b" variable nil (reparse-symbol function_parameters) [19816 19817])
                    ("frame" variable nil (reparse-symbol function_parameters) [19819 19824]))                  )
                nil [19798 20695])
            ("effective" function
               (:documentation "Determine which breakpoint for this file:line is to be acted upon.

    Called only if we know there is a bpt at this
    location.  Returns breakpoint that was triggered and a flag
    that indicates if it is ok to delete a temporary bp.

    "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [20832 20836])
                    ("line" variable nil (reparse-symbol function_parameters) [20838 20842])
                    ("frame" variable nil (reparse-symbol function_parameters) [20844 20849]))                  )
                nil [20818 22423])
            ("Tdb" type
               (:superclasses ("Bdb")
                :members 
                  ( ("user_call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22512 22516])
                            ("frame" variable nil (reparse-symbol function_parameters) [22518 22523])
                            ("args" variable nil (reparse-symbol function_parameters) [22525 22529]))                          )
                        (reparse-symbol indented_block_body) [22498 22640])
                    ("user_line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22658 22662])
                            ("frame" variable nil (reparse-symbol function_parameters) [22664 22669]))                          )
                        (reparse-symbol indented_block_body) [22644 22955])
                    ("user_return" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22975 22979])
                            ("frame" variable nil (reparse-symbol function_parameters) [22981 22986])
                            ("retval" variable nil (reparse-symbol function_parameters) [22988 22994]))                          )
                        (reparse-symbol indented_block_body) [22959 23033])
                    ("user_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23056 23060])
                            ("frame" variable nil (reparse-symbol function_parameters) [23062 23067])
                            ("exc_stuff" variable nil (reparse-symbol function_parameters) [23069 23078]))                          )
                        (reparse-symbol indented_block_body) [23037 23151]))                  
                :type "class")
                nil [22478 23151])
            ("foo" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [23160 23161]))              ) nil [23152 23237])
            ("bar" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [23246 23247]))              ) nil [23238 23291])
            ("test" function nil nil [23292 23355]))          
      :file "bdb.py"
      :pointmax 23355
      :fsize 23354
      :lastmodtime '(22333 27206 210105 884000)
      :unmatched-syntax '((INDENT_BLOCK 16719 . 16783) (NEWLINE 16718 . 16719) (COLON 16717 . 16718) (FINALLY 16710 . 16717) (INDENT_BLOCK 16240 . 16304) (NEWLINE 16239 . 16240) (COLON 16238 . 16239) (FINALLY 16231 . 16238) (INDENT_BLOCK 15786 . 15850) (NEWLINE 15785 . 15786) (COLON 15784 . 15785) (FINALLY 15777 . 15784) (INDENT_BLOCK 11771 . 11799) (NEWLINE 11770 . 11771) (COLON 11769 . 11770) (TRY 11690 . 11693) (AS 11763 . 11765) (NAME 488 . 492) (IF 510 . 512) (ELSE 518 . 522)))
    (semanticdb-table "dis.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Disassembler of Python byte code into mnemonics.\"\"\"" code nil nil [1 55])
            ("sys" include nil nil [57 67])
            ("types" include nil nil [68 80])
            ("collections" include nil nil [81 99])
            ("io" include nil nil [100 109])
            ("opcode" include nil nil [111 131])
            ("opcode" include nil nil [132 174])
            ("__all__" code nil nil [176 368])
            ("del" code nil nil [369 385])
            ("_have_code" variable nil nil [387 460])
            ("_try_compile" function
               (:documentation "Attempts to compile the given source, first as an expression and
       then as a statement if the first approach fails.

       Utility function to accept strings in functions that otherwise
       expect code objects
    "
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [479 485])
                    ("name" variable nil (reparse-symbol function_parameters) [487 491]))                  )
                nil [462 858])
            ("dis" function
               (:documentation "Disassemble classes, methods, functions, generators, or code.

    With no argument, disassemble the last traceback.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [867 868])
                    ("file" variable nil (reparse-symbol function_parameters) [878 882]))                  )
                nil [859 2077])
            ("distb" function
               (:documentation "Disassemble a traceback (default: last traceback)."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2088 2090])
                    ("file" variable nil (reparse-symbol function_parameters) [2100 2104]))                  )
                nil [2078 2441])
            ("COMPILER_FLAG_NAMES" variable nil nil [2620 2837])
            ("pretty_flags" function
               (:documentation "Return pretty representation of code flags."
                :arguments 
                  ( ("flags" variable nil (reparse-symbol function_parameters) [2856 2861]))                  )
                nil [2839 3214])
            ("_get_code_object" function
               (:documentation "Helper to handle methods, functions, generators, strings and raw code objects"
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [3236 3237]))                  )
                nil [3215 3776])
            ("code_info" function
               (:documentation "Formatted details of methods, functions, or code."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [3791 3792]))                  )
                nil [3777 3905])
            ("_format_code_info" function (:arguments 
              ( ("co" variable nil (reparse-symbol function_parameters) [3928 3930]))              ) nil [3906 5133])
            ("show_code" function
               (:documentation "Print details of methods, functions, or code to *file*.

    If *file* is not provided, the output is printed on stdout.
    "
                :arguments 
                  ( ("co" variable nil (reparse-symbol function_parameters) [5148 5150])
                    ("file" variable nil (reparse-symbol function_parameters) [5155 5159]))                  )
                nil [5134 5339])
            ("_Instruction" variable nil nil [5340 5468])
            ("Instruction" type
               (:documentation "Details for a bytecode operation

       Defined fields:
         opname - human readable name for operation
         opcode - numeric code for operation
         arg - numeric argument to operation (if any), otherwise None
         argval - resolved arg value (if known), otherwise same as arg
         argrepr - human readable description of operation argument
         offset - start index of operation within bytecode sequence
         starts_line - line started by this opcode (if any), otherwise None
         is_jump_target - True if other code jumps to here, otherwise False
    "
                :superclasses ("_Instruction")
                :members 
                  ( ("_disassemble" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6123 6127])
                            ("lineno_width" variable nil (reparse-symbol function_parameters) [6129 6141])
                            ("mark_as_current" variable nil (reparse-symbol function_parameters) [6145 6160]))                          
                        :documentation "Format instruction details for inclusion in disassembly output

        *lineno_width* sets the width of the line number field (0 omits it)
        *mark_as_current* inserts a '-->' marker arrow as part of the line
        ")
                        (reparse-symbol indented_block_body) [6106 7503]))                  
                :type "class")
                nil [5470 7503])
            ("get_instructions" function
               (:documentation "Iterator for the opcodes in methods, functions or code

    Generates a series of Instruction named tuples giving the details of
    each operations in the supplied code.

    If *first_line* is not None, it indicates the line number that should
    be reported for the first source line in the disassembled code.
    Otherwise, the source line information (if any) is taken directly from
    the disassembled code object.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7526 7527])
                    ("first_line" variable nil (reparse-symbol function_parameters) [7532 7542]))                  )
                nil [7505 8423])
            ("_get_const_info" function
               (:documentation "Helper to get optional details about const references

       Returns the dereferenced constant and its repr if the constant
       list is defined.
       Otherwise returns the constant index and its repr().
    "
                :arguments 
                  ( ("const_index" variable nil (reparse-symbol function_parameters) [8444 8455])
                    ("const_list" variable nil (reparse-symbol function_parameters) [8457 8467]))                  )
                nil [8424 8823])
            ("_get_name_info" function
               (:documentation "Helper to get optional details about named references

       Returns the dereferenced name as both value and repr if the name
       list is defined.
       Otherwise returns the name index and its repr().
    "
                :arguments 
                  ( ("name_index" variable nil (reparse-symbol function_parameters) [8843 8853])
                    ("name_list" variable nil (reparse-symbol function_parameters) [8855 8864]))                  )
                nil [8824 9275])
            ("_get_instructions_bytes" function
               (:documentation "Iterate over the instructions in a bytecode string.

    Generates a sequence of Instruction namedtuples giving the details of each
    opcode.  Additional information about the code's runtime environment
    (e.g. variable names, constants) can be specified using optional
    arguments.

    "
                :arguments 
                  ( ("code" variable nil (reparse-symbol function_parameters) [9305 9309])
                    ("varnames" variable nil (reparse-symbol function_parameters) [9311 9319])
                    ("names" variable nil (reparse-symbol function_parameters) [9326 9331])
                    ("constants" variable nil (reparse-symbol function_parameters) [9338 9347])
                    ("cells" variable nil (reparse-symbol function_parameters) [9376 9381])
                    ("linestarts" variable nil (reparse-symbol function_parameters) [9388 9398])
                    ("line_offset" variable nil (reparse-symbol function_parameters) [9405 9416]))                  )
                nil [9277 11692])
            ("disassemble" function
               (:documentation "Disassemble a code object."
                :arguments 
                  ( ("co" variable nil (reparse-symbol function_parameters) [11709 11711])
                    ("lasti" variable nil (reparse-symbol function_parameters) [11713 11718])
                    ("file" variable nil (reparse-symbol function_parameters) [11726 11730]))                  )
                nil [11693 12009])
            ("_disassemble_bytes" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [12033 12037])
                ("lasti" variable nil (reparse-symbol function_parameters) [12039 12044])
                ("varnames" variable nil (reparse-symbol function_parameters) [12049 12057])
                ("names" variable nil (reparse-symbol function_parameters) [12064 12069])
                ("constants" variable nil (reparse-symbol function_parameters) [12099 12108])
                ("cells" variable nil (reparse-symbol function_parameters) [12115 12120])
                ("linestarts" variable nil (reparse-symbol function_parameters) [12127 12137])
                ("file" variable nil (reparse-symbol function_parameters) [12170 12174])
                ("line_offset" variable nil (reparse-symbol function_parameters) [12181 12192]))              ) nil [12010 12960])
            ("_disassemble_str" function
               (:documentation "Compile the source string, then disassemble the code object."
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [12982 12988])
                    ("file" variable nil (reparse-symbol function_parameters) [12993 12997]))                  )
                nil [12961 13134])
            ("disco" variable nil nil [13135 13154])
            ("findlabels" function
               (:documentation "Detect all offsets in a byte code which are jump targets.

    Return the list of offsets.

    "
                :arguments 
                  ( ("code" variable nil (reparse-symbol function_parameters) [13225 13229]))                  )
                nil [13210 13921])
            ("findlinestarts" function
               (:documentation "Find the offsets in a byte code which are start of lines in the source.

    Generate pairs (offset, lineno) as described in Python/compile.c.

    "
                :arguments 
                  ( ("code" variable nil (reparse-symbol function_parameters) [13941 13945]))                  )
                nil [13922 14593])
            ("Bytecode" type
               (:documentation "The bytecode operations of a piece of code

    Instantiate this with a function, method, string of code, or a code object
    (as returned by compile()).

    Iterating over this yields the bytecode operations as Instruction instances.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [14938 14977])
                            ("if" code nil (reparse-symbol indented_block_body) [14986 15209])
                            ("self" code nil (reparse-symbol indented_block_body) [15217 15267])
                            ("self" variable nil (reparse-symbol indented_block_body) [15276 15319])
                            ("self" variable nil (reparse-symbol indented_block_body) [15328 15353])
                            ("self" variable nil (reparse-symbol indented_block_body) [15362 15398]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14879 14883])
                            ("x" variable nil (reparse-symbol function_parameters) [14885 14886])
                            ("first_line" variable nil (reparse-symbol function_parameters) [14891 14901])
                            ("current_offset" variable nil (reparse-symbol function_parameters) [14908 14922]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14866 15399])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15417 15421]))                          )
                        (reparse-symbol indented_block_body) [15404 15728])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15746 15750]))                          )
                        (reparse-symbol indented_block_body) [15733 15867])
                    ("from_traceback" function
                       (:documentation " Construct a Bytecode from the given traceback "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [15908 15911])
                            ("tb" variable nil (reparse-symbol function_parameters) [15913 15915]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15872 16101])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16115 16119]))                          
                        :documentation "Return formatted information about the code object.")
                        (reparse-symbol indented_block_body) [16106 16235])
                    ("dis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16248 16252]))                          
                        :documentation "Return a formatted view of the bytecode operations.")
                        (reparse-symbol indented_block_body) [16240 16953]))                  
                :type "class")
                nil [14594 16953])
            ("_test" function (:documentation "Simple test program to disassemble a file.") nil [16955 17326])
            ("if" code nil nil [17327 17366]))          
      :file "dis.py"
      :pointmax 17366
      :fsize 17365
      :lastmodtime '(22333 27206 254105 883000)
      :unmatched-syntax '((MULT 14888 . 14889) (COMMA 14889 . 14890) (MULT 12990 . 12991) (COMMA 12991 . 12992) (NAME 12387 . 12399) (IF 12404 . 12406) (ELSE 12419 . 12423) (MULT 12167 . 12168) (COMMA 12168 . 12169) (MULT 11723 . 11724) (COMMA 11724 . 11725) (MULT 7529 . 7530) (COMMA 7530 . 7531) (MULT 5152 . 5153) (COMMA 5153 . 5154) (MULT 2097 . 2098) (COMMA 2098 . 2099) (INDENT_BLOCK 1606 . 1658) (NEWLINE 1605 . 1606) (COLON 1604 . 1605) (TRY 1521 . 1524) (AS 1598 . 1600) (MULT 875 . 876) (COMMA 876 . 877)))
    (semanticdb-table "code.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Utilities needed to emulate Python's interactive interpreter.

\"\"\"" code nil nil [1 70])
            ("sys" include nil nil [134 144])
            ("traceback" include nil nil [145 161])
            ("argparse" include nil nil [162 177])
            ("codeop" include nil nil [178 229])
            ("__all__" variable nil nil [231 331])
            ("InteractiveInterpreter" type
               (:documentation "Base class for InteractiveConsole.

    This class deals with parsing and interpreter state (the user's
    namespace); it doesn't deal with input buffering or prompting or
    input file naming (the filename is always passed in explicitly).

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Constructor.

        The optional 'locals' argument specifies the dictionary in
        which code will be executed; it defaults to a newly created
        dictionary with key \"__name__\" set to \"__console__\" and key
        \"__doc__\" set to None.

        \"\"\"" code nil (reparse-symbol indented_block_body) [667 930])
                            ("if" code nil (reparse-symbol indented_block_body) [939 1024])
                            ("self" variable nil (reparse-symbol indented_block_body) [1032 1052])
                            ("self" variable nil (reparse-symbol indented_block_body) [1061 1093]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [639 643])
                            ("locals" variable nil (reparse-symbol function_parameters) [645 651]))                          
                        :documentation "Constructor.

        The optional 'locals' argument specifies the dictionary in
        which code will be executed; it defaults to a newly created
        dictionary with key \"__name__\" set to \"__console__\" and key
        \"__doc__\" set to None.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [626 1094])
                    ("runsource" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1113 1117])
                            ("source" variable nil (reparse-symbol function_parameters) [1119 1125])
                            ("filename" variable nil (reparse-symbol function_parameters) [1127 1135])
                            ("symbol" variable nil (reparse-symbol function_parameters) [1147 1153]))                          
                        :documentation "Compile and run some source in the interpreter.

        Arguments are as for compile_command().

        One several things can happen:

        1) The input is incorrect; compile_command() raised an
        exception (SyntaxError or OverflowError).  A syntax traceback
        will be printed by calling the showsyntaxerror() method.

        2) The input is incomplete, and more input is required;
        compile_command() returned None.  Nothing happens.

        3) The input is complete; compile_command() returned a code
        object.  The code is executed by calling self.runcode() (which
        also handles run-time exceptions, except for SystemExit).

        The return value is True in case 2, False in the other cases (unless
        an exception is raised).  The return value can be used to
        decide whether to use sys.ps1 or sys.ps2 to prompt the next
        line.

        ")
                        (reparse-symbol indented_block_body) [1099 2435])
                    ("runcode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2452 2456])
                            ("code" variable nil (reparse-symbol function_parameters) [2458 2462]))                          
                        :documentation "Execute a code object.

        When an exception occurs, self.showtraceback() is called to
        display a traceback.  All exceptions are caught except
        SystemExit, which is reraised.

        A note about KeyboardInterrupt: this exception may occur
        elsewhere in this code, and may not always be caught.  The
        caller should be prepared to deal with it.

        ")
                        (reparse-symbol indented_block_body) [2440 3010])
                    ("showsyntaxerror" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3035 3039])
                            ("filename" variable nil (reparse-symbol function_parameters) [3041 3049]))                          
                        :documentation "Display the syntax error that just occurred.

        This doesn't display a stack trace because there isn't one.

        If a filename is given, it is stuffed in the exception instead
        of what was there before (because Python's parser always uses
        \"<string>\" when reading from a string).

        The output is written by self.write(), below.

        ")
                        (reparse-symbol indented_block_body) [3015 4386])
                    ("showtraceback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4409 4413]))                          
                        :documentation "Display the exception that just occurred.

        We remove the first stack item because it is our own code.

        The output is written by self.write(), below.

        ")
                        (reparse-symbol indented_block_body) [4391 5134])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5149 5153])
                            ("data" variable nil (reparse-symbol function_parameters) [5155 5159]))                          
                        :documentation "Write a string.

        The base implementation writes to sys.stderr; a subclass may
        replace this with a different implementation.

        ")
                        (reparse-symbol indented_block_body) [5139 5357]))                  
                :type "class")
                nil [333 5357])
            ("InteractiveConsole" type
               (:documentation "Closely emulate the behavior of the interactive Python interpreter.

    This class builds on InteractiveInterpreter and adds prompting
    using the familiar sys.ps1 and sys.ps2, and input buffering.

    "
                :superclasses ("InteractiveInterpreter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Constructor.

        The optional locals argument will be passed to the
        InteractiveInterpreter base class.

        The optional filename argument should specify the (file)name
        of the input stream; it will show up in tracebacks.

        \"\"\"" code nil (reparse-symbol indented_block_body) [5694 5955])
                            ("InteractiveInterpreter" code nil (reparse-symbol indented_block_body) [5964 6009])
                            ("self" variable nil (reparse-symbol indented_block_body) [6018 6042])
                            ("self" code nil (reparse-symbol indented_block_body) [6051 6069]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5644 5648])
                            ("locals" variable nil (reparse-symbol function_parameters) [5650 5656])
                            ("filename" variable nil (reparse-symbol function_parameters) [5663 5671]))                          
                        :documentation "Constructor.

        The optional locals argument will be passed to the
        InteractiveInterpreter base class.

        The optional filename argument should specify the (file)name
        of the input stream; it will show up in tracebacks.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5631 6070])
                    ("resetbuffer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6091 6095]))                          
                        :documentation "Reset the input buffer.")
                        (reparse-symbol indented_block_body) [6075 6161])
                    ("interact" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6179 6183])
                            ("banner" variable nil (reparse-symbol function_parameters) [6185 6191]))                          
                        :documentation "Closely emulate the interactive Python console.

        The optional banner argument specifies the banner to print
        before the first interaction; by default it prints a banner
        similar to the one printed by the real Python interpreter,
        followed by the current class name in parentheses (so as not
        to confuse this with the real interpreter -- since it's so
        close!).

        ")
                        (reparse-symbol indented_block_body) [6166 7710])
                    ("push" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7724 7728])
                            ("line" variable nil (reparse-symbol function_parameters) [7730 7734]))                          
                        :documentation "Push a line to the interpreter.

        The line should not have a trailing newline; it may have
        internal newlines.  The line is appended to a buffer and the
        interpreter's runsource() method is called with the
        concatenated contents of the buffer as source.  If this
        indicates that the command was executed or invalid, the buffer
        is reset; otherwise, the command is incomplete, and the buffer
        is left as it was after the line was appended.  The return
        value is 1 if more input is required, 0 if the line was dealt
        with in some way (this is the same as runsource()).

        ")
                        (reparse-symbol indented_block_body) [7715 8589])
                    ("raw_input" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8608 8612])
                            ("prompt" variable nil (reparse-symbol function_parameters) [8614 8620]))                          
                        :documentation "Write a prompt and read a line.

        The returned line does not include the trailing newline.
        When the user enters the EOF key sequence, EOFError is raised.

        The base implementation uses the built-in function
        input(); a subclass may replace this with a different
        implementation.

        ")
                        (reparse-symbol indented_block_body) [8594 8994]))                  
                :type "class")
                nil [5359 8994])
            ("interact" function
               (:documentation "Closely emulate the interactive Python interpreter.

    This is a backwards compatible interface to the InteractiveConsole
    class.  When readfunc is not specified, it attempts to import the
    readline module to enable GNU readline if it is available.

    Arguments (all optional, all default to None):

    banner -- passed to InteractiveConsole.interact()
    readfunc -- if not None, replaces InteractiveConsole.raw_input()
    local -- passed to InteractiveInterpreter.__init__()

    "
                :arguments 
                  ( ("banner" variable nil (reparse-symbol function_parameters) [9010 9016])
                    ("readfunc" variable nil (reparse-symbol function_parameters) [9023 9031])
                    ("local" variable nil (reparse-symbol function_parameters) [9038 9043]))                  )
                nil [8997 9788])
            ("if" code nil nil [9790 10119]))          
      :file "code.py"
      :pointmax 10119
      :fsize 10118
      :lastmodtime '(22333 27206 226105 883000)
      :unmatched-syntax nil)
    (semanticdb-table "glob.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Filename globbing utility.\"\"\"" code nil nil [1 33])
            ("os" include nil nil [35 44])
            ("re" include nil nil [45 54])
            ("fnmatch" include nil nil [55 69])
            ("__all__" variable nil nil [71 108])
            ("glob" function
               (:documentation "Return a list of paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la
    fnmatch. However, unlike fnmatch, filenames starting with a
    dot are special cases that are not matched by '*' and '?'
    patterns.

    If recursive is true, the pattern '**' will match any files and
    zero or more directories and subdirectories.
    "
                :arguments 
                  ( ("pathname" variable nil (reparse-symbol function_parameters) [119 127])
                    ("recursive" variable nil (reparse-symbol function_parameters) [132 141]))                  )
                nil [110 592])
            ("iglob" function
               (:documentation "Return an iterator which yields the paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la
    fnmatch. However, unlike fnmatch, filenames starting with a
    dot are special cases that are not matched by '*' and '?'
    patterns.

    If recursive is true, the pattern '**' will match any files and
    zero or more directories and subdirectories.
    "
                :arguments 
                  ( ("pathname" variable nil (reparse-symbol function_parameters) [603 611])
                    ("recursive" variable nil (reparse-symbol function_parameters) [616 625]))                  )
                nil [593 1200])
            ("_iglob" function (:arguments 
              ( ("pathname" variable nil (reparse-symbol function_parameters) [1212 1220])
                ("recursive" variable nil (reparse-symbol function_parameters) [1222 1231]))              ) nil [1201 2423])
            ("glob1" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [2658 2665])
                ("pattern" variable nil (reparse-symbol function_parameters) [2667 2674]))              ) nil [2648 3041])
            ("glob0" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [3052 3059])
                ("basename" variable nil (reparse-symbol function_parameters) [3061 3069]))              ) nil [3042 3421])
            ("glob2" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [3524 3531])
                ("pattern" variable nil (reparse-symbol function_parameters) [3533 3540]))              ) nil [3514 3632])
            ("_rlistdir" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [3715 3722]))              ) nil [3701 4169])
            ("magic_check" variable nil nil [4171 4206])
            ("magic_check_bytes" variable nil nil [4207 4249])
            ("has_magic" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [4265 4266]))              ) nil [4251 4419])
            ("_ishidden" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [4434 4438]))              ) nil [4420 4478])
            ("_isrecursive" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [4496 4503]))              ) nil [4479 4614])
            ("escape" function
               (:documentation "Escape all special characters.
    "
                :arguments 
                  ( ("pathname" variable nil (reparse-symbol function_parameters) [4626 4634]))                  )
                nil [4615 5073]))          
      :file "glob.py"
      :pointmax 5073
      :fsize 5072
      :lastmodtime '(22333 27206 286105 882000)
      :unmatched-syntax '((NAME 4040 . 4044) (IF 4072 . 4074) (ELSE 4083 . 4087) (MULT 613 . 614) (COMMA 614 . 615) (MULT 129 . 130) (COMMA 130 . 131)))
    (semanticdb-table "pprint.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Support to pretty-print lists, tuples, & dictionaries recursively.

Very simple, but useful, especially in debugging data structures.

Classes
-------

PrettyPrinter()
    Handle pretty-printing operations onto a stream using a configured
    set of formatting parameters.

Functions
---------

pformat()
    Format a Python object into a pretty-printed representation.

pprint()
    Pretty-print a Python object to a stream [default is sys.stdout].

saferepr()
    Generate a 'standard' repr()-like value, but protect against recursive
    data structures.

\"\"\"" code nil nil [489 1054])
            ("collections" include nil nil [1056 1090])
            ("re" include nil nil [1091 1100])
            ("sys" include nil nil [1101 1119])
            ("types" include nil nil [1120 1142])
            ("io" include nil nil [1143 1179])
            ("__all__" variable nil nil [1181 1277])
            ("pprint" function
               (:documentation "Pretty-print a Python object to a stream [default is sys.stdout]."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1291 1297])
                    ("stream" variable nil (reparse-symbol function_parameters) [1299 1305])
                    ("indent" variable nil (reparse-symbol function_parameters) [1312 1318])
                    ("width" variable nil (reparse-symbol function_parameters) [1322 1327])
                    ("depth" variable nil (reparse-symbol function_parameters) [1332 1337])
                    ("compact" variable nil (reparse-symbol function_parameters) [1358 1365]))                  )
                nil [1280 1595])
            ("pformat" function
               (:documentation "Format a Python object into a pretty-printed representation."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1608 1614])
                    ("indent" variable nil (reparse-symbol function_parameters) [1616 1622])
                    ("width" variable nil (reparse-symbol function_parameters) [1626 1631])
                    ("depth" variable nil (reparse-symbol function_parameters) [1636 1641])
                    ("compact" variable nil (reparse-symbol function_parameters) [1651 1658]))                  )
                nil [1596 1862])
            ("saferepr" function
               (:documentation "Version of repr() which can handle recursive data structures."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1876 1882]))                  )
                nil [1863 2003])
            ("isreadable" function
               (:documentation "Determine if saferepr(object) is readable by eval()."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2019 2025]))                  )
                nil [2004 2137])
            ("isrecursive" function
               (:documentation "Determine if object requires a recursive representation."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2154 2160]))                  )
                nil [2138 2276])
            ("_safe_key" type
               (:documentation "Helper function for key functions when sorting unorderable objects.

    The wrapped-object will fallback to an Py2.x style comparison for
    unorderable types (sorting first comparing the type name and then by
    the obj ids).  Does not work recursively, so dict.items() must have
    _safe_key applied to both the key and the value.

    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [2652 2671])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2710 2724]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2690 2694])
                            ("obj" variable nil (reparse-symbol function_parameters) [2696 2699]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2677 2725])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2741 2745])
                            ("other" variable nil (reparse-symbol function_parameters) [2747 2752]))                          )
                        (reparse-symbol indented_block_body) [2730 2953]))                  
                :type "class")
                nil [2277 2953])
            ("_safe_tuple" function (:arguments 
              ( ("t" variable nil (reparse-symbol function_parameters) [2970 2971]))              ) nil [2954 3063])
            ("PrettyPrinter" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Handle pretty printing operations onto a stream using a set of
        configured parameters.

        indent
            Number of spaces to indent for each level of nesting.

        width
            Attempted maximum number of columns in the output.

        depth
            The maximum depth to print out nested structures.

        stream
            The desired output stream.  If omitted (or false), the standard
            output stream available at construction will be used.

        compact
            If true, several items will be combined in one line.

        \"\"\"" code nil (reparse-symbol indented_block_body) [3197 3783])
                            ("indent" variable nil (reparse-symbol indented_block_body) [3792 3812])
                            ("width" variable nil (reparse-symbol indented_block_body) [3821 3839])
                            ("if" code nil (reparse-symbol indented_block_body) [3848 3915])
                            ("if" code nil (reparse-symbol indented_block_body) [3923 4010])
                            ("if" code nil (reparse-symbol indented_block_body) [4018 4083])
                            ("self" variable nil (reparse-symbol indented_block_body) [4091 4110])
                            ("self" variable nil (reparse-symbol indented_block_body) [4119 4150])
                            ("self" variable nil (reparse-symbol indented_block_body) [4159 4178])
                            ("if" code nil (reparse-symbol indented_block_body) [4187 4297])
                            ("self" variable nil (reparse-symbol indented_block_body) [4305 4334]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3102 3106])
                            ("indent" variable nil (reparse-symbol function_parameters) [3108 3114])
                            ("width" variable nil (reparse-symbol function_parameters) [3118 3123])
                            ("depth" variable nil (reparse-symbol function_parameters) [3128 3133])
                            ("stream" variable nil (reparse-symbol function_parameters) [3140 3146])
                            ("compact" variable nil (reparse-symbol function_parameters) [3173 3180]))                          
                        :documentation "Handle pretty printing operations onto a stream using a set of
        configured parameters.

        indent
            Number of spaces to indent for each level of nesting.

        width
            Attempted maximum number of columns in the output.

        depth
            The maximum depth to print out nested structures.

        stream
            The desired output stream.  If omitted (or false), the standard
            output stream available at construction will be used.

        compact
            If true, several items will be combined in one line.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3089 4335])
                    ("pprint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4351 4355])
                            ("object" variable nil (reparse-symbol function_parameters) [4357 4363]))                          )
                        (reparse-symbol indented_block_body) [4340 4455])
                    ("pformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4472 4476])
                            ("object" variable nil (reparse-symbol function_parameters) [4478 4484]))                          )
                        (reparse-symbol indented_block_body) [4460 4590])
                    ("isrecursive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4611 4615])
                            ("object" variable nil (reparse-symbol function_parameters) [4617 4623]))                          )
                        (reparse-symbol indented_block_body) [4595 4674])
                    ("isreadable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4694 4698])
                            ("object" variable nil (reparse-symbol function_parameters) [4700 4706]))                          )
                        (reparse-symbol indented_block_body) [4679 4814])
                    ("_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4831 4835])
                            ("object" variable nil (reparse-symbol function_parameters) [4837 4843])
                            ("stream" variable nil (reparse-symbol function_parameters) [4845 4851])
                            ("indent" variable nil (reparse-symbol function_parameters) [4853 4859])
                            ("allowance" variable nil (reparse-symbol function_parameters) [4861 4870])
                            ("context" variable nil (reparse-symbol function_parameters) [4872 4879])
                            ("level" variable nil (reparse-symbol function_parameters) [4881 4886]))                          )
                        (reparse-symbol indented_block_body) [4819 5765])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [5770 5784])
                    ("_pprint_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5807 5811])
                            ("object" variable nil (reparse-symbol function_parameters) [5813 5819])
                            ("stream" variable nil (reparse-symbol function_parameters) [5821 5827])
                            ("indent" variable nil (reparse-symbol function_parameters) [5829 5835])
                            ("allowance" variable nil (reparse-symbol function_parameters) [5837 5846])
                            ("context" variable nil (reparse-symbol function_parameters) [5848 5855])
                            ("level" variable nil (reparse-symbol function_parameters) [5857 5862]))                          )
                        (reparse-symbol indented_block_body) [5790 6259])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [6264 6303])
                    ("_pprint_ordered_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6334 6338])
                            ("object" variable nil (reparse-symbol function_parameters) [6340 6346])
                            ("stream" variable nil (reparse-symbol function_parameters) [6348 6354])
                            ("indent" variable nil (reparse-symbol function_parameters) [6356 6362])
                            ("allowance" variable nil (reparse-symbol function_parameters) [6364 6373])
                            ("context" variable nil (reparse-symbol function_parameters) [6375 6382])
                            ("level" variable nil (reparse-symbol function_parameters) [6384 6389]))                          )
                        (reparse-symbol indented_block_body) [6309 6732])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [6737 6804])
                    ("_pprint_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6827 6831])
                            ("object" variable nil (reparse-symbol function_parameters) [6833 6839])
                            ("stream" variable nil (reparse-symbol function_parameters) [6841 6847])
                            ("indent" variable nil (reparse-symbol function_parameters) [6849 6855])
                            ("allowance" variable nil (reparse-symbol function_parameters) [6857 6866])
                            ("context" variable nil (reparse-symbol function_parameters) [6868 6875])
                            ("level" variable nil (reparse-symbol function_parameters) [6877 6882]))                          )
                        (reparse-symbol indented_block_body) [6810 7046])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [7051 7090])
                    ("_pprint_tuple" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7114 7118])
                            ("object" variable nil (reparse-symbol function_parameters) [7120 7126])
                            ("stream" variable nil (reparse-symbol function_parameters) [7128 7134])
                            ("indent" variable nil (reparse-symbol function_parameters) [7136 7142])
                            ("allowance" variable nil (reparse-symbol function_parameters) [7144 7153])
                            ("context" variable nil (reparse-symbol function_parameters) [7155 7162])
                            ("level" variable nil (reparse-symbol function_parameters) [7164 7169]))                          )
                        (reparse-symbol indented_block_body) [7096 7400])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [7405 7446])
                    ("_pprint_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7468 7472])
                            ("object" variable nil (reparse-symbol function_parameters) [7474 7480])
                            ("stream" variable nil (reparse-symbol function_parameters) [7482 7488])
                            ("indent" variable nil (reparse-symbol function_parameters) [7490 7496])
                            ("allowance" variable nil (reparse-symbol function_parameters) [7498 7507])
                            ("context" variable nil (reparse-symbol function_parameters) [7509 7516])
                            ("level" variable nil (reparse-symbol function_parameters) [7518 7523]))                          )
                        (reparse-symbol indented_block_body) [7452 8050])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [8055 8092])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [8097 8140])
                    ("_pprint_str" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8162 8166])
                            ("object" variable nil (reparse-symbol function_parameters) [8168 8174])
                            ("stream" variable nil (reparse-symbol function_parameters) [8176 8182])
                            ("indent" variable nil (reparse-symbol function_parameters) [8184 8190])
                            ("allowance" variable nil (reparse-symbol function_parameters) [8192 8201])
                            ("context" variable nil (reparse-symbol function_parameters) [8203 8210])
                            ("level" variable nil (reparse-symbol function_parameters) [8212 8217]))                          )
                        (reparse-symbol indented_block_body) [8146 9898])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [9903 9940])
                    ("_pprint_bytes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9964 9968])
                            ("object" variable nil (reparse-symbol function_parameters) [9970 9976])
                            ("stream" variable nil (reparse-symbol function_parameters) [9978 9984])
                            ("indent" variable nil (reparse-symbol function_parameters) [9986 9992])
                            ("allowance" variable nil (reparse-symbol function_parameters) [9994 10003])
                            ("context" variable nil (reparse-symbol function_parameters) [10005 10012])
                            ("level" variable nil (reparse-symbol function_parameters) [10014 10019]))                          )
                        (reparse-symbol indented_block_body) [9946 10507])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [10512 10553])
                    ("_pprint_bytearray" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10581 10585])
                            ("object" variable nil (reparse-symbol function_parameters) [10587 10593])
                            ("stream" variable nil (reparse-symbol function_parameters) [10595 10601])
                            ("indent" variable nil (reparse-symbol function_parameters) [10603 10609])
                            ("allowance" variable nil (reparse-symbol function_parameters) [10611 10620])
                            ("context" variable nil (reparse-symbol function_parameters) [10622 10629])
                            ("level" variable nil (reparse-symbol function_parameters) [10631 10636]))                          )
                        (reparse-symbol indented_block_body) [10559 10840])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [10845 10894])
                    ("_pprint_mappingproxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10925 10929])
                            ("object" variable nil (reparse-symbol function_parameters) [10931 10937])
                            ("stream" variable nil (reparse-symbol function_parameters) [10939 10945])
                            ("indent" variable nil (reparse-symbol function_parameters) [10947 10953])
                            ("allowance" variable nil (reparse-symbol function_parameters) [10955 10964])
                            ("context" variable nil (reparse-symbol function_parameters) [10966 10973])
                            ("level" variable nil (reparse-symbol function_parameters) [10975 10980]))                          )
                        (reparse-symbol indented_block_body) [10900 11156])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [11161 11227])
                    ("_format_dict_items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11256 11260])
                            ("items" variable nil (reparse-symbol function_parameters) [11262 11267])
                            ("stream" variable nil (reparse-symbol function_parameters) [11269 11275])
                            ("indent" variable nil (reparse-symbol function_parameters) [11277 11283])
                            ("allowance" variable nil (reparse-symbol function_parameters) [11285 11294])
                            ("context" variable nil (reparse-symbol function_parameters) [11296 11303])
                            ("level" variable nil (reparse-symbol function_parameters) [11332 11337]))                          )
                        (reparse-symbol indented_block_body) [11233 11873])
                    ("_format_items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11896 11900])
                            ("items" variable nil (reparse-symbol function_parameters) [11902 11907])
                            ("stream" variable nil (reparse-symbol function_parameters) [11909 11915])
                            ("indent" variable nil (reparse-symbol function_parameters) [11917 11923])
                            ("allowance" variable nil (reparse-symbol function_parameters) [11925 11934])
                            ("context" variable nil (reparse-symbol function_parameters) [11936 11943])
                            ("level" variable nil (reparse-symbol function_parameters) [11945 11950]))                          )
                        (reparse-symbol indented_block_body) [11878 13241])
                    ("_repr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13256 13260])
                            ("object" variable nil (reparse-symbol function_parameters) [13262 13268])
                            ("context" variable nil (reparse-symbol function_parameters) [13270 13277])
                            ("level" variable nil (reparse-symbol function_parameters) [13279 13284]))                          )
                        (reparse-symbol indented_block_body) [13246 13564])
                    ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13580 13584])
                            ("object" variable nil (reparse-symbol function_parameters) [13586 13592])
                            ("context" variable nil (reparse-symbol function_parameters) [13594 13601])
                            ("maxlevels" variable nil (reparse-symbol function_parameters) [13603 13612])
                            ("level" variable nil (reparse-symbol function_parameters) [13614 13619]))                          
                        :documentation "Format object for a specific context, returning a string
        and flags indicating whether the representation is 'readable'
        and whether the object represents a recursive construct.
        ")
                        (reparse-symbol indented_block_body) [13569 13898])
                    ("_pprint_default_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13928 13932])
                            ("object" variable nil (reparse-symbol function_parameters) [13934 13940])
                            ("stream" variable nil (reparse-symbol function_parameters) [13942 13948])
                            ("indent" variable nil (reparse-symbol function_parameters) [13950 13956])
                            ("allowance" variable nil (reparse-symbol function_parameters) [13958 13967])
                            ("context" variable nil (reparse-symbol function_parameters) [13969 13976])
                            ("level" variable nil (reparse-symbol function_parameters) [13978 13983]))                          )
                        (reparse-symbol indented_block_body) [13903 14386])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [14391 14458])
                    ("_pprint_counter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14484 14488])
                            ("object" variable nil (reparse-symbol function_parameters) [14490 14496])
                            ("stream" variable nil (reparse-symbol function_parameters) [14498 14504])
                            ("indent" variable nil (reparse-symbol function_parameters) [14506 14512])
                            ("allowance" variable nil (reparse-symbol function_parameters) [14514 14523])
                            ("context" variable nil (reparse-symbol function_parameters) [14525 14532])
                            ("level" variable nil (reparse-symbol function_parameters) [14534 14539]))                          )
                        (reparse-symbol indented_block_body) [14464 15039])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [15044 15102])
                    ("_pprint_chain_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15130 15134])
                            ("object" variable nil (reparse-symbol function_parameters) [15136 15142])
                            ("stream" variable nil (reparse-symbol function_parameters) [15144 15150])
                            ("indent" variable nil (reparse-symbol function_parameters) [15152 15158])
                            ("allowance" variable nil (reparse-symbol function_parameters) [15160 15169])
                            ("context" variable nil (reparse-symbol function_parameters) [15171 15178])
                            ("level" variable nil (reparse-symbol function_parameters) [15180 15185]))                          )
                        (reparse-symbol indented_block_body) [15108 15726])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [15731 15792])
                    ("_pprint_deque" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15816 15820])
                            ("object" variable nil (reparse-symbol function_parameters) [15822 15828])
                            ("stream" variable nil (reparse-symbol function_parameters) [15830 15836])
                            ("indent" variable nil (reparse-symbol function_parameters) [15838 15844])
                            ("allowance" variable nil (reparse-symbol function_parameters) [15846 15855])
                            ("context" variable nil (reparse-symbol function_parameters) [15857 15864])
                            ("level" variable nil (reparse-symbol function_parameters) [15866 15871]))                          )
                        (reparse-symbol indented_block_body) [15798 16526])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [16531 16585])
                    ("_pprint_user_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16613 16617])
                            ("object" variable nil (reparse-symbol function_parameters) [16619 16625])
                            ("stream" variable nil (reparse-symbol function_parameters) [16627 16633])
                            ("indent" variable nil (reparse-symbol function_parameters) [16635 16641])
                            ("allowance" variable nil (reparse-symbol function_parameters) [16643 16652])
                            ("context" variable nil (reparse-symbol function_parameters) [16654 16661])
                            ("level" variable nil (reparse-symbol function_parameters) [16663 16668]))                          )
                        (reparse-symbol indented_block_body) [16591 16752])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [16757 16818])
                    ("_pprint_user_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16846 16850])
                            ("object" variable nil (reparse-symbol function_parameters) [16852 16858])
                            ("stream" variable nil (reparse-symbol function_parameters) [16860 16866])
                            ("indent" variable nil (reparse-symbol function_parameters) [16868 16874])
                            ("allowance" variable nil (reparse-symbol function_parameters) [16876 16885])
                            ("context" variable nil (reparse-symbol function_parameters) [16887 16894])
                            ("level" variable nil (reparse-symbol function_parameters) [16896 16901]))                          )
                        (reparse-symbol indented_block_body) [16824 16985])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [16990 17051])
                    ("_pprint_user_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17081 17085])
                            ("object" variable nil (reparse-symbol function_parameters) [17087 17093])
                            ("stream" variable nil (reparse-symbol function_parameters) [17095 17101])
                            ("indent" variable nil (reparse-symbol function_parameters) [17103 17109])
                            ("allowance" variable nil (reparse-symbol function_parameters) [17111 17120])
                            ("context" variable nil (reparse-symbol function_parameters) [17122 17129])
                            ("level" variable nil (reparse-symbol function_parameters) [17131 17136]))                          )
                        (reparse-symbol indented_block_body) [17057 17220])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [17225 17290]))                  
                :type "class")
                nil [3064 17291])
            ("_safe_repr" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [17364 17370])
                ("context" variable nil (reparse-symbol function_parameters) [17372 17379])
                ("maxlevels" variable nil (reparse-symbol function_parameters) [17381 17390])
                ("level" variable nil (reparse-symbol function_parameters) [17392 17397]))              ) nil [17349 19751])
            ("_builtin_scalars" variable nil nil [19752 19874])
            ("_recursion" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [19891 19897]))              ) nil [19876 19994])
            ("_perfcheck" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [20011 20017]))              ) nil [19996 20343])
            ("_wrap_bytes_repr" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [20365 20371])
                ("width" variable nil (reparse-symbol function_parameters) [20373 20378])
                ("allowance" variable nil (reparse-symbol function_parameters) [20380 20389]))              ) nil [20344 20817])
            ("if" code nil nil [20818 20862]))          
      :file "pprint.py"
      :pointmax 20862
      :fsize 20861
      :lastmodtime '(22333 27206 362105 881000)
      :unmatched-syntax '((NAME 7206 . 7213) (IF 7221 . 7223) (ELSE 7241 . 7245) (MULT 3153 . 3154) (COMMA 3154 . 3155) (MULT 1648 . 1649) (COMMA 1649 . 1650) (MULT 1344 . 1345) (COMMA 1345 . 1346)))
    (semanticdb-table "signal.py"
      :major-mode 'python-mode
      :tags 
        '( ("_signal" include nil nil [1 15])
            ("_signal" include nil nil [16 37])
            ("functools" include nil nil [38 75])
            ("enum" include nil nil [76 112])
            ("_globals" variable nil nil [114 134])
            ("_IntEnum" code nil nil [136 345])
            ("_IntEnum" code nil nil [347 448])
            ("if" code nil nil [450 619])
            ("_int_to_enum" function
               (:documentation "Convert a numeric value to an IntEnum member.
    If it's not a known member, return the numeric value itself.
    "
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [638 643])
                    ("enum_klass" variable nil (reparse-symbol function_parameters) [645 655]))                  )
                nil [621 870])
            ("_enum_to_int" function
               (:documentation "Convert an IntEnum member to a numeric value.
    If it's not an IntEnum member return the value itself.
    "
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [889 894]))                  )
                nil [872 1109])
            ("" code nil nil [1118 1134])
            ("signal" function (:arguments 
              ( ("signalnum" variable nil (reparse-symbol function_parameters) [1146 1155])
                ("handler" variable nil (reparse-symbol function_parameters) [1157 1164]))              ) nil [1135 1287])
            ("" code nil nil [1296 1315])
            ("getsignal" function (:arguments 
              ( ("signalnum" variable nil (reparse-symbol function_parameters) [1330 1339]))              ) nil [1316 1428])
            ("if" code nil nil [1430 1716])
            ("if" code nil nil [1718 1896])
            ("if" code nil nil [1898 2102])
            ("del" code nil nil [2103 2123]))          
      :file "signal.py"
      :pointmax 2124
      :fsize 2123
      :lastmodtime '(22333 27206 394105 880000)
      :unmatched-syntax nil)
    (semanticdb-table "inspect.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Get useful information from live Python objects.

This module encapsulates the interface provided by the internal special
attributes (co_*, im_*, tb_*, etc.) in a friendlier fashion.
It also provides some help for examining source code and class layout.

Here are some of the useful functions provided by this module:

    ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),
        isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),
        isroutine() - check object types
    getmembers() - get members of an object that satisfy a given condition

    getfile(), getsourcefile(), getsource() - find an object's source code
    getdoc(), getcomments() - get documentation on an object
    getmodule() - determine the module that an object came from
    getclasstree() - arrange classes so as to represent their hierarchy

    getargspec(), getargvalues(), getcallargs() - get info about function arguments
    getfullargspec() - same, with support for Python 3 features
    formatargspec(), formatargvalues() - format an argument spec
    getouterframes(), getinnerframes() - get info about frames
    currentframe() - get the current stack frame
    stack(), trace() - get info about frames on the stack or in a traceback

    signature() - get a Signature object for the callable
\"\"\"" code nil nil [1 1324])
            ("__author__" variable nil nil [1382 1482])
            ("ast" include nil nil [1484 1494])
            ("dis" include nil nil [1495 1505])
            ("collections.abc" include nil nil [1506 1528])
            ("enum" include nil nil [1529 1540])
            ("importlib.machinery" include nil nil [1541 1567])
            ("itertools" include nil nil [1568 1584])
            ("linecache" include nil nil [1585 1601])
            ("os" include nil nil [1602 1611])
            ("re" include nil nil [1612 1621])
            ("sys" include nil nil [1622 1632])
            ("tokenize" include nil nil [1633 1648])
            ("token" include nil nil [1649 1661])
            ("types" include nil nil [1662 1674])
            ("warnings" include nil nil [1675 1690])
            ("functools" include nil nil [1691 1707])
            ("builtins" include nil nil [1708 1723])
            ("operator" include nil nil [1724 1755])
            ("collections" include nil nil [1756 1803])
            ("mod_dict" variable nil nil [1916 1936])
            ("for" code nil nil [1937 2010])
            ("TPFLAGS_IS_ABSTRACT" code nil nil [2034 2063])
            ("ismodule" function
               (:documentation "Return true if the object is a module.

    Module objects provide these attributes:
        __cached__      pathname to byte compiled file
        __doc__         documentation string
        __file__        filename (missing for built-in modules)"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2154 2160]))                  )
                nil [2141 2470])
            ("isclass" function
               (:documentation "Return true if the object is a class.

    Class objects provide these attributes:
        __doc__         documentation string
        __module__      name of module in which this class was defined"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2483 2489]))                  )
                nil [2471 2737])
            ("ismethod" function
               (:documentation "Return true if the object is an instance method.

    Instance method objects provide these attributes:
        __doc__         documentation string
        __name__        name with which this method was defined
        __func__        function object containing implementation of method
        __self__        instance to which this method is bound"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2751 2757]))                  )
                nil [2738 3170])
            ("ismethoddescriptor" function
               (:documentation "Return true if the object is a method descriptor.

    But not if ismethod() or isclass() or isfunction() are true.

    This is new in Python 2.2, and, for example, is true of int.__add__.
    An object passing this test has a __get__ attribute but not a __set__
    attribute, but beyond that the set of attributes varies.  __name__ is
    usually sensible, and __doc__ often is.

    Methods implemented via descriptors that also pass one of the other
    tests return false from the ismethoddescriptor() test, simply because
    the other tests promise more -- you can, e.g., count on having the
    __func__ attribute (etc) when an object passes ismethod()."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [3194 3200]))                  )
                nil [3171 4077])
            ("isdatadescriptor" function
               (:documentation "Return true if the object is a data descriptor.

    Data descriptors have both a __get__ and a __set__ attribute.  Examples are
    properties (defined in Python) and getsets and members (defined in C).
    Typically, data descriptors will also have __name__ and __doc__ attributes
    (properties, getsets, and members have both of these attributes), but this
    is not guaranteed."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [4099 4105]))                  )
                nil [4078 4700])
            ("if" code nil nil [4701 5278])
            ("if" code nil nil [5279 5856])
            ("isfunction" function
               (:documentation "Return true if the object is a user-defined function.

    Function objects provide these attributes:
        __doc__         documentation string
        __name__        name with which this function was defined
        __code__        code object containing compiled function bytecode
        __defaults__    tuple of any default values for arguments
        __globals__     global namespace in which this function was defined
        __annotations__ dict of parameter annotations
        __kwdefaults__  dict of keyword only parameters with defaults"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [5872 5878]))                  )
                nil [5857 6494])
            ("isgeneratorfunction" function
               (:documentation "Return true if the object is a user-defined generator function.

    Generator function objects provides same attributes as functions.

    See help(isfunction) for attributes listing."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [6519 6525]))                  )
                nil [6495 6841])
            ("iscoroutinefunction" function
               (:documentation "Return true if the object is a coroutine function.

    Coroutine functions are defined with \"async def\" syntax,
    or generators decorated with \"types.coroutine\".
    "
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [6866 6872]))                  )
                nil [6842 7173])
            ("isgenerator" function
               (:documentation "Return true if the object is a generator.

    Generator objects provide these attributes:
        __iter__        defined to support iteration over container
        close           raises a new GeneratorExit exception inside the
                        generator to terminate the iteration
        gi_code         code object
        gi_frame        frame object or possibly None once the generator has
                        been exhausted
        gi_running      set to 1 when generator is executing, 0 otherwise
        next            return the next item from the container
        send            resumes the generator and \"sends\" a value that becomes
                        the result of the current yield-expression
        throw           used to raise an exception inside the generator"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [7190 7196]))                  )
                nil [7174 8060])
            ("iscoroutine" function
               (:documentation "Return true if the object is a coroutine."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [8077 8083]))                  )
                nil [8061 8189])
            ("isawaitable" function
               (:documentation "Return true is object can be passed to an ``await`` expression."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [8206 8212]))                  )
                nil [8190 8526])
            ("istraceback" function
               (:documentation "Return true if the object is a traceback.

    Traceback objects provide these attributes:
        tb_frame        frame object at this level
        tb_lasti        index of last attempted instruction in bytecode
        tb_lineno       current line number in Python source code
        tb_next         next inner traceback object (called by this level)"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [8543 8549]))                  )
                nil [8527 8968])
            ("isframe" function
               (:documentation "Return true if the object is a frame object.

    Frame objects provide these attributes:
        f_back          next outer frame object (this frame's caller)
        f_builtins      built-in namespace seen by this frame
        f_code          code object being executed in this frame
        f_globals       global namespace seen by this frame
        f_lasti         index of last attempted instruction in bytecode
        f_lineno        current line number in Python source code
        f_locals        local namespace seen by this frame
        f_trace         tracing function for this frame, or None"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [8981 8987]))                  )
                nil [8969 9656])
            ("iscode" function
               (:documentation "Return true if the object is a code object.

    Code objects provide these attributes:
        co_argcount     number of arguments (not including * or ** args)
        co_code         string of raw compiled bytecode
        co_consts       tuple of constants used in the bytecode
        co_filename     name of file in which this code object was created
        co_firstlineno  number of first line in Python source code
        co_flags        bitmap: 1=optimized | 2=newlocals | 4=*arg | 8=**arg
        co_lnotab       encoded mapping of line numbers to bytecode indices
        co_name         name with which this code object was defined
        co_names        tuple of names of local variables
        co_nlocals      number of local variables
        co_stacksize    virtual machine stack space required
        co_varnames     tuple of names of arguments and local variables"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [9668 9674]))                  )
                nil [9657 10619])
            ("isbuiltin" function
               (:documentation "Return true if the object is a built-in function or method.

    Built-in functions and methods provide these attributes:
        __doc__         documentation string
        __name__        original name of this function or method
        __self__        instance to which a method is bound, or None"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [10634 10640]))                  )
                nil [10620 11011])
            ("isroutine" function
               (:documentation "Return true if the object is any kind of function or method."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [11026 11032]))                  )
                nil [11012 11245])
            ("isabstract" function
               (:documentation "Return true if the object is an abstract base class (ABC)."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [11261 11267]))                  )
                nil [11246 11424])
            ("getmembers" function
               (:documentation "Return all members of an object as (name, value) pairs sorted by name.
    Optionally, only return members that satisfy a given predicate."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [11440 11446])
                    ("predicate" variable nil (reparse-symbol function_parameters) [11448 11457]))                  )
                nil [11425 13098])
            ("Attribute" variable nil nil [13099 13169])
            ("classify_class_attrs" function
               (:documentation "Return list of attribute-descriptor tuples.

    For each name in dir(cls), the return list contains a 4-tuple
    with these elements:

        0. The name (a string).

        1. The kind of attribute this is, one of these strings:
               'class method'    created via classmethod()
               'static method'   created via staticmethod()
               'property'        created via property()
               'method'          any other flavor of method or descriptor
               'data'            not a method

        2. The class which defined this attribute (a class).

        3. The object as obtained by calling getattr; if this fails, or if the
           resulting object does not live anywhere in the class' mro (including
           metaclasses) then the object is looked up in the defining class's
           dict (found by walking the mro).

    If one of the items in dir(cls) is stored in the metaclass it will now
    be discovered and not have None be listed as the class in which it was
    defined.  Any items whose home class cannot be discovered are skipped.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [13196 13199]))                  )
                nil [13171 17941])
            ("getmro" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [18030 18033]))              ) nil [18019 18138])
            ("unwrap" function
               (:documentation "Get the object wrapped by *func*.

   Follows the chain of :attr:`__wrapped__` attributes returning the last
   object in the chain.

   *stop* is an optional callback accepting an object in the wrapper chain
   as its sole argument that allows the unwrapping to be terminated early if
   the callback returns a true value. If the callback never returns a true
   value, the last object in the chain is returned as usual. For example,
   :func:`signature` uses this to stop unwrapping if any object in the
   chain has a ``__signature__`` attribute defined.

   :exc:`ValueError` is raised if a cycle is encountered.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [18227 18231])
                    ("stop" variable nil (reparse-symbol function_parameters) [18236 18240]))                  )
                nil [18216 19439])
            ("indentsize" function
               (:documentation "Return the indent size, in spaces, at the start of a line of text."
                :arguments 
                  ( ("line" variable nil (reparse-symbol function_parameters) [19531 19535]))                  )
                nil [19516 19695])
            ("_findclass" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [19711 19715]))              ) nil [19696 19945])
            ("_finddoc" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [19959 19962]))              ) nil [19946 21670])
            ("getdoc" function
               (:documentation "Get the documentation string for an object.

    All tabs are expanded to spaces.  To clean up docstrings that are
    indented to line up with blocks of code, any whitespace than can be
    uniformly removed from the second line onwards is removed."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [21682 21688]))                  )
                nil [21671 22250])
            ("cleandoc" function
               (:documentation "Clean up indentation from docstrings.

    Any whitespace that can be uniformly removed from the second line
    onwards is removed."
                :arguments 
                  ( ("doc" variable nil (reparse-symbol function_parameters) [22264 22267]))                  )
                nil [22251 23219])
            ("getfile" function
               (:documentation "Work out which source or compiled file an object was defined in."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [23232 23238]))                  )
                nil [23220 24188])
            ("ModuleInfo" variable nil nil [24189 24258])
            ("getmoduleinfo" function
               (:documentation "Get the module name, suffix, mode, and module type for a given file."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [24278 24282]))                  )
                nil [24260 24973])
            ("getmodulename" function
               (:documentation "Return the module name for a given file, or None."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [24992 24996]))                  )
                nil [24974 25454])
            ("getsourcefile" function
               (:documentation "Return the filename that can be used to locate an object's source.
    Return None if no way can be identified to get the source.
    "
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [25473 25479]))                  )
                nil [25455 26438])
            ("getabsfile" function
               (:documentation "Return an absolute path to the source or compiled file for an object.

    The idea is for each object to have a unique origin, so this routine
    normalizes the result as much as possible."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [26454 26460])
                    ("_filename" variable nil (reparse-symbol function_parameters) [26462 26471]))                  )
                nil [26439 26823])
            ("modulesbyfile" variable nil nil [26824 26842])
            ("_filesbymodname" variable nil nil [26843 26863])
            ("getmodule" function
               (:documentation "Return the module an object was defined in, or None if not found."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [26879 26885])
                    ("_filename" variable nil (reparse-symbol function_parameters) [26887 26896]))                  )
                nil [26865 28750])
            ("findsource" function
               (:documentation "Return the entire source file and starting line number for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a list of all the lines
    in the file and the line number indexes a line in that list.  An OSError
    is raised if the source code cannot be retrieved."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [28766 28772]))                  )
                nil [28751 31533])
            ("getcomments" function
               (:documentation "Get lines of comments immediately preceding an object's source code.

    Returns None when source can't be found.
    "
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [31550 31556]))                  )
                nil [31534 33261])
            ("EndOfBlock" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [33262 33296])
            ("BlockFinder" type
               (:documentation "Provide a tokeneater() method to detect the end of a code block."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [33423 33438])
                            ("self" variable nil (reparse-symbol indented_block_body) [33447 33468])
                            ("self" variable nil (reparse-symbol indented_block_body) [33477 33497])
                            ("self" variable nil (reparse-symbol indented_block_body) [33506 33527])
                            ("self" variable nil (reparse-symbol indented_block_body) [33536 33560])
                            ("self" variable nil (reparse-symbol indented_block_body) [33569 33598])
                            ("self" variable nil (reparse-symbol indented_block_body) [33607 33620]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33408 33412]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33395 33621])
                    ("tokeneater" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33641 33645])
                            ("type" variable nil (reparse-symbol function_parameters) [33647 33651])
                            ("token" variable nil (reparse-symbol function_parameters) [33653 33658])
                            ("srowcol" variable nil (reparse-symbol function_parameters) [33660 33667])
                            ("erowcol" variable nil (reparse-symbol function_parameters) [33669 33676])
                            ("line" variable nil (reparse-symbol function_parameters) [33678 33682]))                          )
                        (reparse-symbol indented_block_body) [33626 35610]))                  
                :type "class")
                nil [33297 35610])
            ("getblock" function
               (:documentation "Extract the block of code at the top of the given list of lines."
                :arguments 
                  ( ("lines" variable nil (reparse-symbol function_parameters) [35624 35629]))                  )
                nil [35611 35978])
            ("getsourcelines" function
               (:documentation "Return a list of source lines and starting line number for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a list of the lines
    corresponding to the object and the line number indicates where in the
    original source file the first line of code was found.  An OSError is
    raised if the source code cannot be retrieved."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [35998 36004]))                  )
                nil [35979 36610])
            ("getsource" function
               (:documentation "Return the text of the source code for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a single string.  An
    OSError is raised if the source code cannot be retrieved."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [36625 36631]))                  )
                nil [36611 36974])
            ("walktree" function
               (:documentation "Recursive helper function for getclasstree()."
                :arguments 
                  ( ("classes" variable nil (reparse-symbol function_parameters) [37064 37071])
                    ("children" variable nil (reparse-symbol function_parameters) [37073 37081])
                    ("parent" variable nil (reparse-symbol function_parameters) [37083 37089]))                  )
                nil [37051 37395])
            ("getclasstree" function
               (:documentation "Arrange the given list of classes into a hierarchy of nested lists.

    Where a nested list appears, it contains classes derived from the class
    whose entry immediately precedes the list.  Each entry is a 2-tuple
    containing a class and a tuple of its base classes.  If the 'unique'
    argument is true, exactly one entry appears in the returned structure
    for each class in the given list.  Otherwise, classes using multiple
    inheritance and their descendants will appear multiple times."
                :arguments 
                  ( ("classes" variable nil (reparse-symbol function_parameters) [37413 37420])
                    ("unique" variable nil (reparse-symbol function_parameters) [37422 37428]))                  )
                nil [37396 38496])
            ("Arguments" variable nil nil [38573 38632])
            ("getargs" function
               (:documentation "Get information about the arguments accepted by a code object.

    Three things are returned: (args, varargs, varkw), where
    'args' is the list of argument names. Keyword-only arguments are
    appended. 'varargs' and 'varkw' are the names of the * and **
    arguments or None."
                :arguments 
                  ( ("co" variable nil (reparse-symbol function_parameters) [38646 38648]))                  )
                nil [38634 39056])
            ("_getfullargs" function
               (:documentation "Get information about the arguments accepted by a code object.

    Four things are returned: (args, varargs, kwonlyargs, varkw), where
    'args' and 'kwonlyargs' are lists of argument names, and 'varargs'
    and 'varkw' are the names of the * and ** arguments or None."
                :arguments 
                  ( ("co" variable nil (reparse-symbol function_parameters) [39074 39076]))                  )
                nil [39057 39909])
            ("ArgSpec" variable nil nil [39911 39976])
            ("getargspec" function
               (:documentation "Get the names and default values of a function's arguments.

    A tuple of four things is returned: (args, varargs, keywords, defaults).
    'args' is a list of the argument names, including keyword-only argument names.
    'varargs' and 'keywords' are the names of the * and ** arguments or None.
    'defaults' is an n-tuple of the default values of the last n arguments.

    Use the getfullargspec() API for Python 3 code, as annotations
    and keyword arguments are supported. getargspec() will raise ValueError
    if the func has either annotations or keyword arguments.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [39993 39997]))                  )
                nil [39978 41091])
            ("FullArgSpec" variable nil nil [41092 41210])
            ("getfullargspec" function
               (:documentation "Get the names and default values of a callable object's arguments.

    A tuple of seven things is returned:
    (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults annotations).
    'args' is a list of the argument names.
    'varargs' and 'varkw' are the names of the * and ** arguments or None.
    'defaults' is an n-tuple of the default values of the last n arguments.
    'kwonlyargs' is a list of keyword-only argument names.
    'kwonlydefaults' is a dictionary mapping names from kwonlyargs to defaults.
    'annotations' is a dictionary mapping argument names to annotations.

    The first four items in the tuple correspond to getargspec().

    This function is deprecated, use inspect.signature() instead.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [41231 41235]))                  )
                nil [41212 44529])
            ("ArgInfo" variable nil nil [44531 44594])
            ("getargvalues" function
               (:documentation "Get information about arguments passed into a particular frame.

    A tuple of four things is returned: (args, varargs, varkw, locals).
    'args' is a list of the argument names.
    'varargs' and 'varkw' are the names of the * and ** arguments or None.
    'locals' is the locals dictionary of the given frame."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [44613 44618]))                  )
                nil [44596 45051])
            ("formatannotation" function (:arguments 
              ( ("annotation" variable nil (reparse-symbol function_parameters) [45073 45083])
                ("base_module" variable nil (reparse-symbol function_parameters) [45085 45096]))              ) nil [45052 45340])
            ("formatannotationrelativeto" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [45372 45378]))              ) nil [45341 45550])
            ("formatargspec" function
               (:documentation "Format an argument spec from the values returned by getargspec
    or getfullargspec.

    The first seven arguments are (args, varargs, varkw, defaults,
    kwonlyargs, kwonlydefaults, annotations).  The other five arguments
    are the corresponding optional formatting functions that are called to
    turn names and values into strings.  The last argument is an optional
    function to format the sequence of arguments."
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [45569 45573])
                    ("varargs" variable nil (reparse-symbol function_parameters) [45575 45582])
                    ("varkw" variable nil (reparse-symbol function_parameters) [45589 45594])
                    ("defaults" variable nil (reparse-symbol function_parameters) [45601 45609])
                    ("kwonlyargs" variable nil (reparse-symbol function_parameters) [45634 45644])
                    ("kwonlydefaults" variable nil (reparse-symbol function_parameters) [45649 45663])
                    ("annotations" variable nil (reparse-symbol function_parameters) [45668 45679])
                    ("formatarg" variable nil (reparse-symbol function_parameters) [45702 45711])
                    ("formatvarargs" variable nil (reparse-symbol function_parameters) [45735 45748])
                    ("formatvarkw" variable nil (reparse-symbol function_parameters) [45792 45803])
                    ("formatvalue" variable nil (reparse-symbol function_parameters) [45848 45859])
                    ("formatreturns" variable nil (reparse-symbol function_parameters) [45911 45924])
                    ("formatannotation" variable nil (reparse-symbol function_parameters) [45971 45987]))                  )
                nil [45551 47605])
            ("formatargvalues" function
               (:documentation "Format an argument spec from the 4 values returned by getargvalues.

    The first four arguments are (args, varargs, varkw, locals).  The
    next four arguments are the corresponding optional formatting functions
    that are called to turn names and values into strings.  The ninth
    argument is an optional function to format the sequence of arguments."
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [47626 47630])
                    ("varargs" variable nil (reparse-symbol function_parameters) [47632 47639])
                    ("varkw" variable nil (reparse-symbol function_parameters) [47641 47646])
                    ("locals" variable nil (reparse-symbol function_parameters) [47648 47654])
                    ("formatarg" variable nil (reparse-symbol function_parameters) [47676 47685])
                    ("formatvarargs" variable nil (reparse-symbol function_parameters) [47711 47724])
                    ("formatvarkw" variable nil (reparse-symbol function_parameters) [47770 47781])
                    ("formatvalue" variable nil (reparse-symbol function_parameters) [47828 47839]))                  )
                nil [47606 48703])
            ("_missing_arguments" function (:arguments 
              ( ("f_name" variable nil (reparse-symbol function_parameters) [48727 48733])
                ("argnames" variable nil (reparse-symbol function_parameters) [48735 48743])
                ("pos" variable nil (reparse-symbol function_parameters) [48745 48748])
                ("values" variable nil (reparse-symbol function_parameters) [48750 48756]))              ) nil [48704 49297])
            ("_too_many" function (:arguments 
              ( ("f_name" variable nil (reparse-symbol function_parameters) [49312 49318])
                ("args" variable nil (reparse-symbol function_parameters) [49320 49324])
                ("kwonly" variable nil (reparse-symbol function_parameters) [49326 49332])
                ("varargs" variable nil (reparse-symbol function_parameters) [49334 49341])
                ("defcount" variable nil (reparse-symbol function_parameters) [49343 49351])
                ("given" variable nil (reparse-symbol function_parameters) [49353 49358])
                ("values" variable nil (reparse-symbol function_parameters) [49360 49366]))              ) nil [49298 50182])
            ("getcallargs" function
               (:documentation "Get the mapping of arguments to values.

    A dict is returned, with keys the function argument names (including the
    names of the * and ** arguments, if any), and values the respective bound
    values from 'positional' and 'named'."
                :arguments 
                  ( ("func_and_positional" variable nil (reparse-symbol function_parameters) [50199 50219])
                    ("named" variable nil (reparse-symbol function_parameters) [50221 50228]))                  )
                nil [50183 52536])
            ("ClosureVars" variable nil nil [52537 52614])
            ("getclosurevars" function
               (:documentation "
    Get the mapping of free variables to their current values.

    Returns a named tuple of dicts mapping the current nonlocal, global
    and builtin references as seen by the body of the function. A final
    set of unbound names that could not be resolved is also provided.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [52635 52639]))                  )
                nil [52616 54388])
            ("Traceback" variable nil nil [54466 54548])
            ("getframeinfo" function
               (:documentation "Get information about a frame or traceback object.

    A tuple of five things is returned: the filename, the line number of
    the current line, the function name, a list of lines of context from
    the source code, and the index of the current line within that list.
    The optional second argument specifies the number of lines of context
    to return, which are centered around the current line."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [54567 54572])
                    ("context" variable nil (reparse-symbol function_parameters) [54574 54581]))                  )
                nil [54550 55780])
            ("getlineno" function
               (:documentation "Get the line number from a frame object, allowing for optimization."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [55795 55800]))                  )
                nil [55781 55975])
            ("FrameInfo" variable nil nil [55976 56043])
            ("getouterframes" function
               (:documentation "Get a list of records for a frame and all higher (calling) frames.

    Each record contains a frame object, filename, line number, function
    name, a list of lines of context, and index within the context."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [56064 56069])
                    ("context" variable nil (reparse-symbol function_parameters) [56071 56078]))                  )
                nil [56045 56496])
            ("getinnerframes" function
               (:documentation "Get a list of records for a traceback's frame and all lower frames.

    Each record contains a frame object, filename, line number, function
    name, a list of lines of context, and index within the context."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [56516 56518])
                    ("context" variable nil (reparse-symbol function_parameters) [56520 56527]))                  )
                nil [56497 56941])
            ("currentframe" function (:documentation "Return the frame of the caller or None if this is not possible.") nil [56942 57103])
            ("stack" function
               (:documentation "Return a list of records for the stack above the caller's frame."
                :arguments 
                  ( ("context" variable nil (reparse-symbol function_parameters) [57114 57121]))                  )
                nil [57104 57254])
            ("trace" function
               (:documentation "Return a list of records for the stack below the current exception."
                :arguments 
                  ( ("context" variable nil (reparse-symbol function_parameters) [57265 57272]))                  )
                nil [57255 57409])
            ("_sentinel" variable nil nil [57489 57509])
            ("_static_getmro" function (:arguments 
              ( ("klass" variable nil (reparse-symbol function_parameters) [57530 57535]))              ) nil [57511 57589])
            ("_check_instance" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [57610 57613])
                ("attr" variable nil (reparse-symbol function_parameters) [57615 57619]))              ) nil [57590 57811])
            ("_check_class" function (:arguments 
              ( ("klass" variable nil (reparse-symbol function_parameters) [57830 57835])
                ("attr" variable nil (reparse-symbol function_parameters) [57837 57841]))              ) nil [57813 58069])
            ("_is_type" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [58083 58086]))              ) nil [58070 58185])
            ("_shadowed_dict" function (:arguments 
              ( ("klass" variable nil (reparse-symbol function_parameters) [58205 58210]))              ) nil [58186 58665])
            ("getattr_static" function
               (:documentation "Retrieve attributes without triggering dynamic lookup via the
       descriptor protocol,  __getattr__ or __getattribute__.

       Note: this function may not be able to retrieve all attributes
       that getattr can fetch (like dynamically created attributes)
       and may find attributes that getattr can't (like descriptors
       that raise AttributeError). It can also return descriptor objects
       instead of instance members in some cases. See the
       documentation for details.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [58685 58688])
                    ("attr" variable nil (reparse-symbol function_parameters) [58690 58694])
                    ("default" variable nil (reparse-symbol function_parameters) [58696 58703]))                  )
                nil [58666 60373])
            ("GEN_CREATED" variable nil nil [60451 60478])
            ("GEN_RUNNING" variable nil nil [60479 60506])
            ("GEN_SUSPENDED" variable nil nil [60507 60538])
            ("GEN_CLOSED" variable nil nil [60539 60564])
            ("getgeneratorstate" function
               (:documentation "Get current state of a generator-iterator.

    Possible states are:
      GEN_CREATED: Waiting to start execution.
      GEN_RUNNING: Currently being executed by the interpreter.
      GEN_SUSPENDED: Currently suspended at a yield expression.
      GEN_CLOSED: Execution has completed.
    "
                :arguments 
                  ( ("generator" variable nil (reparse-symbol function_parameters) [60588 60597]))                  )
                nil [60566 61112])
            ("getgeneratorlocals" function
               (:documentation "
    Get the mapping of generator local variables to their current values.

    A dict is returned, with the keys the local variable names and values the
    bound values."
                :arguments 
                  ( ("generator" variable nil (reparse-symbol function_parameters) [61137 61146]))                  )
                nil [61114 61592])
            ("CORO_CREATED" variable nil nil [61670 61699])
            ("CORO_RUNNING" variable nil nil [61700 61729])
            ("CORO_SUSPENDED" variable nil nil [61730 61763])
            ("CORO_CLOSED" variable nil nil [61764 61791])
            ("getcoroutinestate" function
               (:documentation "Get current state of a coroutine object.

    Possible states are:
      CORO_CREATED: Waiting to start execution.
      CORO_RUNNING: Currently being executed by the interpreter.
      CORO_SUSPENDED: Currently suspended at an await expression.
      CORO_CLOSED: Execution has completed.
    "
                :arguments 
                  ( ("coroutine" variable nil (reparse-symbol function_parameters) [61815 61824]))                  )
                nil [61793 62346])
            ("getcoroutinelocals" function
               (:documentation "
    Get the mapping of coroutine local variables to their current values.

    A dict is returned, with the keys the local variable names and values the
    bound values."
                :arguments 
                  ( ("coroutine" variable nil (reparse-symbol function_parameters) [62371 62380]))                  )
                nil [62348 62698])
            ("_WrapperDescriptor" variable nil nil [62902 62942])
            ("_MethodWrapper" variable nil nil [62943 62978])
            ("_ClassMethodWrapper" variable nil nil [62979 63033])
            ("_NonUserDefinedCallables" variable nil nil [63035 63230])
            ("_signature_get_user_defined_method" function
               (:documentation "Private helper. Checks if ``cls`` has an attribute
    named ``method_name`` and returns it only if it is a
    pure python function.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [63272 63275])
                    ("method_name" variable nil (reparse-symbol function_parameters) [63277 63288]))                  )
                nil [63233 63742])
            ("_signature_get_partial" function
               (:documentation "Private helper to calculate how 'wrapped_sig' signature will
    look like after applying a 'functools.partial' object (or alike)
    on it.
    "
                :arguments 
                  ( ("wrapped_sig" variable nil (reparse-symbol function_parameters) [63771 63782])
                    ("partial" variable nil (reparse-symbol function_parameters) [63784 63791])
                    ("extra_args" variable nil (reparse-symbol function_parameters) [63793 63803]))                  )
                nil [63744 66762])
            ("_signature_bound_method" function
               (:documentation "Private helper to transform signatures for unbound
    functions to bound methods.
    "
                :arguments 
                  ( ("sig" variable nil (reparse-symbol function_parameters) [66792 66795]))                  )
                nil [66764 67586])
            ("_signature_is_builtin" function
               (:documentation "Private helper to test if `obj` is a callable that might
    support Argument Clinic's __text_signature__ protocol.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [67614 67617]))                  )
                nil [67588 68028])
            ("_signature_is_functionlike" function
               (:documentation "Private helper to test if `obj` is a duck type of FunctionType.
    A good example of such objects are functions compiled with
    Cython, which have all attributes that a pure Python function
    would have, but have their code statically compiled.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [68061 68064]))                  )
                nil [68030 69050])
            ("_signature_get_bound_param" function
               (:documentation " Private helper to get first parameter name from a
    __text_signature__ of a builtin method, which should
    be in the following format: '($param1, ...)'.
    Assumptions are that the first argument won't have
    a default value or an annotation.
    "
                :arguments 
                  ( ("spec" variable nil (reparse-symbol function_parameters) [69083 69087]))                  )
                nil [69052 69613])
            ("_signature_strip_non_python_syntax" function
               (:documentation "
    Private helper function. Takes a signature in Argument Clinic's
    extended signature format.

    Returns a tuple of three things:
      * that signature re-rendered in standard Python syntax,
      * the index of the \"self\" parameter (generally 0), or None if
        the function does not have a \"self\" parameter, and
      * the index of the last \"positional only\" parameter,
        or None if the signature has no positional-only parameters.
    "
                :arguments 
                  ( ("signature" variable nil (reparse-symbol function_parameters) [69654 69663]))                  )
                nil [69615 71807])
            ("_signature_fromstr" function
               (:documentation "Private helper to parse content of '__text_signature__'
    and return a Signature based on it.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [71832 71835])
                    ("obj" variable nil (reparse-symbol function_parameters) [71837 71840])
                    ("s" variable nil (reparse-symbol function_parameters) [71842 71843])
                    ("skip_bound_arg" variable nil (reparse-symbol function_parameters) [71845 71859]))                  )
                nil [71809 76305])
            ("_signature_from_builtin" function
               (:documentation "Private helper function to get signature for
    builtin callables.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [76335 76338])
                    ("func" variable nil (reparse-symbol function_parameters) [76340 76344])
                    ("skip_bound_arg" variable nil (reparse-symbol function_parameters) [76346 76360]))                  )
                nil [76307 76800])
            ("_signature_from_function" function
               (:documentation "Private helper: constructs Signature for the given python function."
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [76831 76834])
                    ("func" variable nil (reparse-symbol function_parameters) [76836 76840]))                  )
                nil [76802 79845])
            ("_signature_from_callable" function
               (:documentation "Private helper function to get signature for arbitrary
    callable objects.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [79876 79879])
                    ("follow_wrapper_chains" variable nil (reparse-symbol function_parameters) [79913 79934])
                    ("skip_bound_arg" variable nil (reparse-symbol function_parameters) [79970 79984])
                    ("sigcls" variable nil (reparse-symbol function_parameters) [80020 80026]))                  )
                nil [79847 87777])
            ("_void" type
               (:documentation "A private marker - used in Parameter & Signature."
                :type "class")
                nil [87779 87852])
            ("_empty" type
               (:documentation "Marker object for Signature.empty and Parameter.empty."
                :type "class")
                nil [87854 87933])
            ("_ParameterKind" type
               (:superclasses ("enum.IntEnum")
                :members 
                  ( ("POSITIONAL_ONLY" variable nil (reparse-symbol indented_block_body) [87975 87994])
                    ("POSITIONAL_OR_KEYWORD" variable nil (reparse-symbol indented_block_body) [87999 88024])
                    ("VAR_POSITIONAL" variable nil (reparse-symbol indented_block_body) [88029 88047])
                    ("KEYWORD_ONLY" variable nil (reparse-symbol indented_block_body) [88052 88068])
                    ("VAR_KEYWORD" variable nil (reparse-symbol indented_block_body) [88073 88088])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88106 88110]))                          )
                        (reparse-symbol indented_block_body) [88094 88140]))                  
                :type "class")
                nil [87935 88140])
            ("_POSITIONAL_ONLY" variable nil nil [88142 88199])
            ("_POSITIONAL_OR_KEYWORD" variable nil nil [88200 88263])
            ("_VAR_POSITIONAL" variable nil nil [88264 88320])
            ("_KEYWORD_ONLY" variable nil nil [88321 88375])
            ("_VAR_KEYWORD" variable nil nil [88376 88429])
            ("Parameter" type
               (:documentation "Represents a parameter in a function signature.

    Has the following public attributes:

    * name : str
        The name of the parameter as a string.
    * default : object
        The default value for the parameter if specified.  If the
        parameter has no default value, this attribute is set to
        `Parameter.empty`.
    * annotation
        The annotation for the parameter if specified.  If the
        parameter has no annotation, this attribute is set to
        `Parameter.empty`.
    * kind : str
        Describes how argument values are bound to the parameter.
        Possible values: `Parameter.POSITIONAL_ONLY`,
        `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,
        `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [89241 89298])
                    ("POSITIONAL_ONLY" variable nil (reparse-symbol indented_block_body) [89304 89346])
                    ("POSITIONAL_OR_KEYWORD" variable nil (reparse-symbol indented_block_body) [89351 89399])
                    ("VAR_POSITIONAL" variable nil (reparse-symbol indented_block_body) [89404 89445])
                    ("KEYWORD_ONLY" variable nil (reparse-symbol indented_block_body) [89450 89489])
                    ("VAR_KEYWORD" variable nil (reparse-symbol indented_block_body) [89494 89532])
                    ("empty" variable nil (reparse-symbol indented_block_body) [89538 89552])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [89637 89843])
                            ("self" variable nil (reparse-symbol indented_block_body) [89851 89868])
                            ("if" code nil (reparse-symbol indented_block_body) [89878 90076])
                            ("self" variable nil (reparse-symbol indented_block_body) [90084 90107])
                            ("self" variable nil (reparse-symbol indented_block_body) [90116 90145])
                            ("if" code nil (reparse-symbol indented_block_body) [90155 90249])
                            ("if" code nil (reparse-symbol indented_block_body) [90258 90363])
                            ("if" code nil (reparse-symbol indented_block_body) [90372 90480])
                            ("self" variable nil (reparse-symbol indented_block_body) [90489 90506]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89571 89575])
                            ("name" variable nil (reparse-symbol function_parameters) [89577 89581])
                            ("kind" variable nil (reparse-symbol function_parameters) [89583 89587])
                            ("default" variable nil (reparse-symbol function_parameters) [89592 89599])
                            ("annotation" variable nil (reparse-symbol function_parameters) [89608 89618]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [89558 90507])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90527 90531]))                          )
                        (reparse-symbol indented_block_body) [90512 90699])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90721 90725])
                            ("state" variable nil (reparse-symbol function_parameters) [90727 90732]))                          )
                        (reparse-symbol indented_block_body) [90704 90825])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90853 90857]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [90830 90886])
                    ("default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90917 90921]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [90891 90953])
                    ("annotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90987 90991]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [90958 91026])
                    ("kind" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91054 91058]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [91031 91087])
                    ("replace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91104 91108])
                            ("name" variable nil (reparse-symbol function_parameters) [91113 91117])
                            ("kind" variable nil (reparse-symbol function_parameters) [91125 91129])
                            ("annotation" variable nil (reparse-symbol function_parameters) [91153 91163])
                            ("default" variable nil (reparse-symbol function_parameters) [91171 91178]))                          
                        :documentation "Creates a customized copy of the Parameter.")
                        (reparse-symbol indented_block_body) [91092 91579])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91596 91600]))                          )
                        (reparse-symbol indented_block_body) [91584 92162])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92180 92184]))                          )
                        (reparse-symbol indented_block_body) [92167 92252])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92270 92274]))                          )
                        (reparse-symbol indented_block_body) [92257 92352])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92368 92372])
                            ("other" variable nil (reparse-symbol function_parameters) [92374 92379]))                          )
                        (reparse-symbol indented_block_body) [92357 92710]))                  
                :type "class")
                nil [88432 92710])
            ("BoundArguments" type
               (:documentation "Result of `Signature.bind` call.  Holds the mapping of arguments
    to the function's parameters.

    Has the following public attributes:

    * arguments : OrderedDict
        An ordered mutable mapping of parameters' names to arguments' values.
        Does not contain arguments' default values.
    * signature : Signature
        The Signature object that created this instance.
    * args : tuple
        Tuple of positional arguments values.
    * kwargs : dict
        Dict of keyword arguments values.
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [93268 93322])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [93378 93404])
                            ("self" variable nil (reparse-symbol indented_block_body) [93413 93440]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93341 93345])
                            ("signature" variable nil (reparse-symbol function_parameters) [93347 93356])
                            ("arguments" variable nil (reparse-symbol function_parameters) [93358 93367]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [93328 93441])
                    ("signature" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93474 93478]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [93446 93512])
                    ("args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93540 93544]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [93517 94202])
                    ("kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94232 94236]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [94207 95106])
                    ("apply_defaults" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95130 95134]))                          
                        :documentation "Set default values for missing arguments.

        For variable-positional arguments (*args) the default is an
        empty tuple.

        For variable-keyword arguments (**kwargs) the default is an
        empty dict.
        ")
                        (reparse-symbol indented_block_body) [95111 96172])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96188 96192])
                            ("other" variable nil (reparse-symbol function_parameters) [96194 96199]))                          )
                        (reparse-symbol indented_block_body) [96177 96441])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96463 96467])
                            ("state" variable nil (reparse-symbol function_parameters) [96469 96474]))                          )
                        (reparse-symbol indented_block_body) [96446 96567])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96589 96593]))                          )
                        (reparse-symbol indented_block_body) [96572 96672])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96690 96694]))                          )
                        (reparse-symbol indented_block_body) [96677 96895]))                  
                :type "class")
                nil [92712 96895])
            ("Signature" type
               (:documentation "A Signature object represents the overall signature of a function.
    It stores a Parameter object for each parameter accepted by the
    function, as well as information specific to the function itself.

    A Signature object has the following public attributes and methods:

    * parameters : OrderedDict
        An ordered mapping of parameters' names to the corresponding
        Parameter objects (keyword-only arguments are in the same order
        as listed in `code.co_varnames`).
    * return_annotation : object
        The annotation for the return type of the function if specified.
        If the function has no annotation for its return type, this
        attribute is set to `Signature.empty`.
    * bind(*args, **kwargs) -> BoundArguments
        Creates a mapping from positional and keyword arguments to
        parameters.
    * bind_partial(*args, **kwargs) -> BoundArguments
        Creates a partial mapping from positional and keyword arguments
        to parameters (simulating 'functools.partial' behavior.)
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [97972 98021])
                    ("_parameter_cls" variable nil (reparse-symbol indented_block_body) [98027 98053])
                    ("_bound_arguments_cls" variable nil (reparse-symbol indented_block_body) [98058 98095])
                    ("empty" variable nil (reparse-symbol indented_block_body) [98101 98115])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Constructs Signature from the given list of Parameter
        objects and 'return_annotation'.  All arguments are optional.
        \"\"\"" code nil (reparse-symbol indented_block_body) [98242 98380])
                            ("if" code nil (reparse-symbol indented_block_body) [98390 100151])
                            ("self" variable nil (reparse-symbol indented_block_body) [100160 100209])
                            ("self" variable nil (reparse-symbol indented_block_body) [100218 100261]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98134 98138])
                            ("parameters" variable nil (reparse-symbol function_parameters) [98140 98150])
                            ("return_annotation" variable nil (reparse-symbol function_parameters) [98160 98177])
                            ("__validate_parameters__" variable nil (reparse-symbol function_parameters) [98203 98226]))                          
                        :documentation "Constructs Signature from the given list of Parameter
        objects and 'return_annotation'.  All arguments are optional.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [98121 100262])
                    ("from_function" function
                       (:documentation "Constructs Signature for the given python function."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [100302 100305])
                            ("func" variable nil (reparse-symbol function_parameters) [100307 100311]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [100267 100617])
                    ("from_builtin" function
                       (:documentation "Constructs Signature for the given builtin function."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [100656 100659])
                            ("func" variable nil (reparse-symbol function_parameters) [100661 100665]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [100622 100970])
                    ("from_callable" function
                       (:documentation "Constructs Signature for the given callable object."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [101010 101013])
                            ("obj" variable nil (reparse-symbol function_parameters) [101015 101018])
                            ("follow_wrapped" variable nil (reparse-symbol function_parameters) [101023 101037]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [100975 101246])
                    ("parameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101280 101284]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [101251 101319])
                    ("return_annotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101360 101364]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [101324 101406])
                    ("replace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101423 101427])
                            ("parameters" variable nil (reparse-symbol function_parameters) [101432 101442])
                            ("return_annotation" variable nil (reparse-symbol function_parameters) [101450 101467]))                          
                        :documentation "Creates a customized copy of the Signature.
        Pass 'parameters' and/or 'return_annotation' arguments
        to override them in the new copy.
        ")
                        (reparse-symbol indented_block_body) [101411 101929])
                    ("_hash_basis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101950 101954]))                          )
                        (reparse-symbol indented_block_body) [101934 102295])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102313 102317]))                          )
                        (reparse-symbol indented_block_body) [102300 102500])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102516 102520])
                            ("other" variable nil (reparse-symbol function_parameters) [102522 102527]))                          )
                        (reparse-symbol indented_block_body) [102505 102716])
                    ("_bind" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102731 102735])
                            ("args" variable nil (reparse-symbol function_parameters) [102737 102741])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [102743 102749])
                            ("partial" variable nil (reparse-symbol function_parameters) [102754 102761]))                          
                        :documentation "Private method. Don't use directly.")
                        (reparse-symbol indented_block_body) [102721 108620])
                    ("bind" function
                       (:documentation "Get a BoundArguments object, that maps the passed `args`
        and `kwargs` to the function's signature.  Raises `TypeError`
        if the passed arguments can not be bound.
        "
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [108634 108639])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [108641 108649]))                          )
                        (reparse-symbol indented_block_body) [108625 108899])
                    ("bind_partial" function
                       (:documentation "Get a BoundArguments object, that partially maps the
        passed `args` and `kwargs` to the function's signature.
        Raises `TypeError` if the passed arguments can not be bound.
        "
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [108921 108926])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [108928 108936]))                          )
                        (reparse-symbol indented_block_body) [108904 109209])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109229 109233]))                          )
                        (reparse-symbol indented_block_body) [109214 109382])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109404 109408])
                            ("state" variable nil (reparse-symbol function_parameters) [109410 109415]))                          )
                        (reparse-symbol indented_block_body) [109387 109480])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109498 109502]))                          )
                        (reparse-symbol indented_block_body) [109485 109568])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109585 109589]))                          )
                        (reparse-symbol indented_block_body) [109573 111327]))                  
                :type "class")
                nil [96897 111327])
            ("signature" function
               (:documentation "Get a signature object for the passed callable."
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [111343 111346])
                    ("follow_wrapped" variable nil (reparse-symbol function_parameters) [111351 111365]))                  )
                nil [111329 111502])
            ("_main" function (:documentation " Logic for inspecting an object given at command line ") nil [111504 113323])
            ("if" code nil nil [113325 113364]))          
      :file "inspect.py"
      :pointmax 113364
      :fsize 113363
      :lastmodtime '(22333 27206 298105 882000)
      :unmatched-syntax '((INDENT_BLOCK 112163 . 112406) (NEWLINE 112162 . 112163) (COLON 112161 . 112162) (TRY 112072 . 112075) (AS 112155 . 112157) (MULT 111348 . 111349) (COMMA 111349 . 111350) (RAISE 107554 . 107559) (FROM 107672 . 107676) (NEWLINE 107681 . 107682) (RAISE 106155 . 106160) (FROM 106296 . 106300) (NEWLINE 106305 . 106306) (RAISE 105560 . 105565) (FROM 105638 . 105642) (NEWLINE 105647 . 105648) (RAISE 105274 . 105279) (FROM 105323 . 105327) (NEWLINE 105332 . 105333) (RAISE 105042 . 105047) (FROM 105063 . 105067) (NEWLINE 105072 . 105073) (RAISE 104051 . 104056) (FROM 104072 . 104076) (NEWLINE 104081 . 104082) (MULT 102751 . 102752) (COMMA 102752 . 102753) (MULT 101429 . 101430) (COMMA 101430 . 101431) (MULT 101020 . 101021) (COMMA 101021 . 101022) (MULT 98157 . 98158) (COMMA 98158 . 98159) (MULT 91110 . 91111) (COMMA 91111 . 91112) (MULT 89589 . 89590) (COMMA 89590 . 89591) (INDENT_BLOCK 87123 . 87233) (NEWLINE 87122 . 87123) (COLON 87121 . 87122) (TRY 86856 . 86859) (AS 87116 . 87118) (MULT 79881 . 79882) (COMMA 79882 . 79883) (NAME 74565 . 74572) (IF 74577 . 74579) (ELSE 74597 . 74601) (INDENT_BLOCK 64320 . 64434) (NEWLINE 64319 . 64320) (COLON 64318 . 64319) (TRY 64214 . 64217) (AS 64313 . 64315) (RETURN 57040 . 57046) (IF 57064 . 57066) (ELSE 57093 . 57097) (NAME 50935 . 50947) (IF 50964 . 50966) (ELSE 50976 . 50980) (INDENT_BLOCK 43186 . 43242) (NEWLINE 42925 . 42926) (COLON 42924 . 42925) (TRY 41986 . 41989) (AS 42919 . 42921) (MULT 18233 . 18234) (COMMA 18234 . 18235) (NAME 17319 . 17322) (IF 17333 . 17335) (ELSE 17356 . 17360) (INDENT_BLOCK 15870 . 16916) (NEWLINE 15869 . 15870) (COLON 15868 . 15869) (ELSE 15864 . 15868) (INDENT_BLOCK 15831 . 15852) (NEWLINE 15830 . 15831) (COLON 15829 . 15830) (TRY 15624 . 15627) (AS 15823 . 15825)))
    (semanticdb-table "traceback.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Extract, format and print information about Python stack traces.\"\"\"" code nil nil [1 71])
            ("collections" include nil nil [73 91])
            ("itertools" include nil nil [92 108])
            ("linecache" include nil nil [109 125])
            ("sys" include nil nil [126 136])
            ("__all__" variable nil nil [138 505])
            ("print_list" function
               (:documentation "Print the list of tuples as returned by extract_tb() or
    extract_stack() as a formatted stack trace to the given file."
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [579 593])
                    ("file" variable nil (reparse-symbol function_parameters) [595 599]))                  )
                nil [564 890])
            ("format_list" function
               (:documentation "Format a list of traceback entry tuples for printing.

    Given a list of tuples as returned by extract_tb() or
    extract_stack(), return a list of strings ready for printing.
    Each string in the resulting list corresponds to the item with the
    same index in the argument list.  Each string ends in a newline;
    the strings may contain internal newlines as well, for those items
    whose source text line is not None.
    "
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [907 921]))                  )
                nil [891 1428])
            ("print_tb" function
               (:documentation "Print up to 'limit' stack trace entries from the traceback 'tb'.

    If 'limit' is omitted or None, all entries are printed.  If 'file'
    is omitted or None, the output goes to sys.stderr; otherwise
    'file' should be an open file or file-like object with a write()
    method.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1485 1487])
                    ("limit" variable nil (reparse-symbol function_parameters) [1489 1494])
                    ("file" variable nil (reparse-symbol function_parameters) [1501 1505]))                  )
                nil [1472 1866])
            ("format_tb" function
               (:documentation "A shorthand for 'format_list(extract_tb(tb, limit))'."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1881 1883])
                    ("limit" variable nil (reparse-symbol function_parameters) [1885 1890]))                  )
                nil [1867 2010])
            ("extract_tb" function
               (:documentation "Return list of up to limit pre-processed entries from traceback.

    This is useful for alternate formatting of stack traces.  If
    'limit' is omitted or None, all entries are extracted.  A
    pre-processed stack trace entry is a quadruple (filename, line
    number, function name, text) representing the information that is
    usually printed for a stack trace.  The text is a string with
    leading and trailing whitespace stripped; if the source is not
    available it is None.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2026 2028])
                    ("limit" variable nil (reparse-symbol function_parameters) [2030 2035]))                  )
                nil [2011 2605])
            ("_cause_message" variable nil nil [2646 2753])
            ("_context_message" variable nil nil [2755 2863])
            ("print_exception" function
               (:documentation "Print exception up to 'limit' stack trace entries from 'tb' to 'file'.

    This differs from print_tb() in the following ways: (1) if
    traceback is not None, it prints a header \"Traceback (most recent
    call last):\"; (2) it prints the exception type and value after the
    stack trace; (3) if type is SyntaxError and value has the
    appropriate format, it prints the line where the syntax error
    occurred with a caret on the next line indicating the approximate
    position of the error.
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [2886 2891])
                    ("value" variable nil (reparse-symbol function_parameters) [2893 2898])
                    ("tb" variable nil (reparse-symbol function_parameters) [2900 2902])
                    ("limit" variable nil (reparse-symbol function_parameters) [2904 2909])
                    ("file" variable nil (reparse-symbol function_parameters) [2916 2920])
                    ("chain" variable nil (reparse-symbol function_parameters) [2927 2932]))                  )
                nil [2866 3875])
            ("format_exception" function
               (:documentation "Format a stack trace and the exception information.

    The arguments have the same meaning as the corresponding arguments
    to print_exception().  The return value is a list of strings, each
    ending in a newline and some containing internal newlines.  When
    these lines are concatenated and printed, exactly the same text is
    printed as does print_exception().
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [3898 3903])
                    ("value" variable nil (reparse-symbol function_parameters) [3905 3910])
                    ("tb" variable nil (reparse-symbol function_parameters) [3912 3914])
                    ("limit" variable nil (reparse-symbol function_parameters) [3916 3921])
                    ("chain" variable nil (reparse-symbol function_parameters) [3928 3933]))                  )
                nil [3877 4659])
            ("format_exception_only" function
               (:documentation "Format the exception part of a traceback.

    The arguments are the exception type and value such as given by
    sys.last_type and sys.last_value. The return value is a list of
    strings, each ending in a newline.

    Normally, the list contains a single string; however, for
    SyntaxError exceptions, it contains several lines that (when
    printed) display detailed information about where the syntax
    error occurred.

    The message indicating which exception occurred is always the last
    string in the list.

    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [4687 4692])
                    ("value" variable nil (reparse-symbol function_parameters) [4694 4699]))                  )
                nil [4661 5325])
            ("_format_final_exc_line" function (:arguments 
              ( ("etype" variable nil (reparse-symbol function_parameters) [5419 5424])
                ("value" variable nil (reparse-symbol function_parameters) [5426 5431]))              ) nil [5392 5625])
            ("_some_str" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [5640 5645]))              ) nil [5626 5759])
            ("print_exc" function
               (:documentation "Shorthand for 'print_exception(*sys.exc_info(), limit, file)'."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [5780 5785])
                    ("file" variable nil (reparse-symbol function_parameters) [5792 5796])
                    ("chain" variable nil (reparse-symbol function_parameters) [5803 5808]))                  )
                nil [5766 5963])
            ("format_exc" function
               (:documentation "Like print_exc() but return a string."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [5979 5984])
                    ("chain" variable nil (reparse-symbol function_parameters) [5991 5996]))                  )
                nil [5964 6132])
            ("print_last" function
               (:documentation "This is a shorthand for 'print_exception(sys.last_type,
    sys.last_value, sys.last_traceback, limit, file)'."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [6148 6153])
                    ("file" variable nil (reparse-symbol function_parameters) [6160 6164])
                    ("chain" variable nil (reparse-symbol function_parameters) [6171 6176]))                  )
                nil [6133 6500])
            ("print_stack" function
               (:documentation "Print a stack trace from its invocation point.

    The optional 'f' argument can be used to specify an alternate
    stack frame at which to start. The optional 'limit' and 'file'
    arguments have the same meaning as for print_exception().
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [6556 6557])
                    ("limit" variable nil (reparse-symbol function_parameters) [6564 6569])
                    ("file" variable nil (reparse-symbol function_parameters) [6576 6580]))                  )
                nil [6540 6956])
            ("format_stack" function
               (:documentation "Shorthand for 'format_list(extract_stack(f, limit))'."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [6975 6976])
                    ("limit" variable nil (reparse-symbol function_parameters) [6983 6988]))                  )
                nil [6958 7167])
            ("extract_stack" function
               (:documentation "Extract the raw traceback from the current stack frame.

    The return value has the same format as for extract_tb().  The
    optional 'f' and 'limit' arguments have the same meaning as for
    print_stack().  Each item in the list is a quadruple (filename,
    line number, function name, text), and the entries are in order
    from oldest to newest stack frame.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [7187 7188])
                    ("limit" variable nil (reparse-symbol function_parameters) [7195 7200]))                  )
                nil [7169 7741])
            ("clear_frames" function (:arguments 
              ( ("tb" variable nil (reparse-symbol function_parameters) [7760 7762]))              ) nil [7743 8057])
            ("FrameSummary" type
               (:documentation "A single frame from a traceback.

    - :attr:`filename` The filename for the frame.
    - :attr:`lineno` The line within filename for the frame that was
      active when the frame was captured.
    - :attr:`name` The name of the function or method that was executing
      when the frame was captured.
    - :attr:`line` The text from the linecache module for the
      of code that was running when the frame was captured.
    - :attr:`locals` Either None if locals were not supplied, or a dict
      mapping the name to the repr() of the variable.
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [8651 8712])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct a FrameSummary.

        :param lookup_line: If True, `linecache` is consulted for the source
            code line. Otherwise, the line will be looked up when first needed.
        :param locals: If supplied the frame locals, which will be captured as
            object representations.
        :param line: If provided, use this instead of looking up the line in
            the linecache.
        \"\"\"" code nil (reparse-symbol indented_block_body) [8827 9244])
                            ("self" variable nil (reparse-symbol indented_block_body) [9253 9277])
                            ("self" variable nil (reparse-symbol indented_block_body) [9286 9306])
                            ("self" variable nil (reparse-symbol indented_block_body) [9315 9331])
                            ("self" variable nil (reparse-symbol indented_block_body) [9340 9357])
                            ("if" code nil (reparse-symbol indented_block_body) [9366 9404])
                            ("None" code nil (reparse-symbol indented_block_body) [9501 9505]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8731 8735])
                            ("filename" variable nil (reparse-symbol function_parameters) [8737 8745])
                            ("lineno" variable nil (reparse-symbol function_parameters) [8747 8753])
                            ("name" variable nil (reparse-symbol function_parameters) [8755 8759])
                            ("lookup_line" variable nil (reparse-symbol function_parameters) [8764 8775])
                            ("locals" variable nil (reparse-symbol function_parameters) [8794 8800])
                            ("line" variable nil (reparse-symbol function_parameters) [8807 8811]))                          
                        :documentation "Construct a FrameSummary.

        :param lookup_line: If True, `linecache` is consulted for the source
            code line. Otherwise, the line will be looked up when first needed.
        :param locals: If supplied the frame locals, which will be captured as
            object representations.
        :param line: If provided, use this instead of looking up the line in
            the linecache.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8718 9506])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9522 9526])
                            ("other" variable nil (reparse-symbol function_parameters) [9528 9533]))                          )
                        (reparse-symbol indented_block_body) [9511 9931])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9952 9956])
                            ("pos" variable nil (reparse-symbol function_parameters) [9958 9961]))                          )
                        (reparse-symbol indented_block_body) [9936 10035])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10053 10057]))                          )
                        (reparse-symbol indented_block_body) [10040 10132])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10150 10154]))                          )
                        (reparse-symbol indented_block_body) [10137 10310])
                    ("line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10338 10342]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10315 10481]))                  
                :type "class")
                nil [8059 10481])
            ("walk_stack" function
               (:documentation "Walk a stack yielding the frame and line number for each frame.

    This will follow f.f_back from the given frame. If no frame is given, the
    current stack is used. Usually used with StackSummary.extract.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [10498 10499]))                  )
                nil [10483 10861])
            ("walk_tb" function
               (:documentation "Walk a traceback yielding the frame and line number for each frame.

    This will follow tb.tb_next (and thus is in the opposite order to
    walk_stack). Usually used with StackSummary.extract.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [10875 10877]))                  )
                nil [10863 11181])
            ("StackSummary" type
               (:documentation "A stack of frames."
                :superclasses ("list")
                :members 
                  ( ("extract" function
                       (:documentation "Create a StackSummary from a traceback or stack object.

        :param frame_gen: A generator that yields (frame, lineno) tuples to
            include in the stack.
        :param limit: None to include all frames or the number of frames to
            include.
        :param lookup_lines: If True, lookup lines for each frame immediately,
            otherwise lookup is deferred until the frame is rendered.
        :param capture_locals: If True, the local variables from each frame will
            be captured as object representations into the FrameSummary.
        "
                        :arguments 
                          ( ("klass" variable nil (reparse-symbol function_parameters) [11272 11277])
                            ("frame_gen" variable nil (reparse-symbol function_parameters) [11279 11288])
                            ("limit" variable nil (reparse-symbol function_parameters) [11293 11298])
                            ("lookup_lines" variable nil (reparse-symbol function_parameters) [11305 11317])
                            ("capture_locals" variable nil (reparse-symbol function_parameters) [11336 11350]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11243 13129])
                    ("from_list" function
                       (:documentation "Create a StackSummary from a simple list of tuples.

        This method supports the older Python API. Each tuple should be a
        4-tuple with (filename, lineno, name, line) elements.
        "
                        :arguments 
                          ( ("klass" variable nil (reparse-symbol function_parameters) [13165 13170])
                            ("a_list" variable nil (reparse-symbol function_parameters) [13172 13178]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13134 13988])
                    ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14004 14008]))                          
                        :documentation "Format the stack ready for printing.

        Returns a list of strings ready for printing.  Each string in the
        resulting list corresponds to a single frame from the stack.
        Each string ends in a newline; the strings may contain internal
        newlines as well, for those items with source text lines.
        ")
                        (reparse-symbol indented_block_body) [13993 14880]))                  
                :type "class")
                nil [11183 14880])
            ("TracebackException" type
               (:documentation "An exception ready for rendering.

    The traceback module captures enough attributes from the original exception
    to this intermediary form to ensure that no references are held, while
    still being able to fully print or format it.

    Use `from_exception` to create TracebackException instances from exception
    objects, or the constructor to create TracebackException instances from
    individual components.

    - :attr:`__cause__` A TracebackException of the original *__cause__*.
    - :attr:`__context__` A TracebackException of the original *__context__*.
    - :attr:`__suppress_context__` The *__suppress_context__* value from the
      original exception.
    - :attr:`stack` A `StackSummary` representing the traceback.
    - :attr:`exc_type` The class of the original traceback.
    - :attr:`filename` For syntax errors - the filename where the error
      occured.
    - :attr:`lineno` For syntax errors - the linenumber where the error
      occured.
    - :attr:`text` For syntax errors - the text where the error
      occured.
    - :attr:`offset` For syntax errors - the offset into the text where the
      error occured.
    - :attr:`msg` For syntax errors - the compiler error message.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [16549 16593])
                            ("_seen" code nil (reparse-symbol indented_block_body) [16601 16621])
                            ("if" code nil (reparse-symbol indented_block_body) [16772 17224])
                            ("if" code nil (reparse-symbol indented_block_body) [17232 17698])
                            ("self" variable nil (reparse-symbol indented_block_body) [17706 17740])
                            ("self" variable nil (reparse-symbol indented_block_body) [17749 17771])
                            ("self" variable nil (reparse-symbol indented_block_body) [17780 17806])
                            ("False" code nil (reparse-symbol indented_block_body) [17906 17911])
                            ("self" variable nil (reparse-symbol indented_block_body) [17944 18097])
                            ("self" variable nil (reparse-symbol indented_block_body) [18106 18130])
                            ("self" variable nil (reparse-symbol indented_block_body) [18266 18298])
                            ("if" code nil (reparse-symbol indented_block_body) [18307 18617])
                            ("if" code nil (reparse-symbol indented_block_body) [18625 18673]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16161 16165])
                            ("exc_type" variable nil (reparse-symbol function_parameters) [16167 16175])
                            ("exc_value" variable nil (reparse-symbol function_parameters) [16177 16186])
                            ("exc_traceback" variable nil (reparse-symbol function_parameters) [16188 16201])
                            ("limit" variable nil (reparse-symbol function_parameters) [16206 16211])
                            ("lookup_lines" variable nil (reparse-symbol function_parameters) [16230 16242])
                            ("capture_locals" variable nil (reparse-symbol function_parameters) [16249 16263])
                            ("_seen" variable nil (reparse-symbol function_parameters) [16271 16276]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16148 18673])
                    ("from_exception" function
                       (:parent "dummy"
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18714 18718])
                            ("exc" variable nil (reparse-symbol function_parameters) [18720 18723])
                            ("args" variable nil (reparse-symbol function_parameters) [18725 18730])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18732 18740]))                          
                        :documentation "Create a TracebackException from an exception.")
                        (reparse-symbol indented_block_body) [18678 18903])
                    ("_load_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18924 18928]))                          
                        :documentation "Private API. force all lines in the stack to be loaded.")
                        (reparse-symbol indented_block_body) [18908 19197])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19213 19217])
                            ("other" variable nil (reparse-symbol function_parameters) [19219 19224]))                          )
                        (reparse-symbol indented_block_body) [19202 19274])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19291 19295]))                          )
                        (reparse-symbol indented_block_body) [19279 19323])
                    ("format_exception_only" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19354 19358]))                          
                        :documentation "Format the exception part of the traceback.

        The return value is a generator of strings, each ending in a newline.

        Normally, the generator emits a single string; however, for
        SyntaxError exceptions, it emites several lines that (when
        printed) display detailed information about where the syntax
        error occurred.

        The message indicating which exception occurred is always the last
        string in the output.
        ")
                        (reparse-symbol indented_block_body) [19328 21144])
                    ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21160 21164])
                            ("chain" variable nil (reparse-symbol function_parameters) [21169 21174]))                          
                        :documentation "Format the exception.

        If chain is not *True*, *__cause__* and *__context__* will not be formatted.

        The return value is a generator of strings, each ending in a newline and
        some containing internal newlines. `print_exception` is a wrapper around
        this method which just prints the lines to a file.

        The message indicating which exception occurred is always the last
        string in the output.
        ")
                        (reparse-symbol indented_block_body) [21149 22190]))                  
                :type "class")
                nil [14882 22190]))          
      :file "traceback.py"
      :pointmax 22190
      :fsize 22189
      :lastmodtime '(22333 27206 458105 879000)
      :unmatched-syntax '((MULT 21166 . 21167) (COMMA 21167 . 21168) (NAME 17815 . 17819) (IF 17888 . 17890) (ELSE 17901 . 17905) (MULT 16203 . 16204) (COMMA 16204 . 16205) (MULT 11290 . 11291) (COMMA 11291 . 11292) (NAME 9412 . 9416) (IF 9486 . 9488) (ELSE 9496 . 9500) (MULT 8761 . 8762) (COMMA 8762 . 8763)))
    (semanticdb-table "linecache.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Cache lines from Python source files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
\"\"\"" code nil nil [1 202])
            ("functools" include nil nil [204 220])
            ("sys" include nil nil [221 231])
            ("os" include nil nil [232 241])
            ("tokenize" include nil nil [242 257])
            ("__all__" variable nil nil [259 308])
            ("getline" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [322 330])
                ("lineno" variable nil (reparse-symbol function_parameters) [332 338])
                ("module_globals" variable nil (reparse-symbol function_parameters) [340 354]))              ) nil [310 502])
            ("cache" variable nil nil [652 662])
            ("clearcache" function (:documentation "Clear the cache entirely.") nil [665 752])
            ("getlines" function
               (:documentation "Get the lines for a Python source file from the cache.
    Update the cache if it doesn't contain an entry for this file already."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [767 775])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [777 791]))                  )
                nil [754 1190])
            ("checkcache" function
               (:documentation "Discard cache entries that are out of date.
    (This is not checked upon each call!)"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1207 1215]))                  )
                nil [1192 2006])
            ("updatecache" function
               (:documentation "Update a cache entry and return its list of lines.
    If something's wrong, print a message, discard the cache entry,
    and return an empty list."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [2024 2032])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [2034 2048]))                  )
                nil [2008 4115])
            ("lazycache" function
               (:documentation "Seed the cache for filename with module_globals.

    The module loader will be asked for the source only when getlines is
    called, not immediately.

    If there is an entry in the cache already, it is not altered.

    :return: True if a lazy load is registered in the cache,
        otherwise False. To register such a load a module loader with a
        get_source method must be found, the filename must be a cachable
        filename, and the filename must not be already cached.
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [4131 4139])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [4141 4155]))                  )
                nil [4117 5313]))          
      :file "linecache.py"
      :pointmax 5313
      :fsize 5312
      :lastmodtime '(22333 27206 306105 882000)
      :unmatched-syntax nil)
    (semanticdb-table "abc.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("_weakrefset" include nil nil [161 192])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [214 221]))                  )
                nil [195 772])
            ("abstractclassmethod" type
               (:documentation "
    A decorator indicating abstract classmethods.

    Similar to abstractmethod.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractclassmethod
            def my_abstract_classmethod(cls, ...):
                ...

    'abstractclassmethod' is deprecated. Use 'classmethod' with
    'abstractmethod' instead.
    "
                :superclasses ("classmethod")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1165 1192])
                    ("__init__" function
                       (:suite 
                          ( ("callable" variable nil (reparse-symbol indented_block_body) [1236 1272])
                            ("super" code nil (reparse-symbol indented_block_body) [1281 1307]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1211 1215])
                            ("callable" variable nil (reparse-symbol function_parameters) [1217 1225]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1198 1308]))                  
                :type "class")
                nil [774 1308])
            ("abstractstaticmethod" type
               (:documentation "
    A decorator indicating abstract staticmethods.

    Similar to abstractmethod.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractstaticmethod
            def my_abstract_staticmethod(...):
                ...

    'abstractstaticmethod' is deprecated. Use 'staticmethod' with
    'abstractmethod' instead.
    "
                :superclasses ("staticmethod")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1703 1730])
                    ("__init__" function
                       (:suite 
                          ( ("callable" variable nil (reparse-symbol indented_block_body) [1774 1810])
                            ("super" code nil (reparse-symbol indented_block_body) [1819 1845]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1749 1753])
                            ("callable" variable nil (reparse-symbol function_parameters) [1755 1763]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1736 1846]))                  
                :type "class")
                nil [1310 1846])
            ("abstractproperty" type
               (:documentation "
    A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C(metaclass=ABCMeta):
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)

    'abstractproperty' is deprecated. Use 'property' with 'abstractmethod'
    instead.
    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [2773 2800]))                  
                :type "class")
                nil [1848 2801])
            ("ABCMeta" type
               (:documentation "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "
                :superclasses ("type")
                :members 
                  ( ("_abc_invalidation_counter" variable nil (reparse-symbol indented_block_body) [3741 3770])
                    ("__new__" function (:arguments 
                      ( ("mcls" variable nil (reparse-symbol function_parameters) [3788 3792])
                        ("name" variable nil (reparse-symbol function_parameters) [3794 3798])
                        ("bases" variable nil (reparse-symbol function_parameters) [3800 3805])
                        ("namespace" variable nil (reparse-symbol function_parameters) [3807 3816]))                      ) (reparse-symbol indented_block_body) [3776 4637])
                    ("register" function
                       (:documentation "Register a virtual subclass of an ABC.

        Returns the subclass, to allow usage as a class decorator.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4655 4658])
                            ("subclass" variable nil (reparse-symbol function_parameters) [4660 4668]))                          )
                        (reparse-symbol indented_block_body) [4642 5468])
                    ("_dump_registry" function
                       (:documentation "Debug helper to print the ABC registry."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5492 5495])
                            ("file" variable nil (reparse-symbol function_parameters) [5497 5501]))                          )
                        (reparse-symbol indented_block_body) [5473 5913])
                    ("__instancecheck__" function
                       (:documentation "Override for isinstance(instance, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5940 5943])
                            ("instance" variable nil (reparse-symbol function_parameters) [5945 5953]))                          )
                        (reparse-symbol indented_block_body) [5918 6572])
                    ("__subclasscheck__" function
                       (:documentation "Override for issubclass(subclass, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6599 6602])
                            ("subclass" variable nil (reparse-symbol function_parameters) [6604 6612]))                          )
                        (reparse-symbol indented_block_body) [6577 8159]))                  
                :type "class")
                nil [2803 8159])
            ("ABC" type
               (:documentation "Helper class that provides a standard way to create an ABC using
    inheritance.
    "
                :superclasses ("ABCMeta")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [8292 8296]))                  
                :type "class")
                nil [8161 8297])
            ("get_cache_token" function (:documentation "Returns the current ABC cache token.

    The token is an opaque object (supporting equality testing) identifying the
    current version of the ABC cache for virtual subclasses. The token changes
    with every call to ``register()`` on any ABC.
    ") nil [8299 8629]))          
      :file "abc.py"
      :pointmax 8629
      :fsize 8628
      :lastmodtime '(22333 27206 194105 884000)
      :unmatched-syntax '((NAME 8171 . 8180) (ASSIGN 8180 . 8181)))
    (semanticdb-table "sre_compile.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [225 262])
            ("_sre" include nil nil [264 275])
            ("sre_parse" include nil nil [276 292])
            ("sre_constants" include nil nil [293 320])
            ("assert" code nil nil [322 371])
            ("_LITERAL_CODES" variable nil nil [373 412])
            ("_REPEATING_CODES" variable nil nil [413 464])
            ("_SUCCESS_CODES" variable nil nil [465 500])
            ("_ASSERT_CODES" variable nil nil [501 537])
            ("_equivalences" variable nil nil [601 2045])
            ("_ignorecase_fixes" variable nil nil [2123 2232])
            ("_compile" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [2247 2251])
                ("pattern" variable nil (reparse-symbol function_parameters) [2253 2260])
                ("flags" variable nil (reparse-symbol function_parameters) [2262 2267]))              ) nil [2234 7709])
            ("_compile_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [7731 7738])
                ("flags" variable nil (reparse-symbol function_parameters) [7740 7745])
                ("code" variable nil (reparse-symbol function_parameters) [7747 7751])
                ("fixup" variable nil (reparse-symbol function_parameters) [7753 7758])
                ("fixes" variable nil (reparse-symbol function_parameters) [7765 7770]))              ) nil [7710 8546])
            ("_optimize_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [8569 8576])
                ("fixup" variable nil (reparse-symbol function_parameters) [8578 8583])
                ("fixes" variable nil (reparse-symbol function_parameters) [8585 8590]))              ) nil [8547 12996])
            ("_CODEBITS" code nil nil [12997 13026])
            ("MAXCODE" code nil nil [13027 13057])
            ("_mk_bitmap" function (:arguments 
              ( ("bits" variable nil (reparse-symbol function_parameters) [13105 13109])
                ("_CODEBITS" variable nil (reparse-symbol function_parameters) [13111 13120])
                ("_int" variable nil (reparse-symbol function_parameters) [13132 13136]))              ) nil [13090 13277])
            ("_bytes_to_codes" function (:arguments 
              ( ("b" variable nil (reparse-symbol function_parameters) [13298 13299]))              ) nil [13278 13478])
            ("_simple" function (:arguments 
              ( ("av" variable nil (reparse-symbol function_parameters) [13491 13493]))              ) nil [13479 13622])
            ("_generate_overlap_table" function
               (:documentation "
    Generate an overlap table for the following prefix.
    An overlap table is a table of the same size as the prefix which
    informs about the potential self-overlap for each index in the prefix:
    - if overlap[i] == 0, prefix[i:] can't overlap prefix[0:...]
    - if overlap[i] == k with 0 < k <= i, prefix[i-k+1:i+1] overlaps with
      prefix[0:k]
    "
                :arguments 
                  ( ("prefix" variable nil (reparse-symbol function_parameters) [13651 13657]))                  )
                nil [13623 14337])
            ("_compile_info" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [14356 14360])
                ("pattern" variable nil (reparse-symbol function_parameters) [14362 14369])
                ("flags" variable nil (reparse-symbol function_parameters) [14371 14376]))              ) nil [14338 17519])
            ("isstring" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [17533 17536]))              ) nil [17520 17580])
            ("_code" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [17591 17592])
                ("flags" variable nil (reparse-symbol function_parameters) [17594 17599]))              ) nil [17581 17817])
            ("compile" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [17830 17831])
                ("flags" variable nil (reparse-symbol function_parameters) [17833 17838]))              ) nil [17818 18374]))          
      :file "sre_compile.py"
      :pointmax 18374
      :fsize 18410
      :lastmodtime '(22333 27206 414105 880000)
      :unmatched-syntax nil)
    (semanticdb-table "sre_parse.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [240 277])
            ("sre_constants" include nil nil [345 372])
            ("SPECIAL_CHARS" variable nil nil [374 405])
            ("REPEAT_CHARS" variable nil nil [406 427])
            ("DIGITS" variable nil nil [429 461])
            ("OCTDIGITS" variable nil nil [463 496])
            ("HEXDIGITS" variable nil nil [497 544])
            ("ASCIILETTERS" variable nil nil [545 625])
            ("WHITESPACE" variable nil nil [627 664])
            ("_REPEATCODES" variable nil nil [666 716])
            ("_UNITCODES" variable nil nil [717 789])
            ("ESCAPES" variable nil nil [791 1067])
            ("CATEGORIES" variable nil nil [1069 1545])
            ("FLAGS" variable nil nil [1547 1814])
            ("Pattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1926 1940])
                            ("self" variable nil (reparse-symbol indented_block_body) [1949 1968])
                            ("self" variable nil (reparse-symbol indented_block_body) [1977 2002])
                            ("self" variable nil (reparse-symbol indented_block_body) [2022 2050]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1911 1915]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1898 2051])
                    ("groups" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2080 2084]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2055 2124])
                    ("opengroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2142 2146])
                            ("name" variable nil (reparse-symbol function_parameters) [2148 2152]))                          )
                        (reparse-symbol indented_block_body) [2128 2612])
                    ("closegroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2631 2635])
                            ("gid" variable nil (reparse-symbol function_parameters) [2637 2640])
                            ("p" variable nil (reparse-symbol function_parameters) [2642 2643]))                          )
                        (reparse-symbol indented_block_body) [2616 2691])
                    ("checkgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2710 2714])
                            ("gid" variable nil (reparse-symbol function_parameters) [2716 2719]))                          )
                        (reparse-symbol indented_block_body) [2695 2793])
                    ("checklookbehindgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2823 2827])
                            ("gid" variable nil (reparse-symbol function_parameters) [2829 2832])
                            ("source" variable nil (reparse-symbol function_parameters) [2834 2840]))                          )
                        (reparse-symbol indented_block_body) [2798 3183]))                  
                :type "class")
                nil [1816 3183])
            ("SubPattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3295 3317])
                            ("if" code nil (reparse-symbol indented_block_body) [3326 3365])
                            ("self" variable nil (reparse-symbol indented_block_body) [3373 3389])
                            ("self" variable nil (reparse-symbol indented_block_body) [3398 3415]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3260 3264])
                            ("pattern" variable nil (reparse-symbol function_parameters) [3266 3273])
                            ("data" variable nil (reparse-symbol function_parameters) [3275 3279]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3247 3416])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3429 3433])
                            ("level" variable nil (reparse-symbol function_parameters) [3435 3440]))                          )
                        (reparse-symbol indented_block_body) [3420 4827])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4844 4848]))                          )
                        (reparse-symbol indented_block_body) [4831 4882])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4898 4902]))                          )
                        (reparse-symbol indented_block_body) [4886 4935])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4955 4959])
                            ("index" variable nil (reparse-symbol function_parameters) [4961 4966]))                          )
                        (reparse-symbol indented_block_body) [4939 4998])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5018 5022])
                            ("index" variable nil (reparse-symbol function_parameters) [5024 5029]))                          )
                        (reparse-symbol indented_block_body) [5002 5163])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5183 5187])
                            ("index" variable nil (reparse-symbol function_parameters) [5189 5194])
                            ("code" variable nil (reparse-symbol function_parameters) [5196 5200]))                          )
                        (reparse-symbol indented_block_body) [5167 5235])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5250 5254])
                            ("index" variable nil (reparse-symbol function_parameters) [5256 5261])
                            ("code" variable nil (reparse-symbol function_parameters) [5263 5267]))                          )
                        (reparse-symbol indented_block_body) [5239 5308])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5323 5327])
                            ("code" variable nil (reparse-symbol function_parameters) [5329 5333]))                          )
                        (reparse-symbol indented_block_body) [5312 5367])
                    ("getwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5384 5388]))                          )
                        (reparse-symbol indented_block_body) [5371 6965]))                  
                :type "class")
                nil [3184 6965])
            ("Tokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7023 7060])
                            ("self" variable nil (reparse-symbol indented_block_body) [7069 7089])
                            ("if" code nil (reparse-symbol indented_block_body) [7098 7161])
                            ("self" variable nil (reparse-symbol indented_block_body) [7169 7197])
                            ("self" variable nil (reparse-symbol indented_block_body) [7206 7220])
                            ("self" variable nil (reparse-symbol indented_block_body) [7229 7245])
                            ("self" code nil (reparse-symbol indented_block_body) [7254 7267]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7000 7004])
                            ("string" variable nil (reparse-symbol function_parameters) [7006 7012]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6987 7268])
                    ("subpattern" code nil (reparse-symbol indented_block_body) [29593 29603]))                  
                :type "class")
                nil [6966 29604])
            ("fix_flags" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [29619 29622])
                ("flags" variable nil (reparse-symbol function_parameters) [29624 29629]))              ) nil [29605 30591])
            ("parse" function (:arguments 
              ( ("str" variable nil (reparse-symbol function_parameters) [30602 30605])
                ("flags" variable nil (reparse-symbol function_parameters) [30607 30612])
                ("pattern" variable nil (reparse-symbol function_parameters) [30616 30623]))              ) nil [30592 31359])
            ("parse_template" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [31379 31385])
                ("pattern" variable nil (reparse-symbol function_parameters) [31387 31394]))              ) nil [31360 34965]))          
      :file "sre_parse.py"
      :pointmax 34965
      :fsize 34964
      :lastmodtime '(22333 27206 418105 880000)
      :unmatched-syntax nil)
    (semanticdb-table "copyreg.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 171])
            ("__all__" variable nil nil [173 281])
            ("dispatch_table" variable nil nil [283 302])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [315 322])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [324 339])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [341 355]))              ) nil [304 714])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [731 737]))              ) nil [715 826])
            ("try" code nil nil [885 1050])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1112 1115])
                ("base" variable nil (reparse-symbol function_parameters) [1117 1121])
                ("state" variable nil (reparse-symbol function_parameters) [1123 1128]))              ) nil [1093 1335])
            ("_HEAPTYPE" code nil nil [1336 1352])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1431 1435])
                    ("proto" variable nil (reparse-symbol function_parameters) [1437 1442]))                  )
                nil [1416 2378])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2433 2436])
                ("args" variable nil (reparse-symbol function_parameters) [2438 2443]))              ) nil [2418 2481])
            ("__newobj_ex__" function
               (:documentation "Used by pickle protocol 4, instead of __newobj__ to allow classes with
    keyword-only arguments to be pickled correctly.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2500 2503])
                    ("args" variable nil (reparse-symbol function_parameters) [2505 2509])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [2511 2517]))                  )
                nil [2482 2703])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2719 2722]))                  )
                nil [2704 4378])
            ("_extension_registry" variable nil nil [4860 4884])
            ("_inverted_registry" variable nil nil [4914 4937])
            ("_extension_cache" variable nil nil [4968 4989])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5165 5171])
                    ("name" variable nil (reparse-symbol function_parameters) [5173 5177])
                    ("code" variable nil (reparse-symbol function_parameters) [5179 5183]))                  )
                nil [5147 5894])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5916 5922])
                    ("name" variable nil (reparse-symbol function_parameters) [5924 5928])
                    ("code" variable nil (reparse-symbol function_parameters) [5930 5934]))                  )
                nil [5895 6354])
            ("clear_extension_cache" function nil nil [6355 6413]))          
      :file "copyreg.py"
      :pointmax 6834
      :fsize 6833
      :lastmodtime '(22333 27206 242105 883000)
      :unmatched-syntax nil)
    (semanticdb-table "string.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"A collection of string constants.

Public module variables:

whitespace -- a string containing all ASCII whitespace
ascii_lowercase -- a string containing all ASCII lowercase letters
ascii_uppercase -- a string containing all ASCII uppercase letters
ascii_letters -- a string containing all ASCII letters
digits -- a string containing all ASCII decimal digits
hexdigits -- a string containing all ASCII hexadecimal digits
octdigits -- a string containing all ASCII octal digits
punctuation -- a string containing all ASCII punctuation characters
printable -- a string containing all ASCII characters considered printable

\"\"\"" code nil nil [1 629])
            ("_string" include nil nil [631 645])
            ("whitespace" variable nil nil [703 729])
            ("ascii_lowercase" variable nil nil [730 776])
            ("ascii_uppercase" variable nil nil [777 823])
            ("ascii_letters" code nil nil [824 873])
            ("digits" variable nil nil [874 895])
            ("hexdigits" code nil nil [896 936])
            ("octdigits" variable nil nil [937 959])
            ("punctuation" variable nil nil [960 1012])
            ("printable" code nil nil [1013 1074])
            ("capwords" function
               (:documentation "capwords(s [,sep]) -> string

    Split the argument into words using split, capitalize each
    word using capitalize, and join the capitalized words using
    join.  If the optional second argument sep is absent or None,
    runs of whitespace characters are replaced by a single space
    and leading and trailing whitespace are removed, otherwise
    sep is used to split and join the words.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1212 1213])
                    ("sep" variable nil (reparse-symbol function_parameters) [1215 1218]))                  )
                nil [1199 1705])
            ("re" include nil nil [1776 1792])
            ("collections" include nil nil [1793 1825])
            ("_TemplateMetaclass" type
               (:superclasses ("type")
                :members 
                  ( ("pattern" variable nil (reparse-symbol indented_block_body) [1863 2183])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [2234 2291])
                            ("if" code nil (reparse-symbol indented_block_body) [2300 2534])
                            ("cls" variable nil (reparse-symbol indented_block_body) [2542 2601]))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2202 2205])
                            ("name" variable nil (reparse-symbol function_parameters) [2207 2211])
                            ("bases" variable nil (reparse-symbol function_parameters) [2213 2218])
                            ("dct" variable nil (reparse-symbol function_parameters) [2220 2223]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2189 2602]))                  
                :type "class")
                nil [1827 2602])
            ("Template" type
               (:documentation "A string class for supporting $-substitutions."
                :superclasses ("_TemplateMetaclass")
                :members 
                  ( ("delimiter" variable nil (reparse-symbol indented_block_body) [2712 2727])
                    ("idpattern" variable nil (reparse-symbol indented_block_body) [2732 2763])
                    ("flags" variable nil (reparse-symbol indented_block_body) [2768 2790])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2834 2858]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2809 2813])
                            ("template" variable nil (reparse-symbol function_parameters) [2815 2823]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2796 2859])
                    ("_invalid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2944 2948])
                            ("mo" variable nil (reparse-symbol function_parameters) [2950 2952]))                          )
                        (reparse-symbol indented_block_body) [2931 3327])
                    ("substitute" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [3347 3352])
                        ("kws" variable nil (reparse-symbol function_parameters) [3354 3359]))                      ) (reparse-symbol indented_block_body) [3332 4580])
                    ("safe_substitute" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [4605 4610])
                        ("kws" variable nil (reparse-symbol function_parameters) [4612 4617]))                      ) (reparse-symbol indented_block_body) [4585 5861]))                  
                :type "class")
                nil [2604 5861])
            ("Formatter" type
               (:members 
                  ( ("format" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [6295 6300])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [6302 6310]))                      ) (reparse-symbol indented_block_body) [6284 7159])
                    ("vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7176 7180])
                            ("format_string" variable nil (reparse-symbol function_parameters) [7182 7195])
                            ("args" variable nil (reparse-symbol function_parameters) [7197 7201])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7203 7209]))                          )
                        (reparse-symbol indented_block_body) [7164 7393])
                    ("_vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7411 7415])
                            ("format_string" variable nil (reparse-symbol function_parameters) [7417 7430])
                            ("args" variable nil (reparse-symbol function_parameters) [7432 7436])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7438 7444])
                            ("used_args" variable nil (reparse-symbol function_parameters) [7446 7455])
                            ("recursion_depth" variable nil (reparse-symbol function_parameters) [7457 7472])
                            ("auto_arg_index" variable nil (reparse-symbol function_parameters) [7491 7505]))                          )
                        (reparse-symbol indented_block_body) [7398 9741])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9761 9765])
                            ("key" variable nil (reparse-symbol function_parameters) [9767 9770])
                            ("args" variable nil (reparse-symbol function_parameters) [9772 9776])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9778 9784]))                          )
                        (reparse-symbol indented_block_body) [9747 9894])
                    ("check_unused_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9922 9926])
                            ("used_args" variable nil (reparse-symbol function_parameters) [9928 9937])
                            ("args" variable nil (reparse-symbol function_parameters) [9939 9943])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9945 9951]))                          )
                        (reparse-symbol indented_block_body) [9900 9967])
                    ("format_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9990 9994])
                            ("value" variable nil (reparse-symbol function_parameters) [9996 10001])
                            ("format_spec" variable nil (reparse-symbol function_parameters) [10003 10014]))                          )
                        (reparse-symbol indented_block_body) [9973 10059])
                    ("convert_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10083 10087])
                            ("value" variable nil (reparse-symbol function_parameters) [10089 10094])
                            ("conversion" variable nil (reparse-symbol function_parameters) [10096 10106]))                          )
                        (reparse-symbol indented_block_body) [10065 10488])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10863 10867])
                            ("format_string" variable nil (reparse-symbol function_parameters) [10869 10882]))                          )
                        (reparse-symbol indented_block_body) [10853 10940])
                    ("get_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11217 11221])
                            ("field_name" variable nil (reparse-symbol function_parameters) [11223 11233])
                            ("args" variable nil (reparse-symbol function_parameters) [11235 11239])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11241 11247]))                          )
                        (reparse-symbol indented_block_body) [11203 11636]))                  
                :type "class")
                nil [6263 11636]))          
      :file "string.py"
      :pointmax 11636
      :fsize 11635
      :lastmodtime '(22333 27206 422105 880000)
      :unmatched-syntax '((RAISE 6973 . 6978) (FROM 7092 . 7096) (NEWLINE 7101 . 7102) (NAME 6546 . 6559) (MULT 6561 . 6562) (NAME 6464 . 6468) (MULT 6470 . 6471) (NAME 4779 . 4783) (MULT 4785 . 4786) (NAME 3516 . 3520) (MULT 3522 . 3523) (NAME 2619 . 2628) (ASSIGN 2628 . 2629)))
    (semanticdb-table "fnmatch.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Filename matching with shell patterns.

fnmatch(FILENAME, PATTERN) matches according to the local convention.
fnmatchcase(FILENAME, PATTERN) always takes case in account.

The functions operate by translating the pattern into a regular
expression.  They cache the compiled regular expressions for speed.

The function translate(PATTERN) returns a regular expression
corresponding to PATTERN.  (It does not compile it.)
\"\"\"" code nil nil [1 426])
            ("os" include nil nil [427 436])
            ("posixpath" include nil nil [437 453])
            ("re" include nil nil [454 463])
            ("functools" include nil nil [464 480])
            ("__all__" variable nil nil [482 541])
            ("fnmatch" function
               (:documentation "Test whether FILENAME matches PATTERN.

    Patterns are Unix shell style:

    *       matches everything
    ?       matches any single character
    [seq]   matches any character in seq
    [!seq]  matches any char not in seq

    An initial period in FILENAME is not special.
    Both FILENAME and PATTERN are first case-normalized
    if the operating system requires it.
    If you don't want this, use fnmatchcase(FILENAME, PATTERN).
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [555 559])
                    ("pat" variable nil (reparse-symbol function_parameters) [561 564]))                  )
                nil [543 1123])
            ("" code nil nil [1144 1169])
            ("_compile_pattern" function (:arguments 
              ( ("pat" variable nil (reparse-symbol function_parameters) [1191 1194]))              ) nil [1170 1421])
            ("filter" function
               (:documentation "Return the subset of the list NAMES that match PAT."
                :arguments 
                  ( ("names" variable nil (reparse-symbol function_parameters) [1433 1438])
                    ("pat" variable nil (reparse-symbol function_parameters) [1440 1443]))                  )
                nil [1422 1915])
            ("fnmatchcase" function
               (:documentation "Test whether FILENAME matches PATTERN, including case.

    This is a version of fnmatch() which doesn't case-normalize
    its arguments.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1932 1936])
                    ("pat" variable nil (reparse-symbol function_parameters) [1938 1941]))                  )
                nil [1916 2167])
            ("translate" function
               (:documentation "Translate a shell PATTERN to a regular expression.

    There is no way to quote meta-characters.
    "
                :arguments 
                  ( ("pat" variable nil (reparse-symbol function_parameters) [2183 2186]))                  )
                nil [2169 3164]))          
      :file "fnmatch.py"
      :pointmax 3164
      :fsize 3163
      :lastmodtime '(22333 27206 266105 883000)
      :unmatched-syntax nil)
    (semanticdb-table "types.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
Define names for built-in types that aren't directly accessible as a builtin.
\"\"\"" code nil nil [1 86])
            ("sys" include nil nil [87 97])
            ("_f" function nil nil [352 367])
            ("FunctionType" variable nil nil [367 390])
            ("LambdaType" variable nil nil [391 422])
            ("CodeType" variable nil nil [454 482])
            ("MappingProxyType" variable nil nil [483 521])
            ("SimpleNamespace" variable nil nil [522 564])
            ("_g" function nil nil [566 588])
            ("GeneratorType" variable nil nil [588 614])
            ("_c" function nil nil [622 637])
            ("_c" variable nil nil [637 646])
            ("CoroutineType" variable nil nil [647 671])
            ("_c" code nil nil [672 682])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [732 736]))                          )
                        (reparse-symbol indented_block_body) [725 744]))                  
                :type "class")
                nil [711 744])
            ("MethodType" variable nil nil [744 770])
            ("BuiltinFunctionType" variable nil nil [772 803])
            ("BuiltinMethodType" variable nil nil [804 839])
            ("ModuleType" variable nil nil [875 897])
            ("try" code nil nil [899 1054])
            ("GetSetDescriptorType" variable nil nil [1107 1157])
            ("MemberDescriptorType" variable nil nil [1158 1211])
            ("del" code nil nil [1213 1237])
            ("new_class" function
               (:documentation "Create a class object dynamically using the appropriate metaclass."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1357 1361])
                    ("bases" variable nil (reparse-symbol function_parameters) [1363 1368])
                    ("kwds" variable nil (reparse-symbol function_parameters) [1373 1377])
                    ("exec_body" variable nil (reparse-symbol function_parameters) [1384 1393]))                  )
                nil [1343 1625])
            ("prepare_class" function
               (:documentation "Call the __prepare__ method of the appropriate metaclass.

    Returns (metaclass, namespace, kwds) as a 3-tuple

    *metaclass* is the appropriate metaclass
    *namespace* is the prepared class namespace
    *kwds* is an updated copy of the passed in kwds argument with any
    'metaclass' entry removed. If no kwds argument is passed in, this will
    be an empty dict.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1644 1648])
                    ("bases" variable nil (reparse-symbol function_parameters) [1650 1655])
                    ("kwds" variable nil (reparse-symbol function_parameters) [1660 1664]))                  )
                nil [1626 2689])
            ("_calculate_meta" function
               (:documentation "Calculate the most derived metaclass."
                :arguments 
                  ( ("meta" variable nil (reparse-symbol function_parameters) [2710 2714])
                    ("bases" variable nil (reparse-symbol function_parameters) [2716 2721]))                  )
                nil [2690 3264])
            ("DynamicClassAttribute" type
               (:documentation "Route attribute access on a class to __getattr__.

    This is a descriptor, used to define attributes that act differently when
    accessed through an instance and through a class.  Instance access remains
    normal, but access to an attribute through a class will be routed to the
    class's __getattr__ method; this is done by raising AttributeError.

    This allows one to have properties active on an instance, and have virtual
    attributes on the class with the same name (see Enum for an example).

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3896 3912])
                            ("self" variable nil (reparse-symbol indented_block_body) [3921 3937])
                            ("self" variable nil (reparse-symbol indented_block_body) [3946 3962])
                            ("self" code nil (reparse-symbol indented_block_body) [4048 4082])
                            ("self" code nil (reparse-symbol indented_block_body) [4091 4123])
                            ("self" variable nil (reparse-symbol indented_block_body) [4171 4249]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3838 3842])
                            ("fget" variable nil (reparse-symbol function_parameters) [3844 3848])
                            ("fset" variable nil (reparse-symbol function_parameters) [3855 3859])
                            ("fdel" variable nil (reparse-symbol function_parameters) [3866 3870])
                            ("doc" variable nil (reparse-symbol function_parameters) [3877 3880]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3825 4250])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4267 4271])
                            ("instance" variable nil (reparse-symbol function_parameters) [4273 4281])
                            ("ownerclass" variable nil (reparse-symbol function_parameters) [4283 4293]))                          )
                        (reparse-symbol indented_block_body) [4255 4559])
                    ("__set__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4576 4580])
                            ("instance" variable nil (reparse-symbol function_parameters) [4582 4590])
                            ("value" variable nil (reparse-symbol function_parameters) [4592 4597]))                          )
                        (reparse-symbol indented_block_body) [4564 4721])
                    ("__delete__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4741 4745])
                            ("instance" variable nil (reparse-symbol function_parameters) [4747 4755]))                          )
                        (reparse-symbol indented_block_body) [4726 4875])
                    ("getter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4891 4895])
                            ("fget" variable nil (reparse-symbol function_parameters) [4897 4901]))                          )
                        (reparse-symbol indented_block_body) [4880 5114])
                    ("setter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5130 5134])
                            ("fset" variable nil (reparse-symbol function_parameters) [5136 5140]))                          )
                        (reparse-symbol indented_block_body) [5119 5285])
                    ("deleter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5302 5306])
                            ("fdel" variable nil (reparse-symbol function_parameters) [5308 5312]))                          )
                        (reparse-symbol indented_block_body) [5290 5457]))                  
                :type "class")
                nil [3265 5457])
            ("functools" include nil nil [5459 5489])
            ("collections.abc" include nil nil [5490 5532])
            ("_GeneratorWrapper" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5629 5649])
                            ("self" code nil (reparse-symbol indented_block_body) [5658 5703])
                            ("self" variable nil (reparse-symbol indented_block_body) [5712 5758])
                            ("self" variable nil (reparse-symbol indented_block_body) [5767 5821]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5609 5613])
                            ("gen" variable nil (reparse-symbol function_parameters) [5615 5618]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5596 5822])
                    ("send" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5835 5839])
                            ("val" variable nil (reparse-symbol function_parameters) [5841 5844]))                          )
                        (reparse-symbol indented_block_body) [5826 5887])
                    ("throw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5901 5905])
                            ("tp" variable nil (reparse-symbol function_parameters) [5907 5909])
                            ("rest" variable nil (reparse-symbol function_parameters) [5911 5916]))                          )
                        (reparse-symbol indented_block_body) [5891 5966])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5980 5984]))                          )
                        (reparse-symbol indented_block_body) [5970 6025])
                    ("gi_code" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6055 6059]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6029 6100])
                    ("gi_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6131 6135]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6104 6177])
                    ("gi_running" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6210 6214]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6181 6258])
                    ("gi_yieldfrom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6293 6297]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6262 6343])
                    ("cr_code" variable nil (reparse-symbol indented_block_body) [6347 6364])
                    ("cr_frame" variable nil (reparse-symbol indented_block_body) [6369 6388])
                    ("cr_running" variable nil (reparse-symbol indented_block_body) [6393 6416])
                    ("cr_await" variable nil (reparse-symbol indented_block_body) [6421 6444])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6462 6466]))                          )
                        (reparse-symbol indented_block_body) [6449 6505])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6522 6526]))                          )
                        (reparse-symbol indented_block_body) [6509 6608])
                    ("__await__" variable nil (reparse-symbol indented_block_body) [6612 6632]))                  
                :type "class")
                nil [5534 6633])
            ("coroutine" function
               (:documentation "Convert regular generator function to a coroutine."
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [6648 6652]))                  )
                nil [6634 8749])
            ("__all__" variable nil nil [8751 8799]))          
      :file "types.py"
      :pointmax 8800
      :fsize 8799
      :lastmodtime '(22333 27206 466105 879000)
      :unmatched-syntax '((NAME 4912 . 4916) (IF 4932 . 4934) (ELSE 4954 . 4958)))
    (semanticdb-table "io.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.

At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an OSError if they do not support a given operation.

Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.

BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.

Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is an in-memory stream for text.

Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.

data:

DEFAULT_BUFFER_SIZE

   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.
\"\"\"" code nil nil [1 1480])
            ("__author__" variable nil nil [1524 1861])
            ("__all__" variable nil nil [1863 2181])
            ("_io" include nil nil [2184 2194])
            ("abc" include nil nil [2195 2205])
            ("" code nil nil [2223 2473])
            ("OpenWrapper" variable nil nil [2475 2497])
            ("UnsupportedOperation" variable nil nil [2573 2611])
            ("SEEK_SET" variable nil nil [2626 2638])
            ("SEEK_CUR" variable nil nil [2639 2651])
            ("SEEK_END" variable nil nil [2652 2664])
            ("IOBase" type
               (:superclasses ("_io._IOBase" "abc.ABCMeta")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [2864 2893]))                  
                :type "class")
                nil [2810 2894])
            ("RawIOBase" type
               (:superclasses ("_io._RawIOBase" "IOBase")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [2940 2972]))                  
                :type "class")
                nil [2895 2973])
            ("BufferedIOBase" type
               (:superclasses ("_io._BufferedIOBase" "IOBase")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [3029 3066]))                  
                :type "class")
                nil [2974 3067])
            ("TextIOBase" type
               (:superclasses ("_io._TextIOBase" "IOBase")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [3115 3148]))                  
                :type "class")
                nil [3068 3149])
            ("RawIOBase" code nil nil [3150 3176])
            ("for" code nil nil [3178 3315])
            ("for" code nil nil [3316 3387])
            ("del" code nil nil [3387 3396]))          
      :file "io.py"
      :pointmax 3397
      :fsize 3396
      :lastmodtime '(22333 27206 298105 882000)
      :unmatched-syntax '((NAME 2836 . 2845) (ASSIGN 2845 . 2846)))
    (semanticdb-table "opcode.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
opcode module - potentially shared between dis and other modules which
operate on bytecodes (e.g. peephole optimizers).
\"\"\"" code nil nil [2 129])
            ("__all__" variable nil nil [131 319])
            ("try" code nil nil [533 639])
            ("cmp_op" variable nil nil [640 749])
            ("hasconst" variable nil nil [751 764])
            ("hasname" variable nil nil [765 777])
            ("hasjrel" variable nil nil [778 790])
            ("hasjabs" variable nil nil [791 803])
            ("haslocal" variable nil nil [804 817])
            ("hascompare" variable nil nil [818 833])
            ("hasfree" variable nil nil [834 846])
            ("hasnargs" variable nil nil [847 860])
            ("opmap" variable nil nil [862 872])
            ("opname" code nil nil [873 892])
            ("for" code nil nil [893 943])
            ("del" code nil nil [943 949])
            ("def_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [962 966])
                ("op" variable nil (reparse-symbol function_parameters) [968 970]))              ) nil [951 1016])
            ("name_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [1029 1033])
                ("op" variable nil (reparse-symbol function_parameters) [1035 1037]))              ) nil [1017 1084])
            ("jrel_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [1097 1101])
                ("op" variable nil (reparse-symbol function_parameters) [1103 1105]))              ) nil [1085 1152])
            ("jabs_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [1165 1169])
                ("op" variable nil (reparse-symbol function_parameters) [1171 1173]))              ) nil [1153 1220])
            ("def_op" code nil nil [1308 1328])
            ("def_op" code nil nil [1329 1349])
            ("def_op" code nil nil [1350 1372])
            ("def_op" code nil nil [1373 1393])
            ("def_op" code nil nil [1394 1418])
            ("def_op" code nil nil [1420 1436])
            ("def_op" code nil nil [1437 1465])
            ("def_op" code nil nil [1466 1494])
            ("def_op" code nil nil [1495 1518])
            ("def_op" code nil nil [1520 1546])
            ("def_op" code nil nil [1548 1584])
            ("def_op" code nil nil [1585 1622])
            ("def_op" code nil nil [1624 1650])
            ("def_op" code nil nil [1651 1680])
            ("def_op" code nil nil [1682 1709])
            ("def_op" code nil nil [1710 1734])
            ("def_op" code nil nil [1735 1764])
            ("def_op" code nil nil [1765 1792])
            ("def_op" code nil nil [1793 1826])
            ("def_op" code nil nil [1827 1859])
            ("def_op" code nil nil [1860 1894])
            ("def_op" code nil nil [1895 1928])
            ("def_op" code nil nil [1930 1953])
            ("def_op" code nil nil [1954 1977])
            ("def_op" code nil nil [1978 2009])
            ("def_op" code nil nil [2011 2036])
            ("def_op" code nil nil [2037 2067])
            ("def_op" code nil nil [2068 2098])
            ("def_op" code nil nil [2100 2128])
            ("def_op" code nil nil [2129 2155])
            ("def_op" code nil nil [2156 2183])
            ("def_op" code nil nil [2184 2211])
            ("def_op" code nil nil [2212 2239])
            ("def_op" code nil nil [2240 2264])
            ("def_op" code nil nil [2265 2289])
            ("def_op" code nil nil [2290 2313])
            ("def_op" code nil nil [2314 2341])
            ("def_op" code nil nil [2342 2364])
            ("def_op" code nil nil [2365 2398])
            ("def_op" code nil nil [2400 2424])
            ("def_op" code nil nil [2425 2455])
            ("def_op" code nil nil [2456 2480])
            ("def_op" code nil nil [2481 2508])
            ("def_op" code nil nil [2510 2538])
            ("def_op" code nil nil [2539 2567])
            ("def_op" code nil nil [2568 2593])
            ("def_op" code nil nil [2594 2619])
            ("def_op" code nil nil [2620 2644])
            ("def_op" code nil nil [2645 2669])
            ("def_op" code nil nil [2670 2702])
            ("def_op" code nil nil [2703 2736])
            ("def_op" code nil nil [2738 2764])
            ("def_op" code nil nil [2765 2790])
            ("def_op" code nil nil [2792 2817])
            ("def_op" code nil nil [2818 2841])
            ("def_op" code nil nil [2842 2867])
            ("def_op" code nil nil [2868 2892])
            ("HAVE_ARGUMENT" variable nil nil [2894 2912])
            ("name_op" code nil nil [2965 2990])
            ("name_op" code nil nil [3018 3044])
            ("def_op" code nil nil [3055 3084])
            ("jrel_op" code nil nil [3111 3134])
            ("def_op" code nil nil [3135 3158])
            ("name_op" code nil nil [3159 3184])
            ("name_op" code nil nil [3212 3238])
            ("name_op" code nil nil [3249 3276])
            ("name_op" code nil nil [3286 3314])
            ("def_op" code nil nil [3323 3348])
            ("hasconst" code nil nil [3377 3397])
            ("name_op" code nil nil [3398 3423])
            ("def_op" code nil nil [3451 3477])
            ("def_op" code nil nil [3507 3532])
            ("def_op" code nil nil [3562 3586])
            ("def_op" code nil nil [3616 3640])
            ("name_op" code nil nil [3684 3709])
            ("def_op" code nil nil [3737 3762])
            ("hascompare" code nil nil [3791 3813])
            ("name_op" code nil nil [3814 3841])
            ("name_op" code nil nil [3867 3894])
            ("jrel_op" code nil nil [3921 3949])
            ("jabs_op" code nil nil [3979 4015])
            ("jabs_op" code nil nil [4060 4095])
            ("jabs_op" code nil nil [4102 4131])
            ("jabs_op" code nil nil [4144 4177])
            ("jabs_op" code nil nil [4186 4218])
            ("name_op" code nil nil [4229 4256])
            ("jabs_op" code nil nil [4283 4312])
            ("jrel_op" code nil nil [4332 4358])
            ("jrel_op" code nil nil [4393 4421])
            ("jrel_op" code nil nil [4430 4459])
            ("def_op" code nil nil [4468 4492])
            ("haslocal" code nil nil [4524 4544])
            ("def_op" code nil nil [4545 4570])
            ("haslocal" code nil nil [4601 4621])
            ("def_op" code nil nil [4622 4648])
            ("haslocal" code nil nil [4678 4698])
            ("def_op" code nil nil [4700 4728])
            ("def_op" code nil nil [4773 4801])
            ("hasnargs" code nil nil [4830 4850])
            ("def_op" code nil nil [4851 4879])
            ("def_op" code nil nil [4920 4946])
            ("def_op" code nil nil [4970 4997])
            ("def_op" code nil nil [4998 5025])
            ("hasfree" code nil nil [5026 5045])
            ("def_op" code nil nil [5046 5071])
            ("hasfree" code nil nil [5072 5091])
            ("def_op" code nil nil [5092 5118])
            ("hasfree" code nil nil [5119 5138])
            ("def_op" code nil nil [5139 5166])
            ("hasfree" code nil nil [5167 5186])
            ("def_op" code nil nil [5188 5220])
            ("hasnargs" code nil nil [5250 5270])
            ("def_op" code nil nil [5271 5302])
            ("hasnargs" code nil nil [5333 5353])
            ("def_op" code nil nil [5354 5389])
            ("hasnargs" code nil nil [5416 5436])
            ("jrel_op" code nil nil [5438 5464])
            ("def_op" code nil nil [5466 5492])
            ("def_op" code nil nil [5493 5515])
            ("def_op" code nil nil [5516 5538])
            ("def_op" code nil nil [5540 5570])
            ("hasfree" code nil nil [5571 5590])
            ("jrel_op" code nil nil [5592 5624])
            ("def_op" code nil nil [5626 5653])
            ("EXTENDED_ARG" variable nil nil [5654 5672])
            ("def_op" code nil nil [5674 5706])
            ("def_op" code nil nil [5707 5738])
            ("def_op" code nil nil [5739 5780])
            ("def_op" code nil nil [5781 5814])
            ("def_op" code nil nil [5815 5846])
            ("del" code nil nil [5848 5885]))          
      :file "opcode.py"
      :pointmax 5886
      :fsize 5885
      :lastmodtime '(22333 27206 338105 881000)
      :unmatched-syntax nil)
    (semanticdb-table "argparse.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Command-line parsing library

This module is an optparse-inspired command-line parsing library that:

    - handles both optional and positional arguments
    - produces highly informative usage messages
    - supports parsers that dispatch to sub-parsers

The following is a simple usage example that sums integers from the
command-line and writes the result to a file::

    parser = argparse.ArgumentParser(
        description='sum the integers at the command line')
    parser.add_argument(
        'integers', metavar='int', nargs='+', type=int,
        help='an integer to be summed')
    parser.add_argument(
        '--log', default=sys.stdout, type=argparse.FileType('w'),
        help='the file where the sum should be written')
    args = parser.parse_args()
    args.log.write('%s' % sum(args.integers))
    args.log.close()

The module contains the following public classes:

    - ArgumentParser -- The main entry point for command-line parsing. As the
        example above shows, the add_argument() method is used to populate
        the parser with actions for optional and positional arguments. Then
        the parse_args() method is invoked to convert the args at the
        command-line into an object with attributes.

    - ArgumentError -- The exception raised by ArgumentParser objects when
        there are errors with the parser's actions. Errors raised while
        parsing the command-line are caught by ArgumentParser and emitted
        as command-line messages.

    - FileType -- A factory for defining types of files to be created. As the
        example above shows, instances of FileType are typically passed as
        the type= argument of add_argument() calls.

    - Action -- The base class for parser actions. Typically actions are
        selected by passing strings like 'store_true' or 'append_const' to
        the action= argument of add_argument(). However, for greater
        customization of ArgumentParser actions, subclasses of Action may
        be defined and passed as the action= argument.

    - HelpFormatter, RawDescriptionHelpFormatter, RawTextHelpFormatter,
        ArgumentDefaultsHelpFormatter -- Formatter classes which
        may be passed as the formatter_class= argument to the
        ArgumentParser constructor. HelpFormatter is the default,
        RawDescriptionHelpFormatter and RawTextHelpFormatter tell the parser
        not to change the formatting for help text, and
        ArgumentDefaultsHelpFormatter adds information about argument defaults
        to the help.

All other classes in this module are considered implementation details.
(Also note that HelpFormatter and RawDescriptionHelpFormatter are only
considered public as object names -- the API of the formatter objects is
still considered an implementation detail.)
\"\"\"" code nil nil [58 2875])
            ("__version__" variable nil nil [2877 2896])
            ("__all__" variable nil nil [2897 3280])
            ("collections" include nil nil [3283 3317])
            ("copy" include nil nil [3318 3338])
            ("os" include nil nil [3339 3355])
            ("re" include nil nil [3356 3372])
            ("sys" include nil nil [3373 3391])
            ("textwrap" include nil nil [3392 3420])
            ("gettext" include nil nil [3422 3464])
            ("SUPPRESS" variable nil nil [3467 3492])
            ("OPTIONAL" variable nil nil [3494 3508])
            ("ZERO_OR_MORE" variable nil nil [3509 3527])
            ("ONE_OR_MORE" variable nil nil [3528 3545])
            ("PARSER" variable nil nil [3546 3561])
            ("REMAINDER" variable nil nil [3562 3579])
            ("_UNRECOGNIZED_ARGS_ATTR" variable nil nil [3580 3626])
            ("_AttributeHolder" type
               (:documentation "Abstract base class that provides __repr__.

    The __repr__ method returns a string in the format::
        ClassName(attr=name, attr=name, ...)
    The attributes are determined either by a class-level attribute,
    '_kwarg_names', or by inspecting the instance __dict__.
    "
                :superclasses ("object")
                :members 
                  ( ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4066 4070]))                          )
                        (reparse-symbol indented_block_body) [4053 4382])
                    ("_get_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4403 4407]))                          )
                        (reparse-symbol indented_block_body) [4387 4455])
                    ("_get_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4474 4478]))                          )
                        (reparse-symbol indented_block_body) [4460 4499]))                  
                :type "class")
                nil [3725 4499])
            ("_ensure_value" function (:arguments 
              ( ("namespace" variable nil (reparse-symbol function_parameters) [4519 4528])
                ("name" variable nil (reparse-symbol function_parameters) [4530 4534])
                ("value" variable nil (reparse-symbol function_parameters) [4536 4541]))              ) nil [4501 4667])
            ("HelpFormatter" type
               (:documentation "Formatter for generating usage messages and argument help strings.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [5177 5357])
                            ("self" variable nil (reparse-symbol indented_block_body) [5366 5383])
                            ("self" variable nil (reparse-symbol indented_block_body) [5392 5433])
                            ("self" variable nil (reparse-symbol indented_block_body) [5442 5485])
                            ("self" variable nil (reparse-symbol indented_block_body) [5494 5619])
                            ("self" variable nil (reparse-symbol indented_block_body) [5628 5647])
                            ("self" variable nil (reparse-symbol indented_block_body) [5657 5681])
                            ("self" variable nil (reparse-symbol indented_block_body) [5690 5705])
                            ("self" variable nil (reparse-symbol indented_block_body) [5714 5741])
                            ("self" variable nil (reparse-symbol indented_block_body) [5751 5797])
                            ("self" variable nil (reparse-symbol indented_block_body) [5806 5848])
                            ("self" variable nil (reparse-symbol indented_block_body) [5858 5904])
                            ("self" variable nil (reparse-symbol indented_block_body) [5913 5963]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4997 5001])
                            ("prog" variable nil (reparse-symbol function_parameters) [5020 5024])
                            ("indent_increment" variable nil (reparse-symbol function_parameters) [5043 5059])
                            ("max_help_position" variable nil (reparse-symbol function_parameters) [5080 5097])
                            ("width" variable nil (reparse-symbol function_parameters) [5119 5124]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4984 5964])
                    ("_indent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6095 6099]))                          )
                        (reparse-symbol indented_block_body) [6083 6182])
                    ("_dedent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6199 6203]))                          )
                        (reparse-symbol indented_block_body) [6187 6356])
                    ("_Section" type
                       (:superclasses ("object")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [6459 6485])
                                    ("self" variable nil (reparse-symbol indented_block_body) [6498 6518])
                                    ("self" variable nil (reparse-symbol indented_block_body) [6531 6553])
                                    ("self" variable nil (reparse-symbol indented_block_body) [6566 6581]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [6407 6411])
                                    ("formatter" variable nil (reparse-symbol function_parameters) [6413 6422])
                                    ("parent" variable nil (reparse-symbol function_parameters) [6424 6430])
                                    ("heading" variable nil (reparse-symbol function_parameters) [6432 6439]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [6394 6582])
                            ("format_help" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [6607 6611]))                                  )
                                (reparse-symbol indented_block_body) [6591 7569]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [6361 7569])
                    ("_add_item" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7588 7592])
                            ("func" variable nil (reparse-symbol function_parameters) [7594 7598])
                            ("args" variable nil (reparse-symbol function_parameters) [7600 7604]))                          )
                        (reparse-symbol indented_block_body) [7574 7664])
                    ("start_section" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7780 7784])
                            ("heading" variable nil (reparse-symbol function_parameters) [7786 7793]))                          )
                        (reparse-symbol indented_block_body) [7762 7977])
                    ("end_section" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7998 8002]))                          )
                        (reparse-symbol indented_block_body) [7982 8089])
                    ("add_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8107 8111])
                            ("text" variable nil (reparse-symbol function_parameters) [8113 8117]))                          )
                        (reparse-symbol indented_block_body) [8094 8228])
                    ("add_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8247 8251])
                            ("usage" variable nil (reparse-symbol function_parameters) [8253 8258])
                            ("actions" variable nil (reparse-symbol function_parameters) [8260 8267])
                            ("groups" variable nil (reparse-symbol function_parameters) [8269 8275])
                            ("prefix" variable nil (reparse-symbol function_parameters) [8277 8283]))                          )
                        (reparse-symbol indented_block_body) [8233 8428])
                    ("add_argument" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8450 8454])
                            ("action" variable nil (reparse-symbol function_parameters) [8456 8462]))                          )
                        (reparse-symbol indented_block_body) [8433 9187])
                    ("add_arguments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9210 9214])
                            ("actions" variable nil (reparse-symbol function_parameters) [9216 9223]))                          )
                        (reparse-symbol indented_block_body) [9192 9295])
                    ("format_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9406 9410]))                          )
                        (reparse-symbol indented_block_body) [9390 9603])
                    ("_join_parts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9624 9628])
                            ("part_strings" variable nil (reparse-symbol function_parameters) [9630 9642]))                          )
                        (reparse-symbol indented_block_body) [9608 9782])
                    ("_format_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9805 9809])
                            ("usage" variable nil (reparse-symbol function_parameters) [9811 9816])
                            ("actions" variable nil (reparse-symbol function_parameters) [9818 9825])
                            ("groups" variable nil (reparse-symbol function_parameters) [9827 9833])
                            ("prefix" variable nil (reparse-symbol function_parameters) [9835 9841]))                          )
                        (reparse-symbol indented_block_body) [9787 13629])
                    ("_format_actions_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13660 13664])
                            ("actions" variable nil (reparse-symbol function_parameters) [13666 13673])
                            ("groups" variable nil (reparse-symbol function_parameters) [13675 13681]))                          )
                        (reparse-symbol indented_block_body) [13634 17382])
                    ("_format_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17404 17408])
                            ("text" variable nil (reparse-symbol function_parameters) [17410 17414]))                          )
                        (reparse-symbol indented_block_body) [17387 17670])
                    ("_format_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17694 17698])
                            ("action" variable nil (reparse-symbol function_parameters) [17700 17706]))                          )
                        (reparse-symbol indented_block_body) [17675 19607])
                    ("_format_action_invocation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19642 19646])
                            ("action" variable nil (reparse-symbol function_parameters) [19648 19654]))                          )
                        (reparse-symbol indented_block_body) [19612 20497])
                    ("_metavar_formatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20525 20529])
                            ("action" variable nil (reparse-symbol function_parameters) [20531 20537])
                            ("default_metavar" variable nil (reparse-symbol function_parameters) [20539 20554]))                          )
                        (reparse-symbol indented_block_body) [20502 21037])
                    ("_format_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21059 21063])
                            ("action" variable nil (reparse-symbol function_parameters) [21065 21071])
                            ("default_metavar" variable nil (reparse-symbol function_parameters) [21073 21088]))                          )
                        (reparse-symbol indented_block_body) [21042 21825])
                    ("_expand_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21847 21851])
                            ("action" variable nil (reparse-symbol function_parameters) [21853 21859]))                          )
                        (reparse-symbol indented_block_body) [21830 22377])
                    ("_iter_indented_subactions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22412 22416])
                            ("action" variable nil (reparse-symbol function_parameters) [22418 22424]))                          )
                        (reparse-symbol indented_block_body) [22382 22648])
                    ("_split_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22670 22674])
                            ("text" variable nil (reparse-symbol function_parameters) [22676 22680])
                            ("width" variable nil (reparse-symbol function_parameters) [22682 22687]))                          )
                        (reparse-symbol indented_block_body) [22653 22796])
                    ("_fill_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22816 22820])
                            ("text" variable nil (reparse-symbol function_parameters) [22822 22826])
                            ("width" variable nil (reparse-symbol function_parameters) [22828 22833])
                            ("indent" variable nil (reparse-symbol function_parameters) [22835 22841]))                          )
                        (reparse-symbol indented_block_body) [22801 23042])
                    ("_get_help_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23068 23072])
                            ("action" variable nil (reparse-symbol function_parameters) [23074 23080]))                          )
                        (reparse-symbol indented_block_body) [23047 23110])
                    ("_get_default_metavar_for_optional" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23153 23157])
                            ("action" variable nil (reparse-symbol function_parameters) [23159 23165]))                          )
                        (reparse-symbol indented_block_body) [23115 23203])
                    ("_get_default_metavar_for_positional" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23248 23252])
                            ("action" variable nil (reparse-symbol function_parameters) [23254 23260]))                          )
                        (reparse-symbol indented_block_body) [23208 23290]))                  
                :type "class")
                nil [4724 23290])
            ("RawDescriptionHelpFormatter" type
               (:documentation "Help message formatter which retains any formatting in descriptions.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    "
                :superclasses ("HelpFormatter")
                :members 
                  ( ("_fill_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23590 23594])
                            ("text" variable nil (reparse-symbol function_parameters) [23596 23600])
                            ("width" variable nil (reparse-symbol function_parameters) [23602 23607])
                            ("indent" variable nil (reparse-symbol function_parameters) [23609 23615]))                          )
                        (reparse-symbol indented_block_body) [23575 23699]))                  
                :type "class")
                nil [23292 23699])
            ("RawTextHelpFormatter" type
               (:documentation "Help message formatter which retains formatting of all help text.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    "
                :superclasses ("RawDescriptionHelpFormatter")
                :members 
                  ( ("_split_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24005 24009])
                            ("text" variable nil (reparse-symbol function_parameters) [24011 24015])
                            ("width" variable nil (reparse-symbol function_parameters) [24017 24022]))                          )
                        (reparse-symbol indented_block_body) [23988 24058]))                  
                :type "class")
                nil [23701 24058])
            ("ArgumentDefaultsHelpFormatter" type
               (:documentation "Help message formatter which adds default values to argument help.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    "
                :superclasses ("HelpFormatter")
                :members 
                  ( ("_get_help_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24364 24368])
                            ("action" variable nil (reparse-symbol function_parameters) [24370 24376]))                          )
                        (reparse-symbol indented_block_body) [24343 24709]))                  
                :type "class")
                nil [24060 24709])
            ("MetavarTypeHelpFormatter" type
               (:documentation "Help message formatter which uses the argument 'type' as the default
    metavar value (instead of the argument 'dest')

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    "
                :superclasses ("HelpFormatter")
                :members 
                  ( ("_get_default_metavar_for_optional" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25080 25084])
                            ("action" variable nil (reparse-symbol function_parameters) [25086 25092]))                          )
                        (reparse-symbol indented_block_body) [25042 25131])
                    ("_get_default_metavar_for_positional" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25176 25180])
                            ("action" variable nil (reparse-symbol function_parameters) [25182 25188]))                          )
                        (reparse-symbol indented_block_body) [25136 25227]))                  
                :type "class")
                nil [24711 25227])
            ("_get_action_name" function (:arguments 
              ( ("argument" variable nil (reparse-symbol function_parameters) [25324 25332]))              ) nil [25303 25654])
            ("ArgumentError" type
               (:documentation "An error from creating or using an argument (optional or positional).

    The string value of this exception is the message, augmented with
    information about the argument that caused it.
    "
                :superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [25947 25994])
                            ("self" variable nil (reparse-symbol indented_block_body) [26003 26025]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25913 25917])
                            ("argument" variable nil (reparse-symbol function_parameters) [25919 25927])
                            ("message" variable nil (reparse-symbol function_parameters) [25929 25936]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25900 26026])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26043 26047]))                          )
                        (reparse-symbol indented_block_body) [26031 26315]))                  
                :type "class")
                nil [25656 26315])
            ("ArgumentTypeError" type
               (:documentation "An error from trying to convert a command line string to a type."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [26432 26436]))                  
                :type "class")
                nil [26317 26437])
            ("Action" type
               (:documentation "Information about how to convert command line strings to Python objects.

    Action objects are used by an ArgumentParser to represent the information
    needed to parse a single argument from one or more strings from the
    command line. The keyword arguments to the Action constructor are also
    all attributes of Action instances.

    Keyword Arguments:

        - option_strings -- A list of command-line option strings which
            should be associated with this action.

        - dest -- The name of the attribute to hold the created object(s)

        - nargs -- The number of command-line arguments that should be
            consumed. By default, one argument will be consumed and a single
            value will be produced.  Other values include:
                - N (an integer) consumes N arguments (and produces a list)
                - '?' consumes zero or one arguments
                - '*' consumes zero or more arguments (and produces a list)
                - '+' consumes one or more arguments (and produces a list)
            Note that the difference between the default and nargs=1 is that
            with the default, a single value will be produced, while with
            nargs=1, a list containing a single value will be produced.

        - const -- The value to be produced if the option is specified and the
            option uses an action that takes no values.

        - default -- The value to be produced if the option is not specified.

        - type -- A callable that accepts a single string argument, and
            returns the converted value.  The standard Python types str, int,
            float, and complex are useful examples of such callables.  If None,
            str is used.

        - choices -- A container of values that should be allowed. If not None,
            after a command-line argument has been converted to the appropriate
            type, an exception will be raised if it is not a member of this
            collection.

        - required -- True if the action must always be specified at the
            command line. This is only meaningful for optional command-line
            arguments.

        - help -- The help string describing the argument.

        - metavar -- The name to be used for the option's argument with the
            help string. If None, the 'dest' value will be used as the name.
    "
                :superclasses ("_AttributeHolder")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [29259 29295])
                            ("self" variable nil (reparse-symbol indented_block_body) [29304 29320])
                            ("self" variable nil (reparse-symbol indented_block_body) [29329 29347])
                            ("self" variable nil (reparse-symbol indented_block_body) [29356 29374])
                            ("self" variable nil (reparse-symbol indented_block_body) [29383 29405])
                            ("self" variable nil (reparse-symbol indented_block_body) [29414 29430])
                            ("self" variable nil (reparse-symbol indented_block_body) [29439 29461])
                            ("self" variable nil (reparse-symbol indented_block_body) [29470 29494])
                            ("self" variable nil (reparse-symbol indented_block_body) [29503 29519])
                            ("self" variable nil (reparse-symbol indented_block_body) [29528 29550]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28948 28952])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [28971 28985])
                            ("dest" variable nil (reparse-symbol function_parameters) [29004 29008])
                            ("nargs" variable nil (reparse-symbol function_parameters) [29027 29032])
                            ("const" variable nil (reparse-symbol function_parameters) [29056 29061])
                            ("default" variable nil (reparse-symbol function_parameters) [29085 29092])
                            ("type" variable nil (reparse-symbol function_parameters) [29116 29120])
                            ("choices" variable nil (reparse-symbol function_parameters) [29144 29151])
                            ("required" variable nil (reparse-symbol function_parameters) [29175 29183])
                            ("help" variable nil (reparse-symbol function_parameters) [29208 29212])
                            ("metavar" variable nil (reparse-symbol function_parameters) [29236 29243]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28935 29551])
                    ("_get_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29572 29576]))                          )
                        (reparse-symbol indented_block_body) [29556 29871])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29889 29893])
                            ("parser" variable nil (reparse-symbol function_parameters) [29895 29901])
                            ("namespace" variable nil (reparse-symbol function_parameters) [29903 29912])
                            ("values" variable nil (reparse-symbol function_parameters) [29914 29920])
                            ("option_string" variable nil (reparse-symbol function_parameters) [29922 29935]))                          )
                        (reparse-symbol indented_block_body) [29876 30007]))                  
                :type "class")
                nil [26491 30007])
            ("_StoreAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [30366 30610])
                            ("if" code nil (reparse-symbol indented_block_body) [30618 30738])
                            ("super" code nil (reparse-symbol indented_block_body) [30746 31061]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30055 30059])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [30078 30092])
                            ("dest" variable nil (reparse-symbol function_parameters) [30111 30115])
                            ("nargs" variable nil (reparse-symbol function_parameters) [30134 30139])
                            ("const" variable nil (reparse-symbol function_parameters) [30163 30168])
                            ("default" variable nil (reparse-symbol function_parameters) [30192 30199])
                            ("type" variable nil (reparse-symbol function_parameters) [30223 30227])
                            ("choices" variable nil (reparse-symbol function_parameters) [30251 30258])
                            ("required" variable nil (reparse-symbol function_parameters) [30282 30290])
                            ("help" variable nil (reparse-symbol function_parameters) [30315 30319])
                            ("metavar" variable nil (reparse-symbol function_parameters) [30343 30350]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30042 31062])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31080 31084])
                            ("parser" variable nil (reparse-symbol function_parameters) [31086 31092])
                            ("namespace" variable nil (reparse-symbol function_parameters) [31094 31103])
                            ("values" variable nil (reparse-symbol function_parameters) [31105 31111])
                            ("option_string" variable nil (reparse-symbol function_parameters) [31113 31126]))                          )
                        (reparse-symbol indented_block_body) [31067 31180]))                  
                :type "class")
                nil [30009 31180])
            ("_StoreConstAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [31451 31686]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31233 31237])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [31256 31270])
                            ("dest" variable nil (reparse-symbol function_parameters) [31289 31293])
                            ("const" variable nil (reparse-symbol function_parameters) [31312 31317])
                            ("default" variable nil (reparse-symbol function_parameters) [31336 31343])
                            ("required" variable nil (reparse-symbol function_parameters) [31367 31375])
                            ("help" variable nil (reparse-symbol function_parameters) [31400 31404])
                            ("metavar" variable nil (reparse-symbol function_parameters) [31428 31435]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31220 31687])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31705 31709])
                            ("parser" variable nil (reparse-symbol function_parameters) [31711 31717])
                            ("namespace" variable nil (reparse-symbol function_parameters) [31719 31728])
                            ("values" variable nil (reparse-symbol function_parameters) [31730 31736])
                            ("option_string" variable nil (reparse-symbol function_parameters) [31738 31751]))                          )
                        (reparse-symbol indented_block_body) [31692 31809]))                  
                :type "class")
                nil [31182 31809])
            ("_StoreTrueAction" type
               (:superclasses ("_StoreConstAction")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [32036 32248]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31872 31876])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [31895 31909])
                            ("dest" variable nil (reparse-symbol function_parameters) [31928 31932])
                            ("default" variable nil (reparse-symbol function_parameters) [31951 31958])
                            ("required" variable nil (reparse-symbol function_parameters) [31983 31991])
                            ("help" variable nil (reparse-symbol function_parameters) [32016 32020]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31859 32249]))                  
                :type "class")
                nil [31811 32249])
            ("_StoreFalseAction" type
               (:superclasses ("_StoreConstAction")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [32476 32690]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32313 32317])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [32336 32350])
                            ("dest" variable nil (reparse-symbol function_parameters) [32369 32373])
                            ("default" variable nil (reparse-symbol function_parameters) [32392 32399])
                            ("required" variable nil (reparse-symbol function_parameters) [32423 32431])
                            ("help" variable nil (reparse-symbol function_parameters) [32456 32460]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32300 32691]))                  
                :type "class")
                nil [32251 32691])
            ("_AppendAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [33051 33302])
                            ("if" code nil (reparse-symbol indented_block_body) [33310 33430])
                            ("super" code nil (reparse-symbol indented_block_body) [33438 33754]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32740 32744])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [32763 32777])
                            ("dest" variable nil (reparse-symbol function_parameters) [32796 32800])
                            ("nargs" variable nil (reparse-symbol function_parameters) [32819 32824])
                            ("const" variable nil (reparse-symbol function_parameters) [32848 32853])
                            ("default" variable nil (reparse-symbol function_parameters) [32877 32884])
                            ("type" variable nil (reparse-symbol function_parameters) [32908 32912])
                            ("choices" variable nil (reparse-symbol function_parameters) [32936 32943])
                            ("required" variable nil (reparse-symbol function_parameters) [32967 32975])
                            ("help" variable nil (reparse-symbol function_parameters) [33000 33004])
                            ("metavar" variable nil (reparse-symbol function_parameters) [33028 33035]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32727 33755])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33773 33777])
                            ("parser" variable nil (reparse-symbol function_parameters) [33779 33785])
                            ("namespace" variable nil (reparse-symbol function_parameters) [33787 33796])
                            ("values" variable nil (reparse-symbol function_parameters) [33798 33804])
                            ("option_string" variable nil (reparse-symbol function_parameters) [33806 33819]))                          )
                        (reparse-symbol indented_block_body) [33760 33969]))                  
                :type "class")
                nil [32693 33969])
            ("_AppendConstAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [34241 34506]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34023 34027])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [34046 34060])
                            ("dest" variable nil (reparse-symbol function_parameters) [34079 34083])
                            ("const" variable nil (reparse-symbol function_parameters) [34102 34107])
                            ("default" variable nil (reparse-symbol function_parameters) [34126 34133])
                            ("required" variable nil (reparse-symbol function_parameters) [34157 34165])
                            ("help" variable nil (reparse-symbol function_parameters) [34190 34194])
                            ("metavar" variable nil (reparse-symbol function_parameters) [34218 34225]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34010 34507])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34525 34529])
                            ("parser" variable nil (reparse-symbol function_parameters) [34531 34537])
                            ("namespace" variable nil (reparse-symbol function_parameters) [34539 34548])
                            ("values" variable nil (reparse-symbol function_parameters) [34550 34556])
                            ("option_string" variable nil (reparse-symbol function_parameters) [34558 34571]))                          )
                        (reparse-symbol indented_block_body) [34512 34725]))                  
                :type "class")
                nil [33971 34725])
            ("_CountAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [34936 35141]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34773 34777])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [34796 34810])
                            ("dest" variable nil (reparse-symbol function_parameters) [34829 34833])
                            ("default" variable nil (reparse-symbol function_parameters) [34852 34859])
                            ("required" variable nil (reparse-symbol function_parameters) [34883 34891])
                            ("help" variable nil (reparse-symbol function_parameters) [34916 34920]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34760 35142])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35160 35164])
                            ("parser" variable nil (reparse-symbol function_parameters) [35166 35172])
                            ("namespace" variable nil (reparse-symbol function_parameters) [35174 35183])
                            ("values" variable nil (reparse-symbol function_parameters) [35185 35191])
                            ("option_string" variable nil (reparse-symbol function_parameters) [35193 35206]))                          )
                        (reparse-symbol indented_block_body) [35147 35326]))                  
                :type "class")
                nil [34727 35326])
            ("_HelpAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [35516 35689]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35373 35377])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [35396 35410])
                            ("dest" variable nil (reparse-symbol function_parameters) [35429 35433])
                            ("default" variable nil (reparse-symbol function_parameters) [35461 35468])
                            ("help" variable nil (reparse-symbol function_parameters) [35496 35500]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35360 35690])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35708 35712])
                            ("parser" variable nil (reparse-symbol function_parameters) [35714 35720])
                            ("namespace" variable nil (reparse-symbol function_parameters) [35722 35731])
                            ("values" variable nil (reparse-symbol function_parameters) [35733 35739])
                            ("option_string" variable nil (reparse-symbol function_parameters) [35741 35754]))                          )
                        (reparse-symbol indented_block_body) [35695 35812]))                  
                :type "class")
                nil [35328 35812])
            ("_VersionAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [36072 36248])
                            ("self" variable nil (reparse-symbol indented_block_body) [36257 36279]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35862 35866])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [35885 35899])
                            ("version" variable nil (reparse-symbol function_parameters) [35918 35925])
                            ("dest" variable nil (reparse-symbol function_parameters) [35949 35953])
                            ("default" variable nil (reparse-symbol function_parameters) [35981 35988])
                            ("help" variable nil (reparse-symbol function_parameters) [36016 36020]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35849 36280])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36298 36302])
                            ("parser" variable nil (reparse-symbol function_parameters) [36304 36310])
                            ("namespace" variable nil (reparse-symbol function_parameters) [36312 36321])
                            ("values" variable nil (reparse-symbol function_parameters) [36323 36329])
                            ("option_string" variable nil (reparse-symbol function_parameters) [36331 36344]))                          )
                        (reparse-symbol indented_block_body) [36285 36618]))                  
                :type "class")
                nil [35814 36618])
            ("_SubParsersAction" type
               (:superclasses ("Action")
                :members 
                  ( ("_ChoicesPseudoAction" type
                       (:superclasses ("Action")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("metavar" variable nil (reparse-symbol indented_block_body) [36756 36777])
                                    ("if" code nil (reparse-symbol indented_block_body) [36790 36858])
                                    ("sup" variable nil (reparse-symbol indented_block_body) [36870 36927])
                                    ("sup" code nil (reparse-symbol indented_block_body) [36940 37035]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [36716 36720])
                                    ("name" variable nil (reparse-symbol function_parameters) [36722 36726])
                                    ("aliases" variable nil (reparse-symbol function_parameters) [36728 36735])
                                    ("help" variable nil (reparse-symbol function_parameters) [36737 36741]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [36703 37036]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [36658 37036])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [37248 37272])
                            ("self" variable nil (reparse-symbol indented_block_body) [37281 37314])
                            ("self" variable nil (reparse-symbol indented_block_body) [37323 37373])
                            ("self" variable nil (reparse-symbol indented_block_body) [37382 37408])
                            ("super" code nil (reparse-symbol indented_block_body) [37418 37645]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37054 37058])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [37077 37091])
                            ("prog" variable nil (reparse-symbol function_parameters) [37110 37114])
                            ("parser_class" variable nil (reparse-symbol function_parameters) [37133 37145])
                            ("dest" variable nil (reparse-symbol function_parameters) [37164 37168])
                            ("help" variable nil (reparse-symbol function_parameters) [37196 37200])
                            ("metavar" variable nil (reparse-symbol function_parameters) [37224 37231]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37041 37646])
                    ("add_parser" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37666 37670])
                            ("name" variable nil (reparse-symbol function_parameters) [37672 37676])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [37678 37686]))                          )
                        (reparse-symbol indented_block_body) [37651 38435])
                    ("_get_subactions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38460 38464]))                          )
                        (reparse-symbol indented_block_body) [38440 38504])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38522 38526])
                            ("parser" variable nil (reparse-symbol function_parameters) [38528 38534])
                            ("namespace" variable nil (reparse-symbol function_parameters) [38536 38545])
                            ("values" variable nil (reparse-symbol function_parameters) [38547 38553])
                            ("option_string" variable nil (reparse-symbol function_parameters) [38555 38568]))                          )
                        (reparse-symbol indented_block_body) [38509 39854]))                  
                :type "class")
                nil [36620 39854])
            ("FileType" type
               (:documentation "Factory for creating file object types

    Instances of FileType are typically passed as type= arguments to the
    ArgumentParser add_argument() method.

    Keyword Arguments:
        - mode -- A string indicating how the file is to be opened. Accepts the
            same values as the builtin open() function.
        - bufsize -- The file's desired buffer size. Accepts the same values as
            the builtin open() function.
        - encoding -- The file's encoding. Accepts the same values as the
            builtin open() function.
        - errors -- A string indicating how encoding and decoding errors are to
            be handled. Accepts the same value as the builtin open() function.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [40734 40751])
                            ("self" variable nil (reparse-symbol indented_block_body) [40760 40783])
                            ("self" variable nil (reparse-symbol indented_block_body) [40792 40817])
                            ("self" variable nil (reparse-symbol indented_block_body) [40826 40847]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40669 40673])
                            ("mode" variable nil (reparse-symbol function_parameters) [40675 40679])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [40685 40692])
                            ("encoding" variable nil (reparse-symbol function_parameters) [40697 40705])
                            ("errors" variable nil (reparse-symbol function_parameters) [40712 40718]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40656 40848])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40866 40870])
                            ("string" variable nil (reparse-symbol function_parameters) [40872 40878]))                          )
                        (reparse-symbol indented_block_body) [40853 41540])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41558 41562]))                          )
                        (reparse-symbol indented_block_body) [41545 41933]))                  
                :type "class")
                nil [39906 41933])
            ("Namespace" type
               (:documentation "Simple object for storing attributes.

    Implements equality by attribute names and values, and provides a simple
    string representation.
    "
                :superclasses ("_AttributeHolder")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("for" code nil (reparse-symbol indented_block_body) [42265 42331]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42240 42244])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42246 42254]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42227 42331])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42347 42351])
                            ("other" variable nil (reparse-symbol function_parameters) [42353 42358]))                          )
                        (reparse-symbol indented_block_body) [42336 42481])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42503 42507])
                            ("key" variable nil (reparse-symbol function_parameters) [42509 42512]))                          )
                        (reparse-symbol indented_block_body) [42486 42551]))                  
                :type "class")
                nil [42029 42551])
            ("_ActionsContainer" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [42750 42791])
                            ("self" variable nil (reparse-symbol indented_block_body) [42801 42831])
                            ("self" variable nil (reparse-symbol indented_block_body) [42840 42880])
                            ("self" variable nil (reparse-symbol indented_block_body) [42889 42921])
                            ("self" variable nil (reparse-symbol indented_block_body) [42930 42970])
                            ("self" variable nil (reparse-symbol indented_block_body) [43008 43029])
                            ("self" code nil (reparse-symbol indented_block_body) [43066 43109])
                            ("self" code nil (reparse-symbol indented_block_body) [43118 43164])
                            ("self" code nil (reparse-symbol indented_block_body) [43173 43230])
                            ("self" code nil (reparse-symbol indented_block_body) [43239 43294])
                            ("self" code nil (reparse-symbol indented_block_body) [43303 43360])
                            ("self" code nil (reparse-symbol indented_block_body) [43369 43417])
                            ("self" code nil (reparse-symbol indented_block_body) [43426 43485])
                            ("self" code nil (reparse-symbol indented_block_body) [43494 43540])
                            ("self" code nil (reparse-symbol indented_block_body) [43549 43593])
                            ("self" code nil (reparse-symbol indented_block_body) [43602 43652])
                            ("self" code nil (reparse-symbol indented_block_body) [43661 43714])
                            ("self" code nil (reparse-symbol indented_block_body) [43788 43807])
                            ("self" variable nil (reparse-symbol indented_block_body) [43842 43860])
                            ("self" variable nil (reparse-symbol indented_block_body) [43869 43901])
                            ("self" variable nil (reparse-symbol indented_block_body) [43928 43952])
                            ("self" variable nil (reparse-symbol indented_block_body) [43961 43997])
                            ("self" variable nil (reparse-symbol indented_block_body) [44034 44053])
                            ("self" variable nil (reparse-symbol indented_block_body) [44133 44199])
                            ("self" variable nil (reparse-symbol indented_block_body) [44346 44386]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42604 42608])
                            ("description" variable nil (reparse-symbol function_parameters) [42627 42638])
                            ("prefix_chars" variable nil (reparse-symbol function_parameters) [42657 42669])
                            ("argument_default" variable nil (reparse-symbol function_parameters) [42688 42704])
                            ("conflict_handler" variable nil (reparse-symbol function_parameters) [42723 42739]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42591 44387])
                    ("register" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44486 44490])
                            ("registry_name" variable nil (reparse-symbol function_parameters) [44492 44505])
                            ("value" variable nil (reparse-symbol function_parameters) [44507 44512])
                            ("object" variable nil (reparse-symbol function_parameters) [44514 44520]))                          )
                        (reparse-symbol indented_block_body) [44473 44622])
                    ("_registry_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44645 44649])
                            ("registry_name" variable nil (reparse-symbol function_parameters) [44651 44664])
                            ("value" variable nil (reparse-symbol function_parameters) [44666 44671])
                            ("default" variable nil (reparse-symbol function_parameters) [44673 44680]))                          )
                        (reparse-symbol indented_block_body) [44627 44755])
                    ("set_defaults" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44900 44904])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [44906 44914]))                          )
                        (reparse-symbol indented_block_body) [44883 45212])
                    ("get_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45233 45237])
                            ("dest" variable nil (reparse-symbol function_parameters) [45239 45243]))                          )
                        (reparse-symbol indented_block_body) [45217 45434])
                    ("add_argument" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45547 45551])
                            ("args" variable nil (reparse-symbol function_parameters) [45553 45558])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [45560 45568]))                          
                        :documentation "
        add_argument(dest, ..., name=value, ...)
        add_argument(option_string, option_string, ..., name=value, ...)
        ")
                        (reparse-symbol indented_block_body) [45530 47489])
                    ("add_argument_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47517 47521])
                            ("args" variable nil (reparse-symbol function_parameters) [47523 47528])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [47530 47538]))                          )
                        (reparse-symbol indented_block_body) [47494 47658])
                    ("add_mutually_exclusive_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47696 47700])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [47702 47710]))                          )
                        (reparse-symbol indented_block_body) [47663 47844])
                    ("_add_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47865 47869])
                            ("action" variable nil (reparse-symbol function_parameters) [47871 47877]))                          )
                        (reparse-symbol indented_block_body) [47849 48602])
                    ("_remove_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48626 48630])
                            ("action" variable nil (reparse-symbol function_parameters) [48632 48638]))                          )
                        (reparse-symbol indented_block_body) [48607 48678])
                    ("_add_container_actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48710 48714])
                            ("container" variable nil (reparse-symbol function_parameters) [48716 48725]))                          )
                        (reparse-symbol indented_block_body) [48683 50408])
                    ("_get_positional_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50440 50444])
                            ("dest" variable nil (reparse-symbol function_parameters) [50446 50450])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [50452 50460]))                          )
                        (reparse-symbol indented_block_body) [50413 51079])
                    ("_get_optional_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51109 51113])
                            ("args" variable nil (reparse-symbol function_parameters) [51115 51120])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [51122 51130]))                          )
                        (reparse-symbol indented_block_body) [51084 52721])
                    ("_pop_action_class" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52748 52752])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52754 52760])
                            ("default" variable nil (reparse-symbol function_parameters) [52762 52769]))                          )
                        (reparse-symbol indented_block_body) [52726 52884])
                    ("_get_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52906 52910]))                          )
                        (reparse-symbol indented_block_body) [52889 53260])
                    ("_check_conflict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53285 53289])
                            ("action" variable nil (reparse-symbol function_parameters) [53291 53297]))                          )
                        (reparse-symbol indented_block_body) [53265 53815])
                    ("_handle_conflict_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53847 53851])
                            ("action" variable nil (reparse-symbol function_parameters) [53853 53859])
                            ("conflicting_actions" variable nil (reparse-symbol function_parameters) [53861 53880]))                          )
                        (reparse-symbol indented_block_body) [53820 54296])
                    ("_handle_conflict_resolve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54330 54334])
                            ("action" variable nil (reparse-symbol function_parameters) [54336 54342])
                            ("conflicting_actions" variable nil (reparse-symbol function_parameters) [54344 54363]))                          )
                        (reparse-symbol indented_block_body) [54301 54839]))                  
                :type "class")
                nil [42553 54839])
            ("_ArgumentGroup" type
               (:superclasses ("_ActionsContainer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("update" variable nil (reparse-symbol indented_block_body) [55036 55062])
                            ("update" code nil (reparse-symbol indented_block_body) [55071 55125])
                            ("update" code nil (reparse-symbol indented_block_body) [55134 55180])
                            ("update" code nil (reparse-symbol indented_block_body) [55189 55243])
                            ("super_init" variable nil (reparse-symbol indented_block_body) [55252 55301])
                            ("super_init" code nil (reparse-symbol indented_block_body) [55310 55355])
                            ("self" variable nil (reparse-symbol indented_block_body) [55392 55410])
                            ("self" variable nil (reparse-symbol indented_block_body) [55419 55443])
                            ("self" variable nil (reparse-symbol indented_block_body) [55504 55544])
                            ("self" variable nil (reparse-symbol indented_block_body) [55553 55587])
                            ("self" variable nil (reparse-symbol indented_block_body) [55596 55658])
                            ("self" variable nil (reparse-symbol indented_block_body) [55667 55703])
                            ("self" variable nil (reparse-symbol indented_block_body) [55712 55804])
                            ("self" variable nil (reparse-symbol indented_block_body) [55813 55883]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54900 54904])
                            ("container" variable nil (reparse-symbol function_parameters) [54906 54915])
                            ("title" variable nil (reparse-symbol function_parameters) [54917 54922])
                            ("description" variable nil (reparse-symbol function_parameters) [54929 54940])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [54947 54955]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [54887 55884])
                    ("_add_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55905 55909])
                            ("action" variable nil (reparse-symbol function_parameters) [55911 55917]))                          )
                        (reparse-symbol indented_block_body) [55889 56050])
                    ("_remove_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56074 56078])
                            ("action" variable nil (reparse-symbol function_parameters) [56080 56086]))                          )
                        (reparse-symbol indented_block_body) [56055 56191]))                  
                :type "class")
                nil [54841 56191])
            ("_MutuallyExclusiveGroup" type
               (:superclasses ("_ArgumentGroup")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [56300 56356])
                            ("self" variable nil (reparse-symbol indented_block_body) [56365 56389])
                            ("self" variable nil (reparse-symbol indented_block_body) [56398 56425]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56258 56262])
                            ("container" variable nil (reparse-symbol function_parameters) [56264 56273])
                            ("required" variable nil (reparse-symbol function_parameters) [56275 56283]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [56245 56426])
                    ("_add_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56447 56451])
                            ("action" variable nil (reparse-symbol function_parameters) [56453 56459]))                          )
                        (reparse-symbol indented_block_body) [56431 56711])
                    ("_remove_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56735 56739])
                            ("action" variable nil (reparse-symbol function_parameters) [56741 56747]))                          )
                        (reparse-symbol indented_block_body) [56716 56840]))                  
                :type "class")
                nil [56193 56840])
            ("ArgumentParser" type
               (:documentation "Object for parsing command line strings into Python objects.

    Keyword Arguments:
        - prog -- The name of the program (default: sys.argv[0])
        - usage -- A usage message (default: auto-generated from arguments)
        - description -- A description of what the program does
        - epilog -- Text following the argument descriptions
        - parents -- Parsers whose arguments should be copied into this one
        - formatter_class -- HelpFormatter class for printing help messages
        - prefix_chars -- Characters that prefix optional arguments
        - fromfile_prefix_chars -- Characters that prefix files containing
            additional arguments
        - argument_default -- The default value for all arguments
        - conflict_handler -- String indicating how to handle conflicts
        - add_help -- Add a -h/-help option
        - allow_abbrev -- Allow long options to be abbreviated unambiguously
    "
                :superclasses ("_AttributeHolder" "_ActionsContainer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("superinit" variable nil (reparse-symbol indented_block_body) [58318 58366])
                            ("superinit" code nil (reparse-symbol indented_block_body) [58375 58560])
                            ("if" code nil (reparse-symbol indented_block_body) [58605 58673])
                            ("self" variable nil (reparse-symbol indented_block_body) [58682 58698])
                            ("self" variable nil (reparse-symbol indented_block_body) [58707 58725])
                            ("self" variable nil (reparse-symbol indented_block_body) [58734 58754])
                            ("self" variable nil (reparse-symbol indented_block_body) [58763 58801])
                            ("self" variable nil (reparse-symbol indented_block_body) [58810 58860])
                            ("self" variable nil (reparse-symbol indented_block_body) [58869 58893])
                            ("self" variable nil (reparse-symbol indented_block_body) [58902 58934])
                            ("add_group" variable nil (reparse-symbol indented_block_body) [58944 58979])
                            ("self" variable nil (reparse-symbol indented_block_body) [58988 59044])
                            ("self" variable nil (reparse-symbol indented_block_body) [59053 59105])
                            ("self" variable nil (reparse-symbol indented_block_body) [59114 59137])
                            ("identity" function (:arguments 
                              ( ("string" variable nil (reparse-symbol function_parameters) [59185 59191]))                              ) (reparse-symbol indented_block_body) [59172 59220])
                            ("self" code nil (reparse-symbol indented_block_body) [59228 59265])
                            ("prefix_chars" code nil (reparse-symbol indented_block_body) [59436 59451])
                            ("if" code nil (reparse-symbol indented_block_body) [59460 59678])
                            ("for" code nil (reparse-symbol indented_block_body) [59731 59985]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57872 57876])
                            ("prog" variable nil (reparse-symbol function_parameters) [57895 57899])
                            ("usage" variable nil (reparse-symbol function_parameters) [57923 57928])
                            ("description" variable nil (reparse-symbol function_parameters) [57952 57963])
                            ("epilog" variable nil (reparse-symbol function_parameters) [57987 57993])
                            ("parents" variable nil (reparse-symbol function_parameters) [58017 58024])
                            ("formatter_class" variable nil (reparse-symbol function_parameters) [58046 58061])
                            ("prefix_chars" variable nil (reparse-symbol function_parameters) [58094 58106])
                            ("fromfile_prefix_chars" variable nil (reparse-symbol function_parameters) [58129 58150])
                            ("argument_default" variable nil (reparse-symbol function_parameters) [58174 58190])
                            ("conflict_handler" variable nil (reparse-symbol function_parameters) [58214 58230])
                            ("add_help" variable nil (reparse-symbol function_parameters) [58257 58265])
                            ("allow_abbrev" variable nil (reparse-symbol function_parameters) [58289 58301]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [57859 59985])
                    ("_get_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60096 60100]))                          )
                        (reparse-symbol indented_block_body) [60080 60349])
                    ("add_subparsers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60496 60500])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [60502 60510]))                          )
                        (reparse-symbol indented_block_body) [60477 61825])
                    ("_add_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61846 61850])
                            ("action" variable nil (reparse-symbol function_parameters) [61852 61858]))                          )
                        (reparse-symbol indented_block_body) [61830 62029])
                    ("_get_optional_actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62060 62064]))                          )
                        (reparse-symbol indented_block_body) [62034 62176])
                    ("_get_positional_actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62209 62213]))                          )
                        (reparse-symbol indented_block_body) [62181 62329])
                    ("parse_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62481 62485])
                            ("args" variable nil (reparse-symbol function_parameters) [62487 62491])
                            ("namespace" variable nil (reparse-symbol function_parameters) [62498 62507]))                          )
                        (reparse-symbol indented_block_body) [62466 62707])
                    ("parse_known_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62733 62737])
                            ("args" variable nil (reparse-symbol function_parameters) [62739 62743])
                            ("namespace" variable nil (reparse-symbol function_parameters) [62750 62759]))                          )
                        (reparse-symbol indented_block_body) [62712 64076])
                    ("_parse_known_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64103 64107])
                            ("arg_strings" variable nil (reparse-symbol function_parameters) [64109 64120])
                            ("namespace" variable nil (reparse-symbol function_parameters) [64122 64131]))                          )
                        (reparse-symbol indented_block_body) [64081 75617])
                    ("_read_args_from_files" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75648 75652])
                            ("arg_strings" variable nil (reparse-symbol function_parameters) [75654 75665]))                          )
                        (reparse-symbol indented_block_body) [75622 76737])
                    ("convert_arg_line_to_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76771 76775])
                            ("arg_line" variable nil (reparse-symbol function_parameters) [76777 76785]))                          )
                        (reparse-symbol indented_block_body) [76742 76814])
                    ("_match_argument" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76839 76843])
                            ("action" variable nil (reparse-symbol function_parameters) [76845 76851])
                            ("arg_strings_pattern" variable nil (reparse-symbol function_parameters) [76853 76872]))                          )
                        (reparse-symbol indented_block_body) [76819 77727])
                    ("_match_arguments_partial" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77761 77765])
                            ("actions" variable nil (reparse-symbol function_parameters) [77767 77774])
                            ("arg_strings_pattern" variable nil (reparse-symbol function_parameters) [77776 77795]))                          )
                        (reparse-symbol indented_block_body) [77732 78401])
                    ("_parse_optional" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78426 78430])
                            ("arg_string" variable nil (reparse-symbol function_parameters) [78432 78442]))                          )
                        (reparse-symbol indented_block_body) [78406 80976])
                    ("_get_option_tuples" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81004 81008])
                            ("option_string" variable nil (reparse-symbol function_parameters) [81010 81023]))                          )
                        (reparse-symbol indented_block_body) [80981 82900])
                    ("_get_nargs_pattern" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82928 82932])
                            ("action" variable nil (reparse-symbol function_parameters) [82934 82940]))                          )
                        (reparse-symbol indented_block_body) [82905 84224])
                    ("_get_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84338 84342])
                            ("action" variable nil (reparse-symbol function_parameters) [84344 84350])
                            ("arg_strings" variable nil (reparse-symbol function_parameters) [84352 84363]))                          )
                        (reparse-symbol indented_block_body) [84322 86382])
                    ("_get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86402 86406])
                            ("action" variable nil (reparse-symbol function_parameters) [86408 86414])
                            ("arg_string" variable nil (reparse-symbol function_parameters) [86416 86426]))                          )
                        (reparse-symbol indented_block_body) [86387 87377])
                    ("_check_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87399 87403])
                            ("action" variable nil (reparse-symbol function_parameters) [87405 87411])
                            ("value" variable nil (reparse-symbol function_parameters) [87413 87418]))                          )
                        (reparse-symbol indented_block_body) [87382 87792])
                    ("format_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87904 87908]))                          )
                        (reparse-symbol indented_block_body) [87887 88108])
                    ("format_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88129 88133]))                          )
                        (reparse-symbol indented_block_body) [88113 88841])
                    ("_get_formatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88865 88869]))                          )
                        (reparse-symbol indented_block_body) [88846 88924])
                    ("print_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89029 89033])
                            ("file" variable nil (reparse-symbol function_parameters) [89035 89039]))                          )
                        (reparse-symbol indented_block_body) [89013 89158])
                    ("print_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89178 89182])
                            ("file" variable nil (reparse-symbol function_parameters) [89184 89188]))                          )
                        (reparse-symbol indented_block_body) [89163 89306])
                    ("_print_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89330 89334])
                            ("message" variable nil (reparse-symbol function_parameters) [89336 89343])
                            ("file" variable nil (reparse-symbol function_parameters) [89345 89349]))                          )
                        (reparse-symbol indented_block_body) [89311 89473])
                    ("exit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89553 89557])
                            ("status" variable nil (reparse-symbol function_parameters) [89559 89565])
                            ("message" variable nil (reparse-symbol function_parameters) [89569 89576]))                          )
                        (reparse-symbol indented_block_body) [89544 89684])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89699 89703])
                            ("message" variable nil (reparse-symbol function_parameters) [89705 89712]))                          
                        :documentation "error(message: string)

        Prints a usage message incorporating the message to stderr and
        exits.

        If you override this in a subclass, it should not return -- it
        should either exit or raise an exception.
        ")
                        (reparse-symbol indented_block_body) [89689 90128]))                  
                :type "class")
                nil [56842 90128]))          
      :file "argparse.py"
      :pointmax 90128
      :fsize 90127
      :lastmodtime '(22333 27206 198105 884000)
      :unmatched-syntax '((NAME 59387 . 59401) (IF 59408 . 59410) (ELSE 59431 . 59435) (INDENT_BLOCK 41434 . 41540) (NEWLINE 41433 . 41434) (COLON 41432 . 41433) (TRY 41287 . 41290) (AS 41428 . 41430)))
    (semanticdb-table "codeop.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"Utilities to compile possibly incomplete Python source code.

This module provides two interfaces, broadly similar to the builtin
function compile(), which take program text, a filename and a 'mode'
and:

- Return code object if the command is complete and valid
- Return None if the command is incomplete
- Raise SyntaxError, ValueError or OverflowError if the command is a
  syntax error (OverflowError and ValueError can be produced by
  malformed literals).

Approach:

First, check if the source consists entirely of blank lines and
comments; if so, replace it with 'pass', because the built-in
parser doesn't always do the right thing for these.

Compile three times: as is, with \\n, and with \\n\\n appended.  If it
compiles as is, it's complete.  If it compiles with one \\n appended,
we expect more.  If it doesn't compile either way, we compare the
error we get when compiling with \\n or \\n\\n appended.  If the errors
are the same, the code is broken.  But if the errors are different, we
expect more.  Not intuitive; not even guaranteed to hold in future
releases; but this matches the compiler's behavior from Python 1.4
through 2.2, at least.

Caveat:

It is possible (but not likely) that the parser stops parsing with a
successful outcome before reaching the end of the source; in this
case, trailing symbols may be ignored instead of causing an error.
For example, a backslash followed by two newlines may be followed by
arbitrary garbage.  This will be fixed once the API for the parser is
better.

The two interfaces are:

compile_command(source, filename, symbol):

    Compiles a single command in the manner described above.

CommandCompiler():

    Instances of this class have __call__ methods identical in
    signature to compile_command; the difference is that if the
    instance compiles program text containing a __future__ statement,
    the instance 'remembers' and compiles all subsequent program texts
    with the statement in force.

The module also provides another class:

Compile():

    Instances of this class act like the built-in function compile,
    but with 'memory' in the sense described above.
\"\"\"" code nil nil [1 2147])
            ("__future__" include nil nil [2149 2166])
            ("_features" variable nil nil [2168 2263])
            ("__all__" variable nil nil [2265 2324])
            ("PyCF_DONT_IMPLY_DEDENT" variable nil nil [2326 2356])
            ("_maybe_compile" function (:arguments 
              ( ("compiler" variable nil (reparse-symbol function_parameters) [2408 2416])
                ("source" variable nil (reparse-symbol function_parameters) [2418 2424])
                ("filename" variable nil (reparse-symbol function_parameters) [2426 2434])
                ("symbol" variable nil (reparse-symbol function_parameters) [2436 2442]))              ) nil [2389 3265])
            ("_compile" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [3279 3285])
                ("filename" variable nil (reparse-symbol function_parameters) [3287 3295])
                ("symbol" variable nil (reparse-symbol function_parameters) [3297 3303]))              ) nil [3266 3375])
            ("compile_command" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [3396 3402])
                ("filename" variable nil (reparse-symbol function_parameters) [3404 3412])
                ("symbol" variable nil (reparse-symbol function_parameters) [3424 3430]))              ) nil [3376 4143])
            ("Compile" type
               (:documentation "Instances of this class behave much like the built-in compile
    function, but if one is used to compile text containing a future
    statement, it \"remembers\" and compiles all subsequent program texts
    with the statement in force."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4437 4472]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4422 4426]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4409 4473])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4491 4495])
                            ("source" variable nil (reparse-symbol function_parameters) [4497 4503])
                            ("filename" variable nil (reparse-symbol function_parameters) [4505 4513])
                            ("symbol" variable nil (reparse-symbol function_parameters) [4515 4521]))                          )
                        (reparse-symbol indented_block_body) [4478 4754]))                  
                :type "class")
                nil [4144 4754])
            ("CommandCompiler" type
               (:documentation "Instances of this class have __call__ methods identical in
    signature to compile_command; the difference is that if the
    instance compiles program text containing a __future__ statement,
    the instance 'remembers' and compiles all subsequent program texts
    with the statement in force."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5119 5144]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5103 5107]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5090 5145])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5163 5167])
                            ("source" variable nil (reparse-symbol function_parameters) [5169 5175])
                            ("filename" variable nil (reparse-symbol function_parameters) [5177 5185])
                            ("symbol" variable nil (reparse-symbol function_parameters) [5197 5203]))                          )
                        (reparse-symbol indented_block_body) [5150 5995]))                  
                :type "class")
                nil [4755 5995]))          
      :file "codeop.py"
      :pointmax 5995
      :fsize 5994
      :lastmodtime '(22333 27206 230105 883000)
      :unmatched-syntax '((INDENT_BLOCK 3148 . 3165) (NEWLINE 3147 . 3148) (COLON 3146 . 3147) (AS 3142 . 3144) (INDENT_BLOCK 3032 . 3049) (NEWLINE 3031 . 3032) (COLON 3030 . 3031) (AS 3026 . 3028) (INDENT_BLOCK 2922 . 2935) (NEWLINE 2921 . 2922) (COLON 2920 . 2921) (TRY 2836 . 2839) (AS 2914 . 2916)))
    (semanticdb-table "functools.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"functools.py - Tools for working with functions and callable objects
\"\"\"" code nil nil [1 76])
            ("__all__" variable nil nil [446 648])
            ("try" code nil nil [650 718])
            ("abc" include nil nil [718 749])
            ("collections" include nil nil [750 784])
            ("types" include nil nil [785 819])
            ("weakref" include nil nil [820 857])
            ("try" code nil nil [858 1080])
            ("WRAPPER_ASSIGNMENTS" variable nil nil [1400 1517])
            ("WRAPPER_UPDATES" variable nil nil [1518 1549])
            ("update_wrapper" function
               (:documentation "Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes of the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    "
                :arguments 
                  ( ("wrapper" variable nil (reparse-symbol function_parameters) [1569 1576])
                    ("wrapped" variable nil (reparse-symbol function_parameters) [1597 1604])
                    ("assigned" variable nil (reparse-symbol function_parameters) [1625 1633])
                    ("updated" variable nil (reparse-symbol function_parameters) [1676 1683]))                  )
                nil [1550 2767])
            ("wraps" function
               (:documentation "Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying partial() to
       update_wrapper().
    "
                :arguments 
                  ( ("wrapped" variable nil (reparse-symbol function_parameters) [2778 2785])
                    ("assigned" variable nil (reparse-symbol function_parameters) [2797 2805])
                    ("updated" variable nil (reparse-symbol function_parameters) [2839 2846]))                  )
                nil [2768 3380])
            ("_gt_from_lt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [3880 3884])
                    ("other" variable nil (reparse-symbol function_parameters) [3886 3891])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [3893 3907]))                  )
                nil [3864 4144])
            ("_le_from_lt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [4161 4165])
                    ("other" variable nil (reparse-symbol function_parameters) [4167 4172])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [4174 4188]))                  )
                nil [4145 4355])
            ("_ge_from_lt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [4372 4376])
                    ("other" variable nil (reparse-symbol function_parameters) [4378 4383])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [4385 4399]))                  )
                nil [4356 4606])
            ("_ge_from_le" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [4623 4627])
                    ("other" variable nil (reparse-symbol function_parameters) [4629 4634])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [4636 4650]))                  )
                nil [4607 4887])
            ("_lt_from_le" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [4904 4908])
                    ("other" variable nil (reparse-symbol function_parameters) [4910 4915])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [4917 4931]))                  )
                nil [4888 5161])
            ("_gt_from_le" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [5178 5182])
                    ("other" variable nil (reparse-symbol function_parameters) [5184 5189])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [5191 5205]))                  )
                nil [5162 5412])
            ("_lt_from_gt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [5429 5433])
                    ("other" variable nil (reparse-symbol function_parameters) [5435 5440])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [5442 5456]))                  )
                nil [5413 5693])
            ("_ge_from_gt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [5710 5714])
                    ("other" variable nil (reparse-symbol function_parameters) [5716 5721])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [5723 5737]))                  )
                nil [5694 5904])
            ("_le_from_gt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [5921 5925])
                    ("other" variable nil (reparse-symbol function_parameters) [5927 5932])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [5934 5948]))                  )
                nil [5905 6155])
            ("_le_from_ge" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [6172 6176])
                    ("other" variable nil (reparse-symbol function_parameters) [6178 6183])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [6185 6199]))                  )
                nil [6156 6436])
            ("_gt_from_ge" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [6453 6457])
                    ("other" variable nil (reparse-symbol function_parameters) [6459 6464])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [6466 6480]))                  )
                nil [6437 6710])
            ("_lt_from_ge" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [6727 6731])
                    ("other" variable nil (reparse-symbol function_parameters) [6733 6738])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [6740 6754]))                  )
                nil [6711 6961])
            ("_convert" variable nil nil [6962 7459])
            ("total_ordering" function
               (:documentation "Class decorator that fills in missing ordering methods"
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [7480 7483]))                  )
                nil [7461 8059])
            ("cmp_to_key" function
               (:documentation "Convert a cmp= function into a key= function"
                :arguments 
                  ( ("mycmp" variable nil (reparse-symbol function_parameters) [8275 8280]))                  )
                nil [8260 8902])
            ("try" code nil nil [8903 8975])
            ("partial" function
               (:documentation "New function with partial application of the given arguments
    and keywords.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [9232 9236])
                    ("args" variable nil (reparse-symbol function_parameters) [9238 9243])
                    ("keywords" variable nil (reparse-symbol function_parameters) [9245 9255]))                  )
                nil [9220 9816])
            ("try" code nil nil [9817 9886])
            ("partialmethod" type
               (:documentation "Method descriptor with partial application of the given arguments
    and keywords.

    Supports wrapping existing descriptors and handles non-descriptor
    callables as instance methods.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [10200 10371])
                            ("if" code nil (reparse-symbol indented_block_body) [10530 11026]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10160 10164])
                            ("func" variable nil (reparse-symbol function_parameters) [10166 10170])
                            ("args" variable nil (reparse-symbol function_parameters) [10172 10177])
                            ("keywords" variable nil (reparse-symbol function_parameters) [10179 10189]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10147 11026])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11044 11048]))                          )
                        (reparse-symbol indented_block_body) [11031 11580])
                    ("_make_unbound_method" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11610 11614]))                          )
                        (reparse-symbol indented_block_body) [11585 12036])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12053 12057])
                            ("obj" variable nil (reparse-symbol function_parameters) [12059 12062])
                            ("cls" variable nil (reparse-symbol function_parameters) [12064 12067]))                          )
                        (reparse-symbol indented_block_body) [12041 12815])
                    ("__isabstractmethod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12859 12863]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12820 12931]))                  
                :type "class")
                nil [9908 12931])
            ("_CacheInfo" variable nil nil [13129 13208])
            ("_HashedSeq" type
               (:documentation " This class guarantees that hash() will be called no more than once
        per element.  This is important because the lru_cache() will hash
        the key multiple times on a cache miss.

    "
                :superclasses ("list")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [13445 13468])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [13518 13531])
                            ("self" variable nil (reparse-symbol indented_block_body) [13540 13566]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13487 13491])
                            ("tup" variable nil (reparse-symbol function_parameters) [13493 13496])
                            ("hash" variable nil (reparse-symbol function_parameters) [13498 13502]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13474 13567])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13585 13589]))                          )
                        (reparse-symbol indented_block_body) [13572 13622]))                  
                :type "class")
                nil [13210 13622])
            ("_make_key" function
               (:documentation "Make a cache key from optionally typed positional and keyword arguments

    The key is constructed in a way that is flat as possible rather than
    as a nested structure that would take more memory.

    If there is only a single argument and its data type is known to cache
    its hash value, then that argument is returned without a wrapper.  This
    saves space and improves lookup speed.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [13637 13641])
                    ("kwds" variable nil (reparse-symbol function_parameters) [13643 13647])
                    ("typed" variable nil (reparse-symbol function_parameters) [13649 13654])
                    ("kwd_mark" variable nil (reparse-symbol function_parameters) [13669 13677])
                    ("fasttypes" variable nil (reparse-symbol function_parameters) [13706 13715])
                    ("sorted" variable nil (reparse-symbol function_parameters) [13766 13772])
                    ("tuple" variable nil (reparse-symbol function_parameters) [13781 13786])
                    ("type" variable nil (reparse-symbol function_parameters) [13794 13798])
                    ("len" variable nil (reparse-symbol function_parameters) [13805 13808]))                  )
                nil [13623 14618])
            ("lru_cache" function
               (:documentation "Least-recently-used cache decorator.

    If *maxsize* is set to None, the LRU features are disabled and the cache
    can grow without bound.

    If *typed* is True, arguments of different types will be cached separately.
    For example, f(3.0) and f(3) will be treated as distinct calls with
    distinct results.

    Arguments to the cached function must be hashable.

    View the cache statistics named tuple (hits, misses, maxsize, currsize)
    with f.cache_info().  Clear the cache and statistics with f.cache_clear().
    Access the underlying function with f.__wrapped__.

    See:  http://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used

    "
                :arguments 
                  ( ("maxsize" variable nil (reparse-symbol function_parameters) [14633 14640])
                    ("typed" variable nil (reparse-symbol function_parameters) [14646 14651]))                  )
                nil [14619 16137])
            ("_lru_cache_wrapper" function (:arguments 
              ( ("user_function" variable nil (reparse-symbol function_parameters) [16161 16174])
                ("maxsize" variable nil (reparse-symbol function_parameters) [16176 16183])
                ("typed" variable nil (reparse-symbol function_parameters) [16185 16190])
                ("_CacheInfo" variable nil (reparse-symbol function_parameters) [16192 16202]))              ) nil [16138 20751])
            ("try" code nil nil [20752 20832])
            ("_c3_merge" function
               (:documentation "Merges MROs in *sequences* to a single MRO using the C3 algorithm.

    Adapted from http://www.python.org/download/releases/2.3/mro/.

    "
                :arguments 
                  ( ("sequences" variable nil (reparse-symbol function_parameters) [21077 21086]))                  )
                nil [21063 21975])
            ("_c3_mro" function
               (:documentation "Computes the method resolution order using extended C3 linearization.

    If no *abcs* are given, the algorithm works exactly like the built-in C3
    linearization used for method resolution.

    If given, *abcs* is a list of abstract base classes that should be inserted
    into the resulting MRO. Unrelated ABCs are ignored and don't end up in the
    result. The algorithm inserts ABCs where their functionality is introduced,
    i.e. issubclass(cls, abc) returns True for the class itself but returns
    False for all its direct base classes. Implicit ABCs for a given class
    (either registered or inferred from the presence of a special method like
    __len__) are inserted directly after the last ABC explicitly listed in the
    MRO of said class. If two implicit ABCs end up next to each other in the
    resulting MRO, their ordering depends on the order of types in *abcs*.

    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [21988 21991])
                    ("abcs" variable nil (reparse-symbol function_parameters) [21993 21997]))                  )
                nil [21976 24102])
            ("_compose_mro" function
               (:documentation "Calculates the method resolution order for a given class *cls*.

    Includes relevant abstract base classes (with their respective bases) from
    the *types* iterable. Uses a modified C3 linearization algorithm.

    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [24120 24123])
                    ("types" variable nil (reparse-symbol function_parameters) [24125 24130]))                  )
                nil [24103 25701])
            ("_find_impl" function
               (:documentation "Returns the best matching implementation from *registry* for type *cls*.

    Where there is no registered implementation for a specific type, its method
    resolution order is used to find a more generic implementation.

    Note: if *registry* does not contain an implementation for the base
    *object* type, this function may return None.

    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [25717 25720])
                    ("registry" variable nil (reparse-symbol function_parameters) [25722 25730]))                  )
                nil [25702 26734])
            ("singledispatch" function
               (:documentation "Single-dispatch generic function decorator.

    Transforms a function into a generic function, which can have different
    behaviours depending upon the type of its first argument. The decorated
    function acts as the default implementation, and additional
    implementations can be registered using the register() attribute of the
    generic function.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [26754 26758]))                  )
                nil [26735 28776]))          
      :file "functools.py"
      :pointmax 28776
      :fsize 28776
      :lastmodtime '(22333 27206 278105 882000)
      :unmatched-syntax '((NAME 23178 . 23182) (IF 23196 . 23198) (ELSE 23204 . 23208) (NAME 11761 . 11772) (MULT 11774 . 11775)))
    (semanticdb-table "enum.py"
      :major-mode 'python-mode
      :tags 
        '( ("sys" include nil nil [1 11])
            ("collections" include nil nil [12 47])
            ("types" include nil nil [48 105])
            ("__all__" variable nil nil [107 146])
            ("_is_descriptor" function
               (:documentation "Returns True if obj is a descriptor, False otherwise."
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [168 171]))                  )
                nil [149 369])
            ("_is_dunder" function
               (:documentation "Returns True if a __dunder__ name, False otherwise."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [386 390]))                  )
                nil [371 596])
            ("_is_sunder" function
               (:documentation "Returns True if a _sunder_ name, False otherwise."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [613 617]))                  )
                nil [598 818])
            ("_make_class_unpicklable" function
               (:documentation "Make the given class un-picklable."
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [848 851]))                  )
                nil [820 1077])
            ("_EnumDict" type
               (:documentation "Track enum member order and ensure member names are not reused.

    EnumMeta will use the names found in self._member_names as the
    enumeration member names.

    "
                :superclasses ("dict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [1312 1330])
                            ("self" variable nil (reparse-symbol indented_block_body) [1339 1362]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1297 1301]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1284 1363])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1384 1388])
                            ("key" variable nil (reparse-symbol function_parameters) [1390 1393])
                            ("value" variable nil (reparse-symbol function_parameters) [1395 1400]))                          
                        :documentation "Changes anything not dundered or not a descriptor.

        If an enum member name is used twice, an error is raised; duplicate
        values are not checked for.

        Single underscore (sunder) names are reserved.

        ")
                        (reparse-symbol indented_block_body) [1368 2219]))                  
                :type "class")
                nil [1079 2219])
            ("Enum" variable nil nil [2451 2462])
            ("EnumMeta" type
               (:documentation "Metaclass for Enum"
                :superclasses ("type")
                :members 
                  ( ("__prepare__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("metacls" variable nil (reparse-symbol function_parameters) [2553 2560])
                            ("cls" variable nil (reparse-symbol function_parameters) [2562 2565])
                            ("bases" variable nil (reparse-symbol function_parameters) [2567 2572]))                          )
                        (reparse-symbol indented_block_body) [2520 2602])
                    ("__new__" function (:arguments 
                      ( ("metacls" variable nil (reparse-symbol function_parameters) [2619 2626])
                        ("cls" variable nil (reparse-symbol function_parameters) [2628 2631])
                        ("bases" variable nil (reparse-symbol function_parameters) [2633 2638])
                        ("classdict" variable nil (reparse-symbol function_parameters) [2640 2649]))                      ) (reparse-symbol indented_block_body) [2607 8585])
                    ("__call__" function
                       (:documentation "Either returns an existing member, or creates a new enum class.

        This method is used both when an enum class is given a value to match
        to an enumeration member (i.e. Color(3)) and for the functional API
        (i.e. Color = Enum('Color', names='red green blue')).

        When used for the functional API:

        `value` will be the name of the new class.

        `names` should be either a string of white-space/comma delimited names
        (values will start at `start`), or an iterator/mapping of name, value pairs.

        `module` should be set to the module this class is being created in;
        if it is not set, an attempt to find that module will be made, but if
        it fails the class will not be picklable.

        `qualname` should be set to the actual location this class can be found
        at in its module; by default it is set to the global scope.  If this is
        not correct, unpickling will fail in some circumstances.

        `type`, if set, will be mixed in as the first base class.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8603 8606])
                            ("value" variable nil (reparse-symbol function_parameters) [8608 8613])
                            ("names" variable nil (reparse-symbol function_parameters) [8615 8620])
                            ("module" variable nil (reparse-symbol function_parameters) [8630 8636])
                            ("qualname" variable nil (reparse-symbol function_parameters) [8643 8651])
                            ("type" variable nil (reparse-symbol function_parameters) [8658 8662])
                            ("start" variable nil (reparse-symbol function_parameters) [8669 8674]))                          )
                        (reparse-symbol indented_block_body) [8590 10003])
                    ("__contains__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [10025 10028])
                        ("member" variable nil (reparse-symbol function_parameters) [10030 10036]))                      ) (reparse-symbol indented_block_body) [10008 10116])
                    ("__delattr__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [10137 10140])
                        ("attr" variable nil (reparse-symbol function_parameters) [10142 10146]))                      ) (reparse-symbol indented_block_body) [10121 10423])
                    ("__dir__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10440 10444]))                          )
                        (reparse-symbol indented_block_body) [10428 10556])
                    ("__getattr__" function
                       (:documentation "Return the enum member matching `name`

        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [10577 10580])
                            ("name" variable nil (reparse-symbol function_parameters) [10582 10586]))                          )
                        (reparse-symbol indented_block_body) [10561 11110])
                    ("__getitem__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [11131 11134])
                        ("name" variable nil (reparse-symbol function_parameters) [11136 11140]))                      ) (reparse-symbol indented_block_body) [11115 11181])
                    ("__iter__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [11199 11202]))                      ) (reparse-symbol indented_block_body) [11186 11276])
                    ("__len__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [11293 11296]))                      ) (reparse-symbol indented_block_body) [11281 11338])
                    ("__members__" function
                       (:documentation "Returns a mapping of member name->value.

        This mapping lists all enum members, including aliases. Note that this
        is a read-only view of the internal mapping.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [11373 11376]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11343 11627])
                    ("__repr__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [11645 11648]))                      ) (reparse-symbol indented_block_body) [11632 11693])
                    ("__reversed__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [11715 11718]))                      ) (reparse-symbol indented_block_body) [11698 11802])
                    ("__setattr__" function
                       (:documentation "Block attempts to reassign Enum members.

        A simple assignment to the class namespace only changes one of the
        several possible ways to get an Enum member from the Enum class,
        resulting in an inconsistent Enumeration.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [11823 11826])
                            ("name" variable nil (reparse-symbol function_parameters) [11828 11832])
                            ("value" variable nil (reparse-symbol function_parameters) [11834 11839]))                          )
                        (reparse-symbol indented_block_body) [11807 12297])
                    ("_create_" function
                       (:documentation "Convenience method to create a new Enum class.

        `names` can be:

        * A string containing member names, separated either with spaces or
          commas.  Values are incremented by 1 from `start`.
        * An iterable of member names.  Values are incremented by 1 from `start`.
        * An iterable of (member name, value) pairs.
        * A mapping of member name -> value pairs.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [12315 12318])
                            ("class_name" variable nil (reparse-symbol function_parameters) [12320 12330])
                            ("names" variable nil (reparse-symbol function_parameters) [12332 12337])
                            ("module" variable nil (reparse-symbol function_parameters) [12347 12353])
                            ("qualname" variable nil (reparse-symbol function_parameters) [12360 12368])
                            ("type" variable nil (reparse-symbol function_parameters) [12375 12379])
                            ("start" variable nil (reparse-symbol function_parameters) [12386 12391]))                          )
                        (reparse-symbol indented_block_body) [12302 14173])
                    ("_get_mixins_" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("bases" variable nil (reparse-symbol function_parameters) [14213 14218]))                          
                        :documentation "Returns the type for creating enum members, and the first inherited
        enum class.

        bases: the tuple of bases that was given to __new__

        ")
                        (reparse-symbol indented_block_body) [14178 15972])
                    ("_find_new_" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("classdict" variable nil (reparse-symbol function_parameters) [16010 16019])
                            ("member_type" variable nil (reparse-symbol function_parameters) [16021 16032])
                            ("first_enum" variable nil (reparse-symbol function_parameters) [16034 16044]))                          
                        :documentation "Returns the __new__ to be used for creating the enum members.

        classdict: the class dictionary given to __new__
        member_type: the data type whose __new__ will be used by default
        first_enum: enumeration to check for an overriding __new__

        ")
                        (reparse-symbol indented_block_body) [15977 17740]))                  
                :type "class")
                nil [2465 17740])
            ("Enum" type
               (:documentation "Generic enumeration.

    Derive from this class to define new enumerations.

    "
                :superclasses ("EnumMeta")
                :members 
                  ( ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [17883 17886])
                        ("value" variable nil (reparse-symbol function_parameters) [17888 17893]))                      ) (reparse-symbol indented_block_body) [17871 18731])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18749 18753]))                          )
                        (reparse-symbol indented_block_body) [18736 18857])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18874 18878]))                          )
                        (reparse-symbol indented_block_body) [18862 18945])
                    ("__dir__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18962 18966]))                          )
                        (reparse-symbol indented_block_body) [18950 19253])
                    ("__format__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19273 19277])
                            ("format_spec" variable nil (reparse-symbol function_parameters) [19279 19290]))                          )
                        (reparse-symbol indented_block_body) [19258 19742])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19760 19764]))                          )
                        (reparse-symbol indented_block_body) [19747 19800])
                    ("__reduce_ex__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19823 19827])
                            ("proto" variable nil (reparse-symbol function_parameters) [19829 19834]))                          )
                        (reparse-symbol indented_block_body) [19805 19885])
                    ("name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("DynamicClassAttribute" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20325 20329]))                          
                        :documentation "The name of the Enum member.")
                        (reparse-symbol indented_block_body) [20289 20402])
                    ("value" function
                       (:parent "dummy"
                        :decorators 
                          ( ("DynamicClassAttribute" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20444 20448]))                          
                        :documentation "The value of the Enum member.")
                        (reparse-symbol indented_block_body) [20407 20523])
                    ("_convert" function
                       (:documentation "
        Create a new Enum subclass that replaces a collection of global constants
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [20558 20561])
                            ("name" variable nil (reparse-symbol function_parameters) [20563 20567])
                            ("module" variable nil (reparse-symbol function_parameters) [20569 20575])
                            ("filter" variable nil (reparse-symbol function_parameters) [20577 20583])
                            ("source" variable nil (reparse-symbol function_parameters) [20585 20591]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [20528 21434]))                  
                :type "class")
                nil [17742 21434])
            ("IntEnum" type
               (:documentation "Enum where members are also (and must be) ints"
                :superclasses ("int" "Enum")
                :type "class")
                nil [21436 21519])
            ("_reduce_ex_by_name" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [21544 21548])
                    ("proto" variable nil (reparse-symbol function_parameters) [21550 21555]))                  )
                nil [21521 21579])
            ("unique" function
               (:documentation "Class decorator for enumerations ensuring unique member values."
                :arguments 
                  ( ("enumeration" variable nil (reparse-symbol function_parameters) [21591 21602]))                  )
                nil [21580 22102]))          
      :file "enum.py"
      :pointmax 22102
      :fsize 22101
      :lastmodtime '(22333 27206 258105 883000)
      :unmatched-syntax '((NAME 17753 . 17762) (ASSIGN 17762 . 17763) (INDENT_BLOCK 13913 . 13934) (NEWLINE 13912 . 13913) (COLON 13911 . 13912) (TRY 13788 . 13791) (AS 13905 . 13907) (NAME 12856 . 12861) (IF 12872 . 12874) (ELSE 12888 . 12892) (MULT 12344 . 12345) (COMMA 12345 . 12346) (RAISE 11073 . 11078) (FROM 11100 . 11104) (NEWLINE 11109 . 11110) (MULT 8627 . 8628) (COMMA 8628 . 8629)))
    (semanticdb-table "ast.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
    ast
    ~~~

    The `ast` module helps Python applications to process trees of the Python
    abstract syntax grammar.  The abstract syntax itself might change with
    each Python release; this module helps to find out programmatically what
    the current grammar looks like and allows modifications of it.

    An abstract syntax tree can be generated by passing `ast.PyCF_ONLY_AST` as
    a flag to the `compile()` builtin function or by using the `parse()`
    function from this module.  The result will be a tree of objects whose
    classes all inherit from `ast.AST`.

    A modified abstract syntax tree can be compiled into a Python code object
    using the built-in `compile()` function.

    Additionally various helper functions are provided that make working with
    the trees simpler.  The main intention of the helper functions and this
    module in general is to provide an easy to use interface for libraries
    that work tightly with the python syntax (template engines for example).


    :copyright: Copyright 2008 by Armin Ronacher.
    :license: Python License.
\"\"\"" code nil nil [1 1103])
            ("_ast" include nil nil [1104 1122])
            ("parse" function
               (:documentation "
    Parse the source into an AST node.
    Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
    "
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [1135 1141])
                    ("filename" variable nil (reparse-symbol function_parameters) [1143 1151])
                    ("mode" variable nil (reparse-symbol function_parameters) [1165 1169]))                  )
                nil [1125 1358])
            ("literal_eval" function
               (:documentation "
    Safely evaluate an expression node or a string containing a Python
    expression.  The string or node provided may only consist of the following
    Python literal structures: strings, bytes, numbers, tuples, lists, dicts,
    sets, booleans, and None.
    "
                :arguments 
                  ( ("node_or_string" variable nil (reparse-symbol function_parameters) [1377 1391]))                  )
                nil [1360 3368])
            ("dump" function
               (:documentation "
    Return a formatted dump of the tree in *node*.  This is mainly useful for
    debugging purposes.  The returned string will show the names and the values
    for fields.  This makes the code impossible to evaluate, so if evaluation is
    wanted *annotate_fields* must be set to False.  Attributes such as line
    numbers and column offsets are not dumped by default.  If this is wanted,
    *include_attributes* can be set to True.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [3379 3383])
                    ("annotate_fields" variable nil (reparse-symbol function_parameters) [3385 3400])
                    ("include_attributes" variable nil (reparse-symbol function_parameters) [3407 3425]))                  )
                nil [3370 4747])
            ("copy_location" function
               (:documentation "
    Copy source location (`lineno` and `col_offset` attributes) from
    *old_node* to *new_node* if possible, and return *new_node*.
    "
                :arguments 
                  ( ("new_node" variable nil (reparse-symbol function_parameters) [4767 4775])
                    ("old_node" variable nil (reparse-symbol function_parameters) [4777 4785]))                  )
                nil [4749 5174])
            ("fix_missing_locations" function
               (:documentation "
    When you compile a node tree with compile(), the compiler expects lineno and
    col_offset attributes for every node that supports them.  This is rather
    tedious to fill in for generated nodes, so this helper adds these attributes
    recursively where not already set, by setting them to the values of the
    parent node.  It works recursively starting at *node*.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [5202 5206]))                  )
                nil [5176 6143])
            ("increment_lineno" function
               (:documentation "
    Increment the line number of each node in the tree starting at *node* by *n*.
    This is useful to \"move code\" to a different location in a file.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [6166 6170])
                    ("n" variable nil (reparse-symbol function_parameters) [6172 6173]))                  )
                nil [6145 6491])
            ("iter_fields" function
               (:documentation "
    Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields``
    that is present on *node*.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [6509 6513]))                  )
                nil [6493 6780])
            ("iter_child_nodes" function
               (:documentation "
    Yield all direct child nodes of *node*, that is, all fields that are nodes
    and all items of fields that are lists of nodes.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [6803 6807]))                  )
                nil [6782 7201])
            ("get_docstring" function
               (:documentation "
    Return the docstring for the given node or None if no docstring can
    be found.  If the node provided does not have docstrings a TypeError
    will be raised.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [7221 7225])
                    ("clean" variable nil (reparse-symbol function_parameters) [7227 7232]))                  )
                nil [7203 7820])
            ("walk" function
               (:documentation "
    Recursively yield all descendant nodes in the tree starting at *node*
    (including *node* itself), in no specified order.  This is useful if you
    only want to modify nodes in place and don't care about the context.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [7831 7835]))                  )
                nil [7822 8246])
            ("NodeVisitor" type
               (:documentation "
    A node visitor base class that walks the abstract syntax tree and calls a
    visitor function for every node found.  This function may return a value
    which is forwarded by the `visit` method.

    This class is meant to be subclassed, with the subclass adding visitor
    methods.

    Per default the visitor functions for the nodes are ``'visit_'`` +
    class name of the node.  So a `TryFinally` node visit function would
    be `visit_TryFinally`.  This behavior can be changed by overriding
    the `visit` method.  If no visitor function exists for a node
    (return value `None`) the `generic_visit` visitor is used instead.

    Don't use the `NodeVisitor` if you want to apply changes to nodes during
    traversing.  For this a special visitor exists (`NodeTransformer`) that
    allows modifications.
    "
                :superclasses ("object")
                :members 
                  ( ("visit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9129 9133])
                            ("node" variable nil (reparse-symbol function_parameters) [9135 9139]))                          
                        :documentation "Visit a node.")
                        (reparse-symbol indented_block_body) [9119 9311])
                    ("generic_visit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9334 9338])
                            ("node" variable nil (reparse-symbol function_parameters) [9340 9344]))                          
                        :documentation "Called if no explicit visitor function exists for a node.")
                        (reparse-symbol indented_block_body) [9316 9703]))                  
                :type "class")
                nil [8248 9703])
            ("NodeTransformer" type
               (:documentation "
    A :class:`NodeVisitor` subclass that walks the abstract syntax tree and
    allows modification of nodes.

    The `NodeTransformer` will walk the AST and use the return value of the
    visitor methods to replace or remove the old node.  If the return value of
    the visitor method is ``None``, the node will be removed from its location,
    otherwise it is replaced with the return value.  The return value may be the
    original node in which case no replacement takes place.

    Here is an example transformer that rewrites all occurrences of name lookups
    (``foo``) to ``data['foo']``::

       class RewriteName(NodeTransformer):

           def visit_Name(self, node):
               return copy_location(Subscript(
                   value=Name(id='data', ctx=Load()),
                   slice=Index(value=Str(s=node.id)),
                   ctx=node.ctx
               ), node)

    Keep in mind that if the node you're operating on has child nodes you must
    either transform the child nodes yourself or call the :meth:`generic_visit`
    method for the node first.

    For nodes that were part of a collection of statements (that applies to all
    statement nodes), the visitor may also return a list of nodes rather than
    just a single node.

    Usually you use the transformer like this::

       node = YourTransformer().visit(node)
    "
                :superclasses ("NodeVisitor")
                :members 
                  ( ("generic_visit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11147 11151])
                            ("node" variable nil (reparse-symbol function_parameters) [11153 11157]))                          )
                        (reparse-symbol indented_block_body) [11129 12002]))                  
                :type "class")
                nil [9705 12002]))          
      :file "ast.py"
      :pointmax 12002
      :fsize 12001
      :lastmodtime '(22333 27206 206105 884000)
      :unmatched-syntax nil)
    (semanticdb-table "tokenize.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Tokenization help for Python programs.

tokenize(readline) is a generator that breaks a stream of bytes into
Python tokens.  It decodes the bytes according to PEP-0263 for
determining source file encoding.

It accepts a readline-like method which is called repeatedly to get the
next line of input (or b\"\" for EOF).  It generates 5-tuples with these
members:

    the token type (see token.py)
    the token (a string)
    the starting (row, column) indices of the token (a 2-tuple of ints)
    the ending (row, column) indices of the token (a 2-tuple of ints)
    the original line (string)

It is designed to match the working of the Python tokenizer exactly, except
that it produces COMMENT tokens for comments and gives type OP for all
operators.  Additionally, all token lists start with an ENCODING token
which tells you which encoding was used to decode the bytes stream.
\"\"\"" code nil nil [1 886])
            ("__author__" variable nil nil [888 929])
            ("__credits__" variable nil nil [930 1096])
            ("builtins" include nil nil [1097 1139])
            ("codecs" include nil nil [1140 1175])
            ("collections" include nil nil [1176 1194])
            ("io" include nil nil [1195 1223])
            ("itertools" include nil nil [1224 1251])
            ("re" include nil nil [1252 1261])
            ("sys" include nil nil [1262 1272])
            ("token" include nil nil [1273 1292])
            ("cookie_re" variable nil nil [1294 1368])
            ("blank_re" variable nil nil [1369 1428])
            ("token" include nil nil [1430 1442])
            ("__all__" code nil nil [1443 1583])
            ("del" code nil nil [1584 1593])
            ("COMMENT" variable nil nil [1595 1613])
            ("tok_name" variable nil nil [1614 1643])
            ("NL" code nil nil [1644 1661])
            ("tok_name" variable nil nil [1662 1681])
            ("ENCODING" code nil nil [1682 1705])
            ("tok_name" variable nil nil [1706 1737])
            ("N_TOKENS" variable nil nil [1738 1751])
            ("EXACT_TOKEN_TYPES" variable nil nil [1752 2683])
            ("TokenInfo" type
               (:members 
                  ( ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2786 2790]))                          )
                        (reparse-symbol indented_block_body) [2773 2992])
                    ("exact_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3026 3030]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2997 3191]))                  
                :type "class")
                nil [2685 3191])
            ("group" function (:arguments 
              ( ("choices" variable nil (reparse-symbol function_parameters) [3202 3210]))              ) nil [3192 3250])
            ("any" function (:arguments 
              ( ("choices" variable nil (reparse-symbol function_parameters) [3258 3266]))              ) nil [3250 3298])
            ("maybe" function (:arguments 
              ( ("choices" variable nil (reparse-symbol function_parameters) [3308 3316]))              ) nil [3298 3348])
            ("Whitespace" variable nil nil [3440 3464])
            ("Comment" variable nil nil [3465 3487])
            ("Ignore" code nil nil [3488 3555])
            ("Name" variable nil nil [3556 3569])
            ("Hexnumber" variable nil nil [3571 3603])
            ("Binnumber" variable nil nil [3604 3629])
            ("Octnumber" variable nil nil [3630 3656])
            ("Decnumber" variable nil nil [3657 3690])
            ("Intnumber" variable nil nil [3691 3752])
            ("Exponent" variable nil nil [3753 3782])
            ("Pointfloat" code nil nil [3783 3851])
            ("Expfloat" code nil nil [3852 3883])
            ("Floatnumber" variable nil nil [3884 3925])
            ("Imagnumber" variable nil nil [3926 3982])
            ("Number" variable nil nil [3983 4033])
            ("StringPrefix" variable nil nil [4035 4082])
            ("Single" variable nil nil [4108 4143])
            ("Double" variable nil nil [4168 4203])
            ("Single3" variable nil nil [4230 4280])
            ("Double3" variable nil nil [4307 4357])
            ("Triple" variable nil nil [4358 4416])
            ("String" variable nil nil [4446 4571])
            ("Operator" variable nil nil [4748 4895])
            ("Bracket" variable nil nil [4897 4917])
            ("Special" variable nil nil [4918 4966])
            ("Funny" variable nil nil [4967 5008])
            ("PlainToken" variable nil nil [5010 5057])
            ("Token" code nil nil [5058 5085])
            ("ContStr" variable nil nil [5128 5335])
            ("PseudoExtras" variable nil nil [5336 5388])
            ("PseudoToken" code nil nil [5389 5465])
            ("_compile" function (:arguments 
              ( ("expr" variable nil (reparse-symbol function_parameters) [5480 5484]))              ) nil [5467 5527])
            ("endpats" variable nil nil [5528 6341])
            ("triple_quoted" variable nil nil [6343 6361])
            ("for" code nil nil [6362 6734])
            ("single_quoted" variable nil nil [6734 6752])
            ("for" code nil nil [6753 7067])
            ("tabsize" variable nil nil [7068 7079])
            ("TokenError" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [7081 7115])
            ("StopTokenizing" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [7116 7154])
            ("Untokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7208 7224])
                            ("self" variable nil (reparse-symbol indented_block_body) [7233 7250])
                            ("self" variable nil (reparse-symbol indented_block_body) [7259 7276])
                            ("self" variable nil (reparse-symbol indented_block_body) [7285 7305]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7193 7197]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7180 7306])
                    ("add_whitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7330 7334])
                            ("start" variable nil (reparse-symbol function_parameters) [7336 7341]))                          )
                        (reparse-symbol indented_block_body) [7311 7861])
                    ("untokenize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7881 7885])
                            ("iterable" variable nil (reparse-symbol function_parameters) [7887 7895]))                          )
                        (reparse-symbol indented_block_body) [7866 9128])
                    ("compat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9144 9148])
                            ("token" variable nil (reparse-symbol function_parameters) [9150 9155])
                            ("iterable" variable nil (reparse-symbol function_parameters) [9157 9165]))                          )
                        (reparse-symbol indented_block_body) [9133 10236]))                  
                :type "class")
                nil [7156 10236])
            ("untokenize" function
               (:documentation "Transform tokens back into Python source code.
    It returns a bytes object, encoded using the ENCODING
    token, which is the first token sequence output by tokenize.

    Each element returned by the iterable must be a token sequence
    with at least two elements, a token number and token value.  If
    only two tokens are passed, the resulting output is poor.

    Round-trip invariant for full input:
        Untokenized source will match input source exactly

    Round-trip invariant for limited intput:
        # Output bytes will tokenize the back to the input
        t1 = [tok[:2] for tok in tokenize(f.readline)]
        newcode = untokenize(t1)
        readline = BytesIO(newcode).readline
        t2 = [tok[:2] for tok in tokenize(readline)]
        assert t1 == t2
    "
                :arguments 
                  ( ("iterable" variable nil (reparse-symbol function_parameters) [10253 10261]))                  )
                nil [10238 11205])
            ("_get_normal_name" function
               (:documentation "Imitates get_normal_name in tokenizer.c."
                :arguments 
                  ( ("orig_enc" variable nil (reparse-symbol function_parameters) [11228 11236]))                  )
                nil [11207 11637])
            ("detect_encoding" function
               (:documentation "
    The detect_encoding() function is used to detect the encoding that should
    be used to decode a Python source file.  It requires one argument, readline,
    in the same way as the tokenize() generator.

    It will call readline a maximum of twice, and return the encoding used
    (as a string) and a list of any lines (left as bytes) it has read in.

    It detects the encoding from the presence of a utf-8 bom or an encoding
    cookie as specified in pep-0263.  If both a bom and a cookie are present,
    but disagree, a SyntaxError will be raised.  If the encoding cookie is an
    invalid charset, raise a SyntaxError.  Note that if a utf-8 bom is found,
    'utf-8-sig' is returned.

    If no encoding is specified, then the default of 'utf-8' will be returned.
    "
                :arguments 
                  ( ("readline" variable nil (reparse-symbol function_parameters) [11658 11666]))                  )
                nil [11638 14728])
            ("open" function
               (:documentation "Open a file in read only mode using the encoding detected by
    detect_encoding().
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [14739 14747]))                  )
                nil [14730 15144])
            ("tokenize" function
               (:documentation "
    The tokenize() generator requires one argment, readline, which
    must be a callable object which provides the same interface as the
    readline() method of built-in file objects.  Each call to the function
    should return one line of input as bytes.  Alternately, readline
    can be a callable function terminating with StopIteration:
        readline = open(myfile, 'rb').__next__  # Example of alternate readline

    The generator produces 5-tuples with these members: the token type; the
    token string; a 2-tuple (srow, scol) of ints specifying the row and
    column where the token begins in the source; a 2-tuple (erow, ecol) of
    ints specifying the row and column where the token ends in the source;
    and the line on which the token was found.  The line passed is the
    logical line; continuation lines are included.

    The first token sequence will always be an ENCODING token
    which tells you which encoding was used to decode the bytes stream.
    "
                :arguments 
                  ( ("readline" variable nil (reparse-symbol function_parameters) [15159 15167]))                  )
                nil [15146 16506])
            ("_tokenize" function (:arguments 
              ( ("readline" variable nil (reparse-symbol function_parameters) [16522 16530])
                ("encoding" variable nil (reparse-symbol function_parameters) [16532 16540]))              ) nil [16508 27792]))          
      :file "tokenize.py"
      :pointmax 27792
      :fsize 27791
      :lastmodtime '(22333 27206 454105 879000)
      :unmatched-syntax '((IF 21021 . 21023) (STRING_LITERAL 24815 . 25362) (NAME 26219 . 26225) (NAME 26229 . 26237) (STRING_LITERAL 26237 . 26270) (NAME 26270 . 26278) (STRING_LITERAL 26278 . 26288) (punctuation 26288 . 26289) (NAME 2701 . 2712) (PAREN_BLOCK 2723 . 2766)))
    (semanticdb-table "token.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Token constants (from \"token.h\").\"\"\"" code nil nil [1 40])
            ("__all__" variable nil nil [42 104])
            ("ENDMARKER" variable nil nil [359 372])
            ("NAME" variable nil nil [373 381])
            ("NUMBER" variable nil nil [382 392])
            ("STRING" variable nil nil [393 403])
            ("NEWLINE" variable nil nil [404 415])
            ("INDENT" variable nil nil [416 426])
            ("DEDENT" variable nil nil [427 437])
            ("LPAR" variable nil nil [438 446])
            ("RPAR" variable nil nil [447 455])
            ("LSQB" variable nil nil [456 464])
            ("RSQB" variable nil nil [465 474])
            ("COLON" variable nil nil [475 485])
            ("COMMA" variable nil nil [486 496])
            ("SEMI" variable nil nil [497 506])
            ("PLUS" variable nil nil [507 516])
            ("MINUS" variable nil nil [517 527])
            ("STAR" variable nil nil [528 537])
            ("SLASH" variable nil nil [538 548])
            ("VBAR" variable nil nil [549 558])
            ("AMPER" variable nil nil [559 569])
            ("LESS" variable nil nil [570 579])
            ("GREATER" variable nil nil [580 592])
            ("EQUAL" variable nil nil [593 603])
            ("DOT" variable nil nil [604 612])
            ("PERCENT" variable nil nil [613 625])
            ("LBRACE" variable nil nil [626 637])
            ("RBRACE" variable nil nil [638 649])
            ("EQEQUAL" variable nil nil [650 662])
            ("NOTEQUAL" variable nil nil [663 676])
            ("LESSEQUAL" variable nil nil [677 691])
            ("GREATEREQUAL" variable nil nil [692 709])
            ("TILDE" variable nil nil [710 720])
            ("CIRCUMFLEX" variable nil nil [721 736])
            ("LEFTSHIFT" variable nil nil [737 751])
            ("RIGHTSHIFT" variable nil nil [752 767])
            ("DOUBLESTAR" variable nil nil [768 783])
            ("PLUSEQUAL" variable nil nil [784 798])
            ("MINEQUAL" variable nil nil [799 812])
            ("STAREQUAL" variable nil nil [813 827])
            ("SLASHEQUAL" variable nil nil [828 843])
            ("PERCENTEQUAL" variable nil nil [844 861])
            ("AMPEREQUAL" variable nil nil [862 877])
            ("VBAREQUAL" variable nil nil [878 892])
            ("CIRCUMFLEXEQUAL" variable nil nil [893 913])
            ("LEFTSHIFTEQUAL" variable nil nil [914 933])
            ("RIGHTSHIFTEQUAL" variable nil nil [934 954])
            ("DOUBLESTAREQUAL" variable nil nil [955 975])
            ("DOUBLESLASH" variable nil nil [976 992])
            ("DOUBLESLASHEQUAL" variable nil nil [993 1014])
            ("AT" variable nil nil [1015 1022])
            ("ATEQUAL" variable nil nil [1023 1035])
            ("RARROW" variable nil nil [1036 1047])
            ("ELLIPSIS" variable nil nil [1048 1061])
            ("OP" variable nil nil [1062 1069])
            ("AWAIT" variable nil nil [1070 1080])
            ("ASYNC" variable nil nil [1081 1091])
            ("ERRORTOKEN" variable nil nil [1092 1107])
            ("N_TOKENS" variable nil nil [1108 1121])
            ("NT_OFFSET" variable nil nil [1122 1137])
            ("tok_name" variable nil nil [1158 1298])
            ("__all__" code nil nil [1299 1332])
            ("ISTERMINAL" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1349 1350]))              ) nil [1334 1378])
            ("ISNONTERMINAL" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1397 1398]))              ) nil [1379 1427])
            ("ISEOF" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1438 1439]))              ) nil [1428 1468])
            ("_main" function nil nil [1470 3035])
            ("if" code nil nil [3037 3076]))          
      :file "token.py"
      :pointmax 3076
      :fsize 3075
      :lastmodtime '(22333 27206 454105 879000)
      :unmatched-syntax '((INDENT_BLOCK 2911 . 2986) (NEWLINE 2910 . 2911) (COLON 2909 . 2910) (TRY 2843 . 2846) (AS 2903 . 2905) (INDENT_BLOCK 2368 . 2443) (NEWLINE 2367 . 2368) (COLON 2366 . 2367) (TRY 2305 . 2308) (AS 2360 . 2362) (INDENT_BLOCK 1742 . 1817) (NEWLINE 1741 . 1742) (COLON 1740 . 1741) (TRY 1680 . 1683) (AS 1734 . 1736)))
    (semanticdb-table "warnings.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Python part of the warnings subsystem.\"\"\"" code nil nil [1 45])
            ("sys" include nil nil [47 57])
            ("__all__" variable nil nil [59 217])
            ("showwarning" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [236 243])
                    ("category" variable nil (reparse-symbol function_parameters) [245 253])
                    ("filename" variable nil (reparse-symbol function_parameters) [255 263])
                    ("lineno" variable nil (reparse-symbol function_parameters) [265 271])
                    ("file" variable nil (reparse-symbol function_parameters) [273 277])
                    ("line" variable nil (reparse-symbol function_parameters) [284 288]))                  )
                nil [220 717])
            ("formatwarning" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [736 743])
                    ("category" variable nil (reparse-symbol function_parameters) [745 753])
                    ("filename" variable nil (reparse-symbol function_parameters) [755 763])
                    ("lineno" variable nil (reparse-symbol function_parameters) [765 771])
                    ("line" variable nil (reparse-symbol function_parameters) [773 777]))                  )
                nil [718 1095])
            ("filterwarnings" function
               (:documentation "Insert an entry into the list of warnings filters (at the front).

    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'message' -- a regex that the warning message must match
    'category' -- a class that the warning must be a subclass of
    'module' -- a regex that the module name must match
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [1115 1121])
                    ("message" variable nil (reparse-symbol function_parameters) [1123 1130])
                    ("category" variable nil (reparse-symbol function_parameters) [1135 1143])
                    ("module" variable nil (reparse-symbol function_parameters) [1153 1159])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1164 1170])
                    ("append" variable nil (reparse-symbol function_parameters) [1193 1199]))                  )
                nil [1096 2411])
            ("simplefilter" function
               (:documentation "Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'category' -- a class that the warning must be a subclass of
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [2429 2435])
                    ("category" variable nil (reparse-symbol function_parameters) [2437 2445])
                    ("lineno" variable nil (reparse-symbol function_parameters) [2455 2461])
                    ("append" variable nil (reparse-symbol function_parameters) [2465 2471]))                  )
                nil [2412 3293])
            ("resetwarnings" function (:documentation "Clear the list of warning filters, so that no filters are active.") nil [3294 3434])
            ("_OptionError" type
               (:documentation "Exception used by option processing helpers."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3525 3529]))                  
                :type "class")
                nil [3435 3530])
            ("_processoptions" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [3609 3613]))              ) nil [3589 3784])
            ("_setoption" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [3831 3834]))              ) nil [3816 4642])
            ("_getaction" function (:arguments 
              ( ("action" variable nil (reparse-symbol function_parameters) [4684 4690]))              ) nil [4669 4969])
            ("_getcategory" function (:arguments 
              ( ("category" variable nil (reparse-symbol function_parameters) [5013 5021]))              ) nil [4996 5829])
            ("_is_internal_frame" function
               (:documentation "Signal whether the frame is an internal CPython implementation detail."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [5854 5859]))                  )
                nil [5831 6047])
            ("_next_external_frame" function
               (:documentation "Find the next frame that doesn't involve CPython internals."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [6074 6079]))                  )
                nil [6049 6282])
            ("warn" function
               (:documentation "Issue a warning, or maybe ignore it or raise an exception."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [6332 6339])
                    ("category" variable nil (reparse-symbol function_parameters) [6341 6349])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [6356 6366]))                  )
                nil [6323 8320])
            ("warn_explicit" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [8339 8346])
                ("category" variable nil (reparse-symbol function_parameters) [8348 8356])
                ("filename" variable nil (reparse-symbol function_parameters) [8358 8366])
                ("lineno" variable nil (reparse-symbol function_parameters) [8368 8374])
                ("module" variable nil (reparse-symbol function_parameters) [8394 8400])
                ("registry" variable nil (reparse-symbol function_parameters) [8407 8415])
                ("module_globals" variable nil (reparse-symbol function_parameters) [8422 8436]))              ) nil [8321 10626])
            ("WarningMessage" type
               (:documentation "Holds the result of a single showwarning() call."
                :superclasses ("object")
                :members 
                  ( ("_WARNING_DETAILS" variable nil (reparse-symbol indented_block_body) [10723 10827])
                    ("__init__" function
                       (:suite 
                          ( ("local_values" variable nil (reparse-symbol indented_block_body) [10940 10963])
                            ("for" code nil (reparse-symbol indented_block_body) [10972 11059])
                            ("None" code nil (reparse-symbol indented_block_body) [11124 11128]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10846 10850])
                            ("message" variable nil (reparse-symbol function_parameters) [10852 10859])
                            ("category" variable nil (reparse-symbol function_parameters) [10861 10869])
                            ("filename" variable nil (reparse-symbol function_parameters) [10871 10879])
                            ("lineno" variable nil (reparse-symbol function_parameters) [10881 10887])
                            ("file" variable nil (reparse-symbol function_parameters) [10889 10893])
                            ("line" variable nil (reparse-symbol function_parameters) [10920 10924]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10833 11129])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11146 11150]))                          )
                        (reparse-symbol indented_block_body) [11134 11377]))                  
                :type "class")
                nil [10628 11377])
            ("catch_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        \"\"\"" code nil (reparse-symbol indented_block_body) [12139 12379])
                            ("self" variable nil (reparse-symbol indented_block_body) [12388 12409])
                            ("module" code nil (reparse-symbol indented_block_body) [12480 12486])
                            ("self" variable nil (reparse-symbol indented_block_body) [12495 12516]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12094 12098])
                            ("record" variable nil (reparse-symbol function_parameters) [12103 12109])
                            ("module" variable nil (reparse-symbol function_parameters) [12117 12123]))                          
                        :documentation "Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12081 12517])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12535 12539]))                          )
                        (reparse-symbol indented_block_body) [12522 12817])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12836 12840]))                          )
                        (reparse-symbol indented_block_body) [12822 13411])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13429 13433])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [13435 13444]))                          )
                        (reparse-symbol indented_block_body) [13416 13694]))                  
                :type "class")
                nil [11379 13694])
            ("_warnings_defaults" variable nil nil [14146 14172])
            ("try" code nil nil [14173 14615])
            ("_processoptions" code nil nil [14641 14673])
            ("if" code nil nil [14674 15390])
            ("del" code nil nil [15391 15413]))          
      :file "warnings.py"
      :pointmax 15414
      :fsize 15413
      :lastmodtime '(22333 27206 474105 879000)
      :unmatched-syntax '((NAME 12418 . 12422) (IF 12457 . 12459) (ELSE 12475 . 12479) (MULT 12100 . 12101) (COMMA 12101 . 12102) (NAME 11067 . 11071) (IF 11107 . 11109) (ELSE 11119 . 11123) (INDENT_BLOCK 3714 . 3784) (NEWLINE 3713 . 3714) (COLON 3712 . 3713) (TRY 3645 . 3648) (AS 3706 . 3708) (NAME 943 . 947) (IF 986 . 988) (ELSE 1002 . 1006)))
    (semanticdb-table "operator.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
Operator Interface

This module exports a set of functions corresponding to the intrinsic
operators of Python.  For example, operator.add(x, y) is equivalent
to the expression x+y.  The function names are those used for special
methods; variants without leading and trailing '__' are also provided
for convenience.

This is the pure Python implementation of the module.
\"\"\"" code nil nil [1 378])
            ("__all__" variable nil nil [380 962])
            ("builtins" include nil nil [964 996])
            ("lt" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1088 1089])
                ("b" variable nil (reparse-symbol function_parameters) [1091 1092]))              ) nil [1081 1133])
            ("le" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1141 1142])
                ("b" variable nil (reparse-symbol function_parameters) [1144 1145]))              ) nil [1134 1188])
            ("eq" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1196 1197])
                ("b" variable nil (reparse-symbol function_parameters) [1199 1200]))              ) nil [1189 1243])
            ("ne" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1251 1252])
                ("b" variable nil (reparse-symbol function_parameters) [1254 1255]))              ) nil [1244 1298])
            ("ge" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1306 1307])
                ("b" variable nil (reparse-symbol function_parameters) [1309 1310]))              ) nil [1299 1353])
            ("gt" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1361 1362])
                ("b" variable nil (reparse-symbol function_parameters) [1364 1365]))              ) nil [1354 1406])
            ("not_" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1498 1499]))              ) nil [1489 1540])
            ("truth" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1551 1552]))              ) nil [1541 1636])
            ("is_" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1645 1646])
                ("b" variable nil (reparse-symbol function_parameters) [1648 1649]))              ) nil [1637 1692])
            ("is_not" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1704 1705])
                ("b" variable nil (reparse-symbol function_parameters) [1707 1708]))              ) nil [1693 1759])
            ("abs" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1850 1851]))              ) nil [1842 1895])
            ("add" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1904 1905])
                ("b" variable nil (reparse-symbol function_parameters) [1907 1908]))              ) nil [1896 1949])
            ("and_" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1959 1960])
                ("b" variable nil (reparse-symbol function_parameters) [1962 1963]))              ) nil [1950 2004])
            ("floordiv" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2018 2019])
                ("b" variable nil (reparse-symbol function_parameters) [2021 2022]))              ) nil [2005 2065])
            ("index" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2076 2077]))              ) nil [2066 2134])
            ("inv" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2143 2144]))              ) nil [2135 2179])
            ("invert" variable nil nil [2179 2191])
            ("lshift" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2204 2205])
                ("b" variable nil (reparse-symbol function_parameters) [2207 2208]))              ) nil [2193 2251])
            ("mod" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2260 2261])
                ("b" variable nil (reparse-symbol function_parameters) [2263 2264]))              ) nil [2252 2305])
            ("mul" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2314 2315])
                ("b" variable nil (reparse-symbol function_parameters) [2317 2318]))              ) nil [2306 2359])
            ("matmul" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2371 2372])
                ("b" variable nil (reparse-symbol function_parameters) [2374 2375]))              ) nil [2360 2416])
            ("neg" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2425 2426]))              ) nil [2417 2461])
            ("or_" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2470 2471])
                ("b" variable nil (reparse-symbol function_parameters) [2473 2474]))              ) nil [2462 2515])
            ("pos" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2524 2525]))              ) nil [2516 2560])
            ("pow" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2569 2570])
                ("b" variable nil (reparse-symbol function_parameters) [2572 2573]))              ) nil [2561 2616])
            ("rshift" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2628 2629])
                ("b" variable nil (reparse-symbol function_parameters) [2631 2632]))              ) nil [2617 2675])
            ("sub" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2684 2685])
                ("b" variable nil (reparse-symbol function_parameters) [2687 2688]))              ) nil [2676 2729])
            ("truediv" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2742 2743])
                ("b" variable nil (reparse-symbol function_parameters) [2745 2746]))              ) nil [2730 2787])
            ("xor" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2796 2797])
                ("b" variable nil (reparse-symbol function_parameters) [2799 2800]))              ) nil [2788 2841])
            ("concat" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2935 2936])
                ("b" variable nil (reparse-symbol function_parameters) [2938 2939]))              ) nil [2924 3139])
            ("contains" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3153 3154])
                ("b" variable nil (reparse-symbol function_parameters) [3156 3157]))              ) nil [3140 3225])
            ("countOf" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3238 3239])
                ("b" variable nil (reparse-symbol function_parameters) [3241 3242]))              ) nil [3226 3382])
            ("delitem" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3395 3396])
                ("b" variable nil (reparse-symbol function_parameters) [3398 3399]))              ) nil [3383 3439])
            ("getitem" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3452 3453])
                ("b" variable nil (reparse-symbol function_parameters) [3455 3456]))              ) nil [3440 3495])
            ("indexOf" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3508 3509])
                ("b" variable nil (reparse-symbol function_parameters) [3511 3512]))              ) nil [3496 3700])
            ("setitem" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3713 3714])
                ("b" variable nil (reparse-symbol function_parameters) [3716 3717])
                ("c" variable nil (reparse-symbol function_parameters) [3719 3720]))              ) nil [3701 3760])
            ("length_hint" function
               (:documentation "
    Return an estimate of the number of items in obj.
    This is useful for presizing containers when building from an iterable.

    If the object supports len(), the result will be exact. Otherwise, it may
    over- or under-estimate by an arbitrary amount. The result will be an
    integer >= 0.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [3777 3780])
                    ("default" variable nil (reparse-symbol function_parameters) [3782 3789]))                  )
                nil [3761 4855])
            ("attrgetter" type
               (:documentation "
    Return a callable object that fetches the given attribute(s) from its operand.
    After f = attrgetter('name'), the call f(r) returns r.name.
    After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).
    After h = attrgetter('name.first', 'name.last'), the call h(r) returns
    (r.name.first, r.name.last).
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [5313 5344])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [5392 5984]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5363 5367])
                            ("attr" variable nil (reparse-symbol function_parameters) [5369 5373])
                            ("attrs" variable nil (reparse-symbol function_parameters) [5375 5381]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5350 5984])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6002 6006])
                            ("obj" variable nil (reparse-symbol function_parameters) [6008 6011]))                          )
                        (reparse-symbol indented_block_body) [5989 6045])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6063 6067]))                          )
                        (reparse-symbol indented_block_body) [6050 6251])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6271 6275]))                          )
                        (reparse-symbol indented_block_body) [6256 6321]))                  
                :type "class")
                nil [4938 6321])
            ("itemgetter" type
               (:documentation "
    Return a callable object that fetches the given item(s) from its operand.
    After f = itemgetter(2), the call f(r) returns r[2].
    After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [6571 6602])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [6650 6961]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6621 6625])
                            ("item" variable nil (reparse-symbol function_parameters) [6627 6631])
                            ("items" variable nil (reparse-symbol function_parameters) [6633 6639]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6608 6961])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6979 6983])
                            ("obj" variable nil (reparse-symbol function_parameters) [6985 6988]))                          )
                        (reparse-symbol indented_block_body) [6966 7022])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7040 7044]))                          )
                        (reparse-symbol indented_block_body) [7027 7224])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7244 7248]))                          )
                        (reparse-symbol indented_block_body) [7229 7294]))                  
                :type "class")
                nil [6322 7294])
            ("methodcaller" type
               (:documentation "
    Return a callable object that calls the given method on its operand.
    After f = methodcaller('name'), the call f(r) returns r.name().
    After g = methodcaller('name', 'date', foo=1), the call g(r) returns
    r.name('date', foo=1).
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [7576 7617])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [7662 7791])
                            ("self" variable nil (reparse-symbol indented_block_body) [7799 7813])
                            ("self" variable nil (reparse-symbol indented_block_body) [7822 7842])
                            ("if" code nil (reparse-symbol indented_block_body) [7851 7947])
                            ("self" variable nil (reparse-symbol indented_block_body) [7955 7976])
                            ("self" variable nil (reparse-symbol indented_block_body) [7985 8006]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [7636 7641])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7643 7651]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7623 8007])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8025 8029])
                            ("obj" variable nil (reparse-symbol function_parameters) [8031 8034]))                          )
                        (reparse-symbol indented_block_body) [8012 8106])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8124 8128]))                          )
                        (reparse-symbol indented_block_body) [8111 8438])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8458 8462]))                          )
                        (reparse-symbol indented_block_body) [8443 8695]))                  
                :type "class")
                nil [7295 8695])
            ("iadd" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [8788 8789])
                ("b" variable nil (reparse-symbol function_parameters) [8791 8792]))              ) nil [8779 8841])
            ("iand" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [8851 8852])
                ("b" variable nil (reparse-symbol function_parameters) [8854 8855]))              ) nil [8842 8904])
            ("iconcat" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [8917 8918])
                ("b" variable nil (reparse-symbol function_parameters) [8920 8921]))              ) nil [8905 9129])
            ("ifloordiv" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9144 9145])
                ("b" variable nil (reparse-symbol function_parameters) [9147 9148]))              ) nil [9130 9199])
            ("ilshift" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9212 9213])
                ("b" variable nil (reparse-symbol function_parameters) [9215 9216]))              ) nil [9200 9267])
            ("imod" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9277 9278])
                ("b" variable nil (reparse-symbol function_parameters) [9280 9281]))              ) nil [9268 9330])
            ("imul" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9340 9341])
                ("b" variable nil (reparse-symbol function_parameters) [9343 9344]))              ) nil [9331 9393])
            ("imatmul" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9406 9407])
                ("b" variable nil (reparse-symbol function_parameters) [9409 9410]))              ) nil [9394 9459])
            ("ior" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9468 9469])
                ("b" variable nil (reparse-symbol function_parameters) [9471 9472]))              ) nil [9460 9521])
            ("ipow" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9531 9532])
                ("b" variable nil (reparse-symbol function_parameters) [9534 9535]))              ) nil [9522 9585])
            ("irshift" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9598 9599])
                ("b" variable nil (reparse-symbol function_parameters) [9601 9602]))              ) nil [9586 9653])
            ("isub" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9663 9664])
                ("b" variable nil (reparse-symbol function_parameters) [9666 9667]))              ) nil [9654 9716])
            ("itruediv" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9730 9731])
                ("b" variable nil (reparse-symbol function_parameters) [9733 9734]))              ) nil [9717 9783])
            ("ixor" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9793 9794])
                ("b" variable nil (reparse-symbol function_parameters) [9796 9797]))              ) nil [9784 9846])
            ("try" code nil nil [9848 9950])
            ("__lt__" variable nil nil [10091 10102])
            ("__le__" variable nil nil [10103 10114])
            ("__eq__" variable nil nil [10115 10126])
            ("__ne__" variable nil nil [10127 10138])
            ("__ge__" variable nil nil [10139 10150])
            ("__gt__" variable nil nil [10151 10162])
            ("__not__" variable nil nil [10163 10177])
            ("__abs__" variable nil nil [10178 10191])
            ("__add__" variable nil nil [10192 10205])
            ("__and__" variable nil nil [10206 10220])
            ("__floordiv__" variable nil nil [10221 10244])
            ("__index__" variable nil nil [10245 10262])
            ("__inv__" variable nil nil [10263 10276])
            ("__invert__" variable nil nil [10277 10296])
            ("__lshift__" variable nil nil [10297 10316])
            ("__mod__" variable nil nil [10317 10330])
            ("__mul__" variable nil nil [10331 10344])
            ("__matmul__" variable nil nil [10345 10364])
            ("__neg__" variable nil nil [10365 10378])
            ("__or__" variable nil nil [10379 10391])
            ("__pos__" variable nil nil [10392 10405])
            ("__pow__" variable nil nil [10406 10419])
            ("__rshift__" variable nil nil [10420 10439])
            ("__sub__" variable nil nil [10440 10453])
            ("__truediv__" variable nil nil [10454 10475])
            ("__xor__" variable nil nil [10476 10489])
            ("__concat__" variable nil nil [10490 10509])
            ("__contains__" variable nil nil [10510 10533])
            ("__delitem__" variable nil nil [10534 10555])
            ("__getitem__" variable nil nil [10556 10577])
            ("__setitem__" variable nil nil [10578 10599])
            ("__iadd__" variable nil nil [10600 10615])
            ("__iand__" variable nil nil [10616 10631])
            ("__iconcat__" variable nil nil [10632 10653])
            ("__ifloordiv__" variable nil nil [10654 10679])
            ("__ilshift__" variable nil nil [10680 10701])
            ("__imod__" variable nil nil [10702 10717])
            ("__imul__" variable nil nil [10718 10733])
            ("__imatmul__" variable nil nil [10734 10755])
            ("__ior__" variable nil nil [10756 10769])
            ("__ipow__" variable nil nil [10770 10785])
            ("__irshift__" variable nil nil [10786 10807])
            ("__isub__" variable nil nil [10808 10823])
            ("__itruediv__" variable nil nil [10824 10847])
            ("__ixor__" variable nil nil [10848 10863]))          
      :file "operator.py"
      :pointmax 10864
      :fsize 10863
      :lastmodtime '(22333 27206 338105 881000)
      :unmatched-syntax '((NAME 9439 . 9440) (AT 9441 . 9442) (ASSIGN 9442 . 9443) (RETURN 1608 . 1614) (IF 1620 . 1622) (ELSE 1625 . 1629)))
    (semanticdb-table "_weakrefset.py"
      :major-mode 'python-mode
      :tags 
        '( ("_weakref" include nil nil [145 169])
            ("__all__" variable nil nil [171 192])
            ("_IterationGuard" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [535 574]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [475 479])
                            ("weakcontainer" variable nil (reparse-symbol function_parameters) [481 494]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [462 575])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [594 598]))                          )
                        (reparse-symbol indented_block_body) [580 715])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [733 737])
                            ("e" variable nil (reparse-symbol function_parameters) [739 740])
                            ("t" variable nil (reparse-symbol function_parameters) [742 743])
                            ("b" variable nil (reparse-symbol function_parameters) [745 746]))                          )
                        (reparse-symbol indented_block_body) [720 923]))                  
                :type "class")
                nil [195 923])
            ("WeakSet" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [983 1000])
                            ("_remove" function (:arguments 
                              ( ("item" variable nil (reparse-symbol function_parameters) [1021 1025])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1027 1034]))                              ) (reparse-symbol indented_block_body) [1009 1267])
                            ("self" variable nil (reparse-symbol indented_block_body) [1275 1297])
                            ("self" variable nil (reparse-symbol indented_block_body) [1345 1372])
                            ("self" variable nil (reparse-symbol indented_block_body) [1381 1404])
                            ("if" code nil (reparse-symbol indented_block_body) [1413 1464]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [957 961])
                            ("data" variable nil (reparse-symbol function_parameters) [963 967]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [944 1464])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1490 1494]))                          )
                        (reparse-symbol indented_block_body) [1469 1614])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1632 1636]))                          )
                        (reparse-symbol indented_block_body) [1619 1949])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1966 1970]))                          )
                        (reparse-symbol indented_block_body) [1954 2033])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2055 2059])
                            ("item" variable nil (reparse-symbol function_parameters) [2061 2065]))                          )
                        (reparse-symbol indented_block_body) [2038 2190])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2210 2214]))                          )
                        (reparse-symbol indented_block_body) [2195 2313])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2326 2330])
                            ("item" variable nil (reparse-symbol function_parameters) [2332 2336]))                          )
                        (reparse-symbol indented_block_body) [2318 2457])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2472 2476]))                          )
                        (reparse-symbol indented_block_body) [2462 2576])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2590 2594]))                          )
                        (reparse-symbol indented_block_body) [2581 2633])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2646 2650]))                          )
                        (reparse-symbol indented_block_body) [2638 2979])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2995 2999])
                            ("item" variable nil (reparse-symbol function_parameters) [3001 3005]))                          )
                        (reparse-symbol indented_block_body) [2984 3115])
                    ("discard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3132 3136])
                            ("item" variable nil (reparse-symbol function_parameters) [3138 3142]))                          )
                        (reparse-symbol indented_block_body) [3120 3253])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3269 3273])
                            ("other" variable nil (reparse-symbol function_parameters) [3275 3280]))                          )
                        (reparse-symbol indented_block_body) [3258 3414])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3431 3435])
                            ("other" variable nil (reparse-symbol function_parameters) [3437 3442]))                          )
                        (reparse-symbol indented_block_body) [3419 3492])
                    ("difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3512 3516])
                            ("other" variable nil (reparse-symbol function_parameters) [3518 3523]))                          )
                        (reparse-symbol indented_block_body) [3497 3617])
                    ("__sub__" variable nil (reparse-symbol indented_block_body) [3621 3641])
                    ("difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3669 3673])
                            ("other" variable nil (reparse-symbol function_parameters) [3675 3680]))                          )
                        (reparse-symbol indented_block_body) [3647 3712])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3729 3733])
                            ("other" variable nil (reparse-symbol function_parameters) [3735 3740]))                          )
                        (reparse-symbol indented_block_body) [3716 3973])
                    ("intersection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3995 3999])
                            ("other" variable nil (reparse-symbol function_parameters) [4001 4006]))                          )
                        (reparse-symbol indented_block_body) [3978 4079])
                    ("__and__" variable nil (reparse-symbol indented_block_body) [4083 4105])
                    ("intersection_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4135 4139])
                            ("other" variable nil (reparse-symbol function_parameters) [4141 4146]))                          )
                        (reparse-symbol indented_block_body) [4111 4178])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4195 4199])
                            ("other" variable nil (reparse-symbol function_parameters) [4201 4206]))                          )
                        (reparse-symbol indented_block_body) [4182 4367])
                    ("issubset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4385 4389])
                            ("other" variable nil (reparse-symbol function_parameters) [4391 4396]))                          )
                        (reparse-symbol indented_block_body) [4372 4462])
                    ("__le__" variable nil (reparse-symbol indented_block_body) [4466 4483])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4500 4504])
                            ("other" variable nil (reparse-symbol function_parameters) [4506 4511]))                          )
                        (reparse-symbol indented_block_body) [4489 4574])
                    ("issuperset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4594 4598])
                            ("other" variable nil (reparse-symbol function_parameters) [4600 4605]))                          )
                        (reparse-symbol indented_block_body) [4579 4673])
                    ("__ge__" variable nil (reparse-symbol indented_block_body) [4677 4696])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4713 4717])
                            ("other" variable nil (reparse-symbol function_parameters) [4719 4724]))                          )
                        (reparse-symbol indented_block_body) [4702 4787])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4803 4807])
                            ("other" variable nil (reparse-symbol function_parameters) [4809 4814]))                          )
                        (reparse-symbol indented_block_body) [4792 4962])
                    ("symmetric_difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4992 4996])
                            ("other" variable nil (reparse-symbol function_parameters) [4998 5003]))                          )
                        (reparse-symbol indented_block_body) [4967 5107])
                    ("__xor__" variable nil (reparse-symbol indented_block_body) [5111 5141])
                    ("symmetric_difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5179 5183])
                            ("other" variable nil (reparse-symbol function_parameters) [5185 5190]))                          )
                        (reparse-symbol indented_block_body) [5147 5222])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5239 5243])
                            ("other" variable nil (reparse-symbol function_parameters) [5245 5250]))                          )
                        (reparse-symbol indented_block_body) [5226 5507])
                    ("union" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5522 5526])
                            ("other" variable nil (reparse-symbol function_parameters) [5528 5533]))                          )
                        (reparse-symbol indented_block_body) [5512 5603])
                    ("__or__" variable nil (reparse-symbol indented_block_body) [5607 5621])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5642 5646])
                            ("other" variable nil (reparse-symbol function_parameters) [5648 5653]))                          )
                        (reparse-symbol indented_block_body) [5627 5706]))                  
                :type "class")
                nil [925 5706]))          
      :file "_weakrefset.py"
      :pointmax 5706
      :fsize 5705
      :lastmodtime '(22333 27206 194105 884000)
      :unmatched-syntax nil)
    (semanticdb-table "sre_constants.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("_sre" include nil nil [399 436])
            ("error" type
               (:superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [601 615])
                            ("self" variable nil (reparse-symbol indented_block_body) [624 646])
                            ("self" variable nil (reparse-symbol indented_block_body) [655 669])
                            ("if" code nil (reparse-symbol indented_block_body) [678 1192])
                            ("super" code nil (reparse-symbol indented_block_body) [1200 1221]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [557 561])
                            ("msg" variable nil (reparse-symbol function_parameters) [563 566])
                            ("pattern" variable nil (reparse-symbol function_parameters) [568 575])
                            ("pos" variable nil (reparse-symbol function_parameters) [582 585]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [544 1222]))                  
                :type "class")
                nil [516 1222])
            ("_NamedIntConstant" type
               (:superclasses ("int")
                :members 
                  ( ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [1270 1273])
                        ("value" variable nil (reparse-symbol function_parameters) [1275 1280])
                        ("name" variable nil (reparse-symbol function_parameters) [1282 1286]))                      ) (reparse-symbol indented_block_body) [1258 1399])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1416 1420]))                          )
                        (reparse-symbol indented_block_body) [1404 1448])
                    ("__repr__" variable nil (reparse-symbol indented_block_body) [1453 1471]))                  
                :type "class")
                nil [1224 1472])
            ("MAXREPEAT" variable nil nil [1473 1526])
            ("_makecodes" function (:arguments 
              ( ("names" variable nil (reparse-symbol function_parameters) [1543 1548]))              ) nil [1528 1733])
            ("OPCODES" variable nil nil [1811 2266])
            ("del" code nil nil [2267 2283])
            ("ATCODES" variable nil nil [2332 2565])
            ("CHCODES" variable nil nil [2580 3001])
            ("OP_IGNORE" variable nil nil [3052 3208])
            ("AT_MULTILINE" variable nil nil [3210 3289])
            ("AT_LOCALE" variable nil nil [3291 3381])
            ("AT_UNICODE" variable nil nil [3383 3474])
            ("CH_LOCALE" variable nil nil [3476 3830])
            ("CH_UNICODE" variable nil nil [3832 4211])
            ("SRE_FLAG_TEMPLATE" variable nil nil [4221 4242])
            ("SRE_FLAG_IGNORECASE" variable nil nil [4282 4305])
            ("SRE_FLAG_LOCALE" variable nil nil [4325 4344])
            ("SRE_FLAG_MULTILINE" variable nil nil [4368 4390])
            ("SRE_FLAG_DOTALL" variable nil nil [4426 4446])
            ("SRE_FLAG_UNICODE" variable nil nil [4481 4502])
            ("SRE_FLAG_VERBOSE" variable nil nil [4526 4547])
            ("SRE_FLAG_DEBUG" variable nil nil [4581 4601])
            ("SRE_FLAG_ASCII" variable nil nil [4614 4634])
            ("SRE_INFO_PREFIX" variable nil nil [4684 4703])
            ("SRE_INFO_LITERAL" variable nil nil [4717 4737])
            ("SRE_INFO_CHARSET" variable nil nil [4784 4804])
            ("if" code nil nil [4853 6449]))          
      :file "sre_constants.py"
      :pointmax 6449
      :fsize 6448
      :lastmodtime '(22333 27206 414105 880000)
      :unmatched-syntax nil)
    (semanticdb-table "posixpath.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Common operations on Posix pathnames.

Instead of importing this module directly, import os and refer to
this module as os.path.  The \"os.path\" name is an alias for this
module on Posix systems; on other systems (e.g. Mac, Windows),
os.path provides the same operations in a manner specific to that
platform, and is an alias to another module (e.g. macpath, ntpath).

Some of this can actually be useful on non-Posix systems too, e.g.
for manipulation of the pathname component of URLs.
\"\"\"" code nil nil [1 494])
            ("os" include nil nil [496 505])
            ("sys" include nil nil [506 516])
            ("stat" include nil nil [517 528])
            ("genericpath" include nil nil [529 547])
            ("genericpath" include nil nil [548 573])
            ("__all__" variable nil nil [575 1082])
            ("curdir" variable nil nil [1211 1223])
            ("pardir" variable nil nil [1224 1237])
            ("extsep" variable nil nil [1238 1250])
            ("sep" variable nil nil [1251 1260])
            ("pathsep" variable nil nil [1261 1274])
            ("defpath" variable nil nil [1275 1301])
            ("altsep" variable nil nil [1302 1315])
            ("devnull" variable nil nil [1316 1337])
            ("_get_sep" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [1352 1356]))              ) nil [1339 1440])
            ("normcase" function
               (:documentation "Normalize case of pathname.  Has no effect under Posix"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1719 1720]))                  )
                nil [1706 1975])
            ("isabs" function
               (:documentation "Test whether a path is absolute"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2074 2075]))                  )
                nil [2064 2171])
            ("join" function
               (:documentation "Join two or more pathname components, inserting '/' as needed.
    If any component is an absolute path, all previous path components
    will be discarded.  An empty last part will result in a path that
    ends with a separator."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [2322 2323])
                    ("p" variable nil (reparse-symbol function_parameters) [2325 2327]))                  )
                nil [2313 3056])
            ("split" function
               (:documentation "Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is
    everything after the final slash.  Either part may be empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3312 3313]))                  )
                nil [3302 3625])
            ("splitext" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [3846 3847]))              ) nil [3833 4024])
            ("splitext" variable nil nil [4024 4072])
            ("splitdrive" function
               (:documentation "Split a pathname into drive and path. On Posix, drive is always
    empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [4227 4228]))                  )
                nil [4212 4336])
            ("basename" function
               (:documentation "Returns the final component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [4421 4422]))                  )
                nil [4408 4541])
            ("dirname" function
               (:documentation "Returns the directory component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [4624 4625]))                  )
                nil [4612 4835])
            ("islink" function
               (:documentation "Test whether a path is a symbolic link"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [4951 4955]))                  )
                nil [4940 5139])
            ("lexists" function
               (:documentation "Test whether a path exists.  Returns True for broken symbolic links"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [5210 5214]))                  )
                nil [5198 5384])
            ("ismount" function
               (:documentation "Test whether a path is a mount point"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [5502 5506]))                  )
                nil [5490 6270])
            ("expanduser" function
               (:documentation "Expand ~ and ~user constructions.  If user or $HOME is unknown,
    do nothing."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [6761 6765]))                  )
                nil [6746 7731])
            ("_varprog" variable nil nil [7892 7907])
            ("_varprogb" variable nil nil [7908 7924])
            ("expandvars" function
               (:documentation "Expand shell variables of form $var and ${var}.  Unknown variables
    are left unchanged."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [7941 7945]))                  )
                nil [7926 9263])
            ("normpath" function
               (:documentation "Normalize path, eliminating double slashes, etc."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [9451 9455]))                  )
                nil [9438 10493])
            ("abspath" function
               (:documentation "Return an absolute path."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [10507 10511]))                  )
                nil [10495 10741])
            ("realpath" function
               (:documentation "Return the canonical path of the specified filename, eliminating any
symbolic links encountered in the path."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [10843 10851]))                  )
                nil [10830 11055])
            ("_joinrealpath" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [11173 11177])
                ("rest" variable nil (reparse-symbol function_parameters) [11179 11183])
                ("seen" variable nil (reparse-symbol function_parameters) [11185 11189]))              ) nil [11155 12630])
            ("supports_unicode_filenames" variable nil nil [12632 12687])
            ("relpath" function
               (:documentation "Return a relative version of a path"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [12701 12705])
                    ("start" variable nil (reparse-symbol function_parameters) [12707 12712]))                  )
                nil [12689 13608])
            ("commonpath" function
               (:documentation "Given a sequence of path names, returns the longest common sub-path."
                :arguments 
                  ( ("paths" variable nil (reparse-symbol function_parameters) [13864 13869]))                  )
                nil [13849 14882]))          
      :file "posixpath.py"
      :pointmax 14882
      :fsize 14881
      :lastmodtime '(22333 27206 362105 881000)
      :unmatched-syntax '((NAME 14693 . 14699) (IF 14706 . 14708) (ELSE 14715 . 14719) (RAISE 14338 . 14343) (FROM 14396 . 14400) (NEWLINE 14405 . 14406) (INDENT_BLOCK 8141 . 8165) (NEWLINE 8140 . 8141) (IF 8120 . 8122) (STRING_LITERAL 8124 . 8127) (COLON 8139 . 8140)))
    (semanticdb-table "copy.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Generic (shallow and deep) copying operations.

Interface summary:

        import copy

        x = copy.copy(y)        # make a shallow copy of y
        x = copy.deepcopy(y)    # make a deep copy of y

For module specific errors, copy.Error is raised.

The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances).

- A shallow copy constructs a new compound object and then (to the
  extent possible) inserts *the same objects* into it that the
  original contains.

- A deep copy constructs a new compound object and then, recursively,
  inserts *copies* into it of the objects found in the original.

Two problems often exist with deep copy operations that don't exist
with shallow copy operations:

 a) recursive objects (compound objects that, directly or indirectly,
    contain a reference to themselves) may cause a recursive loop

 b) because deep copy copies *everything* it may copy too much, e.g.
    administrative data structures that should be shared even between
    copies

Python's deep copy operation avoids these problems by:

 a) keeping a table of objects already copied during the current
    copying pass

 b) letting user-defined classes override the copying operation or the
    set of components copied

This version does not copy types like module, class, function, method,
nor stack trace, stack frame, nor file, socket, window, nor array, nor
any similar types.

Classes can use the same interfaces to control copying that they use
to control pickling: they can define methods called __getinitargs__(),
__getstate__() and __setstate__().  See the documentation for module
\"pickle\" for information on these methods.
\"\"\"" code nil nil [1 1748])
            ("types" include nil nil [1750 1762])
            ("weakref" include nil nil [1763 1777])
            ("copyreg" include nil nil [1778 1812])
            ("builtins" include nil nil [1813 1828])
            ("Error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1858 1862]))                  
                :type "class")
                nil [1830 1863])
            ("error" variable nil nil [1863 1876])
            ("try" code nil nil [1905 1997])
            ("__all__" variable nil nil [1998 2037])
            ("copy" function
               (:documentation "Shallow copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [2048 2049]))                  )
                nil [2039 2998])
            ("_copy_dispatch" variable nil nil [3000 3023])
            ("_copy_immutable" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3045 3046]))              ) nil [3025 3062])
            ("for" code nil nil [3062 3279])
            ("t" variable nil nil [3279 3315])
            ("if" code nil nil [3316 3361])
            ("for" code nil nil [3361 3488])
            ("_copy_with_constructor" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3516 3517]))              ) nil [3489 3542])
            ("for" code nil nil [3542 3604])
            ("_copy_with_copy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3632 3633]))              ) nil [3605 3656])
            ("if" code nil nil [3656 3728])
            ("del" code nil nil [3729 3734])
            ("deepcopy" function
               (:documentation "Deep copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [3749 3750])
                    ("memo" variable nil (reparse-symbol function_parameters) [3752 3756])
                    ("_nil" variable nil (reparse-symbol function_parameters) [3763 3767]))                  )
                nil [3736 5286])
            ("_deepcopy_dispatch" variable nil nil [5287 5314])
            ("_deepcopy_atomic" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5337 5338])
                ("memo" variable nil (reparse-symbol function_parameters) [5340 5344]))              ) nil [5316 5360])
            ("d" variable nil nil [5360 5392])
            ("d" variable nil nil [5393 5429])
            ("d" variable nil nil [5430 5455])
            ("d" variable nil nil [5456 5483])
            ("d" variable nil nil [5484 5510])
            ("try" code nil nil [5511 5577])
            ("d" variable nil nil [5577 5604])
            ("d" variable nil nil [5605 5630])
            ("try" code nil nil [5631 5709])
            ("d" variable nil nil [5709 5735])
            ("d" variable nil nil [5736 5763])
            ("d" variable nil nil [5764 5811])
            ("d" variable nil nil [5812 5852])
            ("d" variable nil nil [5853 5886])
            ("_deepcopy_list" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5907 5908])
                ("memo" variable nil (reparse-symbol function_parameters) [5910 5914]))              ) nil [5888 6013])
            ("d" variable nil nil [6013 6037])
            ("_deepcopy_tuple" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6059 6060])
                ("memo" variable nil (reparse-symbol function_parameters) [6062 6066]))              ) nil [6039 6465])
            ("d" variable nil nil [6465 6491])
            ("_deepcopy_dict" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6512 6513])
                ("memo" variable nil (reparse-symbol function_parameters) [6515 6519]))              ) nil [6493 6654])
            ("d" variable nil nil [6654 6678])
            ("if" code nil nil [6679 6743])
            ("_deepcopy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6765 6766])
                ("memo" variable nil (reparse-symbol function_parameters) [6768 6772]))              ) nil [6744 6858])
            ("_deepcopy_dispatch" variable nil nil [6858 6913])
            ("_keep_alive" function
               (:documentation "Keeps a reference to the object x in the memo.

    Because we remember objects by their id, we have
    to assure that possibly temporary objects are kept
    alive by referencing them.
    We store a reference at the id of the memo, which should
    normally not be used unless someone tries to deepcopy
    the memo itself...
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [6931 6932])
                    ("memo" variable nil (reparse-symbol function_parameters) [6934 6938]))                  )
                nil [6915 7416])
            ("_reconstruct" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [7434 7435])
                ("info" variable nil (reparse-symbol function_parameters) [7437 7441])
                ("deep" variable nil (reparse-symbol function_parameters) [7443 7447])
                ("memo" variable nil (reparse-symbol function_parameters) [7449 7453]))              ) nil [7417 8858])
            ("del" code nil nil [8859 8864])
            ("del" code nil nil [8866 8875])
            ("_EmptyClass" type
               (:members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [8956 8960]))                  
                :type "class")
                nil [8933 8961]))          
      :file "copy.py"
      :pointmax 8961
      :fsize 8960
      :lastmodtime '(22333 27206 242105 883000)
      :unmatched-syntax nil)
    (semanticdb-table "textwrap.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Text wrapping and filling.
\"\"\"" code nil nil [1 34])
            ("re" include nil nil [177 186])
            ("__all__" variable nil nil [188 260])
            ("_whitespace" variable nil nil [765 796])
            ("TextWrapper" type
               (:documentation "
    Object for wrapping/filling text.  The public interface consists of
    the wrap() and fill() methods; the other methods are just there for
    subclasses to override in order to tweak the default behaviour.
    If you want to completely replace the main wrapping algorithm,
    you'll probably have to override _wrap_chunks().

    Several instance attributes control various aspects of wrapping:
      width (default: 70)
        the maximum width of wrapped lines (unless break_long_words
        is false)
      initial_indent (default: \"\")
        string that will be prepended to the first line of wrapped
        output.  Counts towards the line's width.
      subsequent_indent (default: \"\")
        string that will be prepended to all lines save the first
        of wrapped output; also counts towards each line's width.
      expand_tabs (default: true)
        Expand tabs in input text to spaces before further processing.
        Each tab will become 0 .. 'tabsize' spaces, depending on its position
        in its line.  If false, each tab is treated as a single character.
      tabsize (default: 8)
        Expand tabs in input text to 0 .. 'tabsize' spaces, unless
        'expand_tabs' is false.
      replace_whitespace (default: true)
        Replace all whitespace characters in the input text by spaces
        after tab expansion.  Note that if expand_tabs is false and
        replace_whitespace is true, every tab will be converted to a
        single space!
      fix_sentence_endings (default: false)
        Ensure that sentence-ending punctuation is always followed
        by two spaces.  Off by default because the algorithm is
        (unavoidably) imperfect.
      break_long_words (default: true)
        Break words longer than 'width'.  If false, those words will not
        be broken, and some lines might be longer than 'width'.
      break_on_hyphens (default: true)
        Allow breaking hyphenated words. If true, wrapping will occur
        preferably on whitespaces and right after hyphens part of
        compound words.
      drop_whitespace (default: true)
        Drop leading and trailing whitespace from lines.
      max_lines (default: None)
        Truncate wrapped lines.
      placeholder (default: ' [...]')
        Append to the last line of truncated text.
    "
                :members 
                  ( ("unicode_whitespace_trans" variable nil (reparse-symbol indented_block_body) [3159 3188])
                    ("uspace" variable nil (reparse-symbol indented_block_body) [3193 3210])
                    ("for" code nil (reparse-symbol indented_block_body) [3215 3287])
                    ("word_punct" variable nil (reparse-symbol indented_block_body) [3596 3624])
                    ("letter" variable nil (reparse-symbol indented_block_body) [3629 3648])
                    ("wordsep_re" variable nil (reparse-symbol indented_block_body) [3653 4161])
                    ("del" code nil (reparse-symbol indented_block_body) [4166 4188])
                    ("wordsep_simple_re" variable nil (reparse-symbol indented_block_body) [4418 4458])
                    ("sentence_end_re" variable nil (reparse-symbol indented_block_body) [4583 4848])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5375 5393])
                            ("self" variable nil (reparse-symbol indented_block_body) [5402 5438])
                            ("self" variable nil (reparse-symbol indented_block_body) [5447 5489])
                            ("self" variable nil (reparse-symbol indented_block_body) [5498 5528])
                            ("self" variable nil (reparse-symbol indented_block_body) [5537 5581])
                            ("self" variable nil (reparse-symbol indented_block_body) [5590 5638])
                            ("self" variable nil (reparse-symbol indented_block_body) [5647 5687])
                            ("self" variable nil (reparse-symbol indented_block_body) [5696 5734])
                            ("self" variable nil (reparse-symbol indented_block_body) [5743 5783])
                            ("self" variable nil (reparse-symbol indented_block_body) [5792 5814])
                            ("self" variable nil (reparse-symbol indented_block_body) [5823 5849])
                            ("self" variable nil (reparse-symbol indented_block_body) [5858 5888]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4897 4901])
                            ("width" variable nil (reparse-symbol function_parameters) [4920 4925])
                            ("initial_indent" variable nil (reparse-symbol function_parameters) [4947 4961])
                            ("subsequent_indent" variable nil (reparse-symbol function_parameters) [4983 5000])
                            ("expand_tabs" variable nil (reparse-symbol function_parameters) [5022 5033])
                            ("replace_whitespace" variable nil (reparse-symbol function_parameters) [5057 5075])
                            ("fix_sentence_endings" variable nil (reparse-symbol function_parameters) [5099 5119])
                            ("break_long_words" variable nil (reparse-symbol function_parameters) [5144 5160])
                            ("drop_whitespace" variable nil (reparse-symbol function_parameters) [5184 5199])
                            ("break_on_hyphens" variable nil (reparse-symbol function_parameters) [5223 5239])
                            ("tabsize" variable nil (reparse-symbol function_parameters) [5263 5270])
                            ("max_lines" variable nil (reparse-symbol function_parameters) [5311 5320])
                            ("placeholder" variable nil (reparse-symbol function_parameters) [5344 5355]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4884 5889])
                    ("_munge_whitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6042 6046])
                            ("text" variable nil (reparse-symbol function_parameters) [6048 6052]))                          
                        :documentation "_munge_whitespace(text : string) -> string

        Munge whitespace in text: expand tabs and convert all other
        whitespace characters to spaces.  Eg. \" foo\\\\tbar\\\\n\\\\nbaz\"
        becomes \" foo    bar  baz\".
        ")
                        (reparse-symbol indented_block_body) [6020 6493])
                    ("_split" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6510 6514])
                            ("text" variable nil (reparse-symbol function_parameters) [6516 6520]))                          
                        :documentation "_split(text : string) -> [string]

        Split the text to wrap into indivisible chunks.  Chunks are
        not quite the same as words; see _wrap_chunks() for full
        details.  As an example, the text
          Look, goof-ball -- use the -b option!
        breaks into the following chunks:
          'Look,', ' ', 'goof-', 'ball', ' ', '--', ' ',
          'use', ' ', 'the', ' ', '-b', ' ', 'option!'
        if break_on_hyphens is True, or in:
          'Look,', ' ', 'goof-ball', ' ', '--', ' ',
          'use', ' ', 'the', ' ', '-b', ' ', option!'
        otherwise.
        ")
                        (reparse-symbol indented_block_body) [6499 7353])
                    ("_fix_sentence_endings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7384 7388])
                            ("chunks" variable nil (reparse-symbol function_parameters) [7390 7396]))                          
                        :documentation "_fix_sentence_endings(chunks : [string])

        Correct for sentence endings buried in 'chunks'.  Eg. when the
        original text contains \"... foo.\\\\nBar ...\", munge_whitespace()
        and split() will convert that to [..., \"foo.\", \" \", \"Bar\", ...]
        which has one too few spaces; this method simply changes the one
        space to two.
        ")
                        (reparse-symbol indented_block_body) [7358 8028])
                    ("_handle_long_word" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8055 8059])
                            ("reversed_chunks" variable nil (reparse-symbol function_parameters) [8061 8076])
                            ("cur_line" variable nil (reparse-symbol function_parameters) [8078 8086])
                            ("cur_len" variable nil (reparse-symbol function_parameters) [8088 8095])
                            ("width" variable nil (reparse-symbol function_parameters) [8097 8102]))                          
                        :documentation "_handle_long_word(chunks : [string],
                             cur_line : [string],
                             cur_len : int, width : int)

        Handle a chunk of text (most likely a word, not whitespace) that
        is too long to fit in any line.
        ")
                        (reparse-symbol indented_block_body) [8033 9223])
                    ("_wrap_chunks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9591 9595])
                            ("chunks" variable nil (reparse-symbol function_parameters) [9597 9603]))                          
                        :documentation "_wrap_chunks(chunks : [string]) -> [string]

        Wrap a sequence of text chunks and return a list of lines of
        length 'self.width' or less.  (If 'break_long_words' is false,
        some lines may be longer than this.)  Chunks correspond roughly
        to words and the whitespace between them: each chunk is
        indivisible (modulo 'break_long_words'), but a line break can
        come between any two chunks.  Chunks should not have internal
        whitespace; ie. a chunk is either all whitespace or a \"word\".
        Whitespace chunks will be removed from the beginning and end of
        lines, but apart from that whitespace is preserved.
        ")
                        (reparse-symbol indented_block_body) [9574 13956])
                    ("_split_chunks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13979 13983])
                            ("text" variable nil (reparse-symbol function_parameters) [13985 13989]))                          )
                        (reparse-symbol indented_block_body) [13961 14069])
                    ("wrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14157 14161])
                            ("text" variable nil (reparse-symbol function_parameters) [14163 14167]))                          
                        :documentation "wrap(text : string) -> [string]

        Reformat the single paragraph in 'text' so it fits in lines of
        no more than 'self.width' columns, and return a list of wrapped
        lines.  Tabs in 'text' are expanded with string.expandtabs(),
        and all other whitespace characters (including newline) are
        converted to space.
        ")
                        (reparse-symbol indented_block_body) [14148 14703])
                    ("fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14717 14721])
                            ("text" variable nil (reparse-symbol function_parameters) [14723 14727]))                          
                        :documentation "fill(text : string) -> string

        Reformat the single paragraph in 'text' to fit in lines of no
        more than 'self.width' columns, and return a new string
        containing the entire wrapped paragraph.
        ")
                        (reparse-symbol indented_block_body) [14708 15009]))                  
                :type "class")
                nil [798 15009])
            ("wrap" function
               (:documentation "Wrap a single paragraph of text, returning a list of wrapped lines.

    Reformat the single paragraph in 'text' so it fits in lines of no
    more than 'width' columns, and return a list of wrapped lines.  By
    default, tabs in 'text' are expanded with string.expandtabs(), and
    all other whitespace characters (including newline) are converted to
    space.  See TextWrapper class for available keyword args to customize
    wrapping behaviour.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [15094 15098])
                    ("width" variable nil (reparse-symbol function_parameters) [15100 15105])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [15110 15118]))                  )
                nil [15085 15655])
            ("fill" function
               (:documentation "Fill a single paragraph of text, returning a new string.

    Reformat the single paragraph in 'text' to fit in lines of no more
    than 'width' columns, and return a new string containing the entire
    wrapped paragraph.  As with wrap(), tabs are expanded and other
    whitespace characters converted to space.  See TextWrapper class for
    available keyword args to customize wrapping behaviour.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [15665 15669])
                    ("width" variable nil (reparse-symbol function_parameters) [15671 15676])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [15681 15689]))                  )
                nil [15656 16176])
            ("shorten" function
               (:documentation "Collapse and truncate the given text to fit in the given width.

    The text first has its whitespace collapsed.  If it then fits in
    the *width*, it is returned as is.  Otherwise, as many words
    as possible are joined and then the placeholder is appended::

        >>> textwrap.shorten(\"Hello  world!\", width=12)
        'Hello world!'
        >>> textwrap.shorten(\"Hello  world!\", width=11)
        'Hello [...]'
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [16189 16193])
                    ("width" variable nil (reparse-symbol function_parameters) [16195 16200])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [16202 16210]))                  )
                nil [16177 16757])
            ("_whitespace_only_re" variable nil nil [16833 16891])
            ("_leading_whitespace_re" variable nil nil [16892 16966])
            ("dedent" function
               (:documentation "Remove any common leading whitespace from every line in `text`.

    This can be used to make triple-quoted strings line up with the left
    edge of the display, while still presenting them in the source code
    in indented form.

    Note that tabs and spaces are both treated as whitespace, but they
    are not equal: the lines \"  hello\" and \"\\\\thello\" are
    considered to have no common leading whitespace.  (This behaviour is
    new in Python 2.5; older versions of this module incorrectly
    expanded tabs before searching for common leading whitespace.)
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [16979 16983]))                  )
                nil [16968 18842])
            ("indent" function
               (:documentation "Adds 'prefix' to the beginning of selected lines in 'text'.

    If 'predicate' is provided, 'prefix' will only be added to the lines
    where 'predicate(line)' is True. If 'predicate' is not provided,
    it will default to adding 'prefix' to all non-empty lines that do not
    consist solely of whitespace characters.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [18855 18859])
                    ("prefix" variable nil (reparse-symbol function_parameters) [18861 18867])
                    ("predicate" variable nil (reparse-symbol function_parameters) [18869 18878]))                  )
                nil [18844 19480])
            ("if" code nil nil [19482 19655]))          
      :file "textwrap.py"
      :pointmax 19655
      :fsize 19654
      :lastmodtime '(22333 27206 442105 879000)
      :unmatched-syntax '((MULT 5291 . 5292) (COMMA 5292 . 5293)))
    (semanticdb-table "gettext.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internationalization and localization support.

This module provides internationalization (I18N) and localization (L10N)
support for your Python programs by providing an interface to the GNU gettext
message catalog library.

I18N refers to the operation by which a program is made aware of multiple
languages.  L10N refers to the adaptation of your program, once
internationalized, to the local language and cultural habits.

\"\"\"" code nil nil [1 433])
            ("sys" include nil nil [2049 2093])
            ("struct" include nil nil [2049 2093])
            ("re" include nil nil [2049 2093])
            ("os" include nil nil [2049 2093])
            ("io" include nil nil [2049 2093])
            ("copy" include nil nil [2049 2093])
            ("locale" include nil nil [2049 2093])
            ("errno" include nil nil [2094 2118])
            ("__all__" variable nil nil [2121 2431])
            ("_default_localedir" variable nil nil [2433 2502])
            ("c2py" function
               (:documentation "Gets a C expression as used in PO files for plural forms and returns a
    Python lambda function that implements an equivalent expression.
    "
                :arguments 
                  ( ("plural" variable nil (reparse-symbol function_parameters) [2514 2520]))                  )
                nil [2505 4323])
            ("_expand_lang" function (:arguments 
              ( ("loc" variable nil (reparse-symbol function_parameters) [4343 4346]))              ) nil [4326 5417])
            ("NullTranslations" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5485 5500])
                            ("self" variable nil (reparse-symbol indented_block_body) [5509 5529])
                            ("self" variable nil (reparse-symbol indented_block_body) [5538 5565])
                            ("self" variable nil (reparse-symbol indented_block_body) [5574 5595])
                            ("if" code nil (reparse-symbol indented_block_body) [5604 5651]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5461 5465])
                            ("fp" variable nil (reparse-symbol function_parameters) [5467 5469]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5448 5651])
                    ("_parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5667 5671])
                            ("fp" variable nil (reparse-symbol function_parameters) [5673 5675]))                          )
                        (reparse-symbol indented_block_body) [5656 5691])
                    ("add_fallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5713 5717])
                            ("fallback" variable nil (reparse-symbol function_parameters) [5719 5727]))                          )
                        (reparse-symbol indented_block_body) [5696 5859])
                    ("gettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5876 5880])
                            ("message" variable nil (reparse-symbol function_parameters) [5882 5889]))                          )
                        (reparse-symbol indented_block_body) [5864 5993])
                    ("lgettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6011 6015])
                            ("message" variable nil (reparse-symbol function_parameters) [6017 6024]))                          )
                        (reparse-symbol indented_block_body) [5998 6129])
                    ("ngettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6147 6151])
                            ("msgid1" variable nil (reparse-symbol function_parameters) [6153 6159])
                            ("msgid2" variable nil (reparse-symbol function_parameters) [6161 6167])
                            ("n" variable nil (reparse-symbol function_parameters) [6169 6170]))                          )
                        (reparse-symbol indented_block_body) [6134 6347])
                    ("lngettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6366 6370])
                            ("msgid1" variable nil (reparse-symbol function_parameters) [6372 6378])
                            ("msgid2" variable nil (reparse-symbol function_parameters) [6380 6386])
                            ("n" variable nil (reparse-symbol function_parameters) [6388 6389]))                          )
                        (reparse-symbol indented_block_body) [6352 6567])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6581 6585]))                          )
                        (reparse-symbol indented_block_body) [6572 6614])
                    ("charset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6631 6635]))                          )
                        (reparse-symbol indented_block_body) [6619 6667])
                    ("output_charset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6691 6695]))                          )
                        (reparse-symbol indented_block_body) [6672 6734])
                    ("set_output_charset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6762 6766])
                            ("charset" variable nil (reparse-symbol function_parameters) [6768 6775]))                          )
                        (reparse-symbol indented_block_body) [6739 6817])
                    ("install" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6834 6838])
                            ("names" variable nil (reparse-symbol function_parameters) [6840 6845]))                          )
                        (reparse-symbol indented_block_body) [6822 7368]))                  
                :type "class")
                nil [5420 7368])
            ("GNUTranslations" type
               (:superclasses ("NullTranslations")
                :members 
                  ( ("LE_MAGIC" variable nil (reparse-symbol indented_block_body) [7447 7468])
                    ("BE_MAGIC" variable nil (reparse-symbol indented_block_body) [7473 7494])
                    ("VERSIONS" variable nil (reparse-symbol indented_block_body) [7530 7547])
                    ("_get_versions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7571 7575])
                            ("version" variable nil (reparse-symbol function_parameters) [7577 7584]))                          
                        :documentation "Returns a tuple of major version, minor version")
                        (reparse-symbol indented_block_body) [7553 7698])
                    ("_parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7714 7718])
                            ("fp" variable nil (reparse-symbol function_parameters) [7720 7722]))                          
                        :documentation "Override this method to support alternative .mo formats.")
                        (reparse-symbol indented_block_body) [7703 11502])
                    ("lgettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11520 11524])
                            ("message" variable nil (reparse-symbol function_parameters) [11526 11533]))                          )
                        (reparse-symbol indented_block_body) [11507 11900])
                    ("lngettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11919 11923])
                            ("msgid1" variable nil (reparse-symbol function_parameters) [11925 11931])
                            ("msgid2" variable nil (reparse-symbol function_parameters) [11933 11939])
                            ("n" variable nil (reparse-symbol function_parameters) [11941 11942]))                          )
                        (reparse-symbol indented_block_body) [11905 12397])
                    ("gettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12414 12418])
                            ("message" variable nil (reparse-symbol function_parameters) [12420 12427]))                          )
                        (reparse-symbol indented_block_body) [12402 12669])
                    ("ngettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12687 12691])
                            ("msgid1" variable nil (reparse-symbol function_parameters) [12693 12699])
                            ("msgid2" variable nil (reparse-symbol function_parameters) [12701 12707])
                            ("n" variable nil (reparse-symbol function_parameters) [12709 12710]))                          )
                        (reparse-symbol indented_block_body) [12674 13028]))                  
                :type "class")
                nil [7370 13028])
            ("find" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [13086 13092])
                ("localedir" variable nil (reparse-symbol function_parameters) [13094 13103])
                ("languages" variable nil (reparse-symbol function_parameters) [13110 13119])
                ("all" variable nil (reparse-symbol function_parameters) [13126 13129]))              ) nil [13077 14186])
            ("_translations" variable nil nil [14255 14273])
            ("translation" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [14291 14297])
                ("localedir" variable nil (reparse-symbol function_parameters) [14299 14308])
                ("languages" variable nil (reparse-symbol function_parameters) [14315 14324])
                ("class_" variable nil (reparse-symbol function_parameters) [14347 14353])
                ("fallback" variable nil (reparse-symbol function_parameters) [14360 14368])
                ("codeset" variable nil (reparse-symbol function_parameters) [14376 14383]))              ) nil [14275 15373])
            ("install" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [15387 15393])
                ("localedir" variable nil (reparse-symbol function_parameters) [15395 15404])
                ("codeset" variable nil (reparse-symbol function_parameters) [15411 15418])
                ("names" variable nil (reparse-symbol function_parameters) [15425 15430]))              ) nil [15375 15530])
            ("_localedirs" variable nil nil [15580 15596])
            ("_localecodesets" variable nil nil [15634 15654])
            ("_current_domain" variable nil nil [15729 15757])
            ("textdomain" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [15775 15781]))              ) nil [15760 15903])
            ("bindtextdomain" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [15924 15930])
                ("localedir" variable nil (reparse-symbol function_parameters) [15932 15941]))              ) nil [15905 16097])
            ("bind_textdomain_codeset" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [16127 16133])
                ("codeset" variable nil (reparse-symbol function_parameters) [16135 16142]))              ) nil [16099 16286])
            ("dgettext" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [16301 16307])
                ("message" variable nil (reparse-symbol function_parameters) [16309 16316]))              ) nil [16288 16525])
            ("ldgettext" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [16540 16546])
                ("message" variable nil (reparse-symbol function_parameters) [16548 16555]))              ) nil [16526 16765])
            ("dngettext" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [16780 16786])
                ("msgid1" variable nil (reparse-symbol function_parameters) [16788 16794])
                ("msgid2" variable nil (reparse-symbol function_parameters) [16796 16802])
                ("n" variable nil (reparse-symbol function_parameters) [16804 16805]))              ) nil [16766 17087])
            ("ldngettext" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [17103 17109])
                ("msgid1" variable nil (reparse-symbol function_parameters) [17111 17117])
                ("msgid2" variable nil (reparse-symbol function_parameters) [17119 17125])
                ("n" variable nil (reparse-symbol function_parameters) [17127 17128]))              ) nil [17088 17411])
            ("gettext" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [17424 17431]))              ) nil [17412 17480])
            ("lgettext" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [17494 17501]))              ) nil [17481 17551])
            ("ngettext" function (:arguments 
              ( ("msgid1" variable nil (reparse-symbol function_parameters) [17565 17571])
                ("msgid2" variable nil (reparse-symbol function_parameters) [17573 17579])
                ("n" variable nil (reparse-symbol function_parameters) [17581 17582]))              ) nil [17552 17642])
            ("lngettext" function (:arguments 
              ( ("msgid1" variable nil (reparse-symbol function_parameters) [17657 17663])
                ("msgid2" variable nil (reparse-symbol function_parameters) [17665 17671])
                ("n" variable nil (reparse-symbol function_parameters) [17673 17674]))              ) nil [17643 17735])
            ("Catalog" variable nil nil [18173 18194]))          
      :file "gettext.py"
      :pointmax 18195
      :fsize 18194
      :lastmodtime '(22333 27206 286105 882000)
      :unmatched-syntax '((INDENT_BLOCK 11330 . 11394) (NEWLINE 11329 . 11330) (COLON 11328 . 11329) (ELSE 11324 . 11328) (INDENT_BLOCK 11067 . 11312) (NEWLINE 11035 . 11036) (IF 11017 . 11019) (STRING_LITERAL 11021 . 11027) (COLON 11034 . 11035)))
    (semanticdb-table "__future__.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Record of phased-in incompatible language changes.

Each line is of the form:

    FeatureName = \"_Feature(\" OptionalRelease \",\" MandatoryRelease \",\"
                              CompilerFlag \")\"

where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
of the same form as sys.version_info:

    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
     PY_MINOR_VERSION, # the 1; an int
     PY_MICRO_VERSION, # the 0; an int
     PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string
     PY_RELEASE_SERIAL # the 3; an int
    )

OptionalRelease records the first release in which

    from __future__ import FeatureName

was accepted.

In the case of MandatoryReleases that have not yet occurred,
MandatoryRelease predicts the release in which the feature will become part
of the language.

Else MandatoryRelease records when the feature became part of the language;
in releases at or after that, modules no longer need

    from __future__ import FeatureName

to use the feature in question, but may continue to use such imports.

MandatoryRelease may also be None, meaning that a planned feature got
dropped.

Instances of class _Feature have two corresponding methods,
.getOptionalRelease() and .getMandatoryRelease().

CompilerFlag is the (bitfield) flag that should be passed in the fourth
argument to the builtin function compile() to enable the feature in
dynamically compiled code.  This flag is stored in the .compiler_flag
attribute on _Future instances.  These values must match the appropriate
#defines of CO_xxx flags in Include/compile.h.

No feature line is ever to be deleted from this file.
\"\"\"" code nil nil [1 1645])
            ("all_feature_names" variable nil nil [1647 1860])
            ("__all__" code nil nil [1862 1913])
            ("CO_NESTED" variable nil nil [2137 2166])
            ("CO_GENERATOR_ALLOWED" variable nil nil [2185 2209])
            ("CO_FUTURE_DIVISION" variable nil nil [2253 2282])
            ("CO_FUTURE_ABSOLUTE_IMPORT" variable nil nil [2296 2330])
            ("CO_FUTURE_WITH_STATEMENT" variable nil nil [2369 2403])
            ("CO_FUTURE_PRINT_FUNCTION" variable nil nil [2423 2458])
            ("CO_FUTURE_UNICODE_LITERALS" variable nil nil [2478 2514])
            ("CO_FUTURE_BARRY_AS_BDFL" variable nil nil [2541 2574])
            ("CO_FUTURE_GENERATOR_STOP" variable nil nil [2575 2610])
            ("_Feature" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2761 2792])
                            ("self" variable nil (reparse-symbol indented_block_body) [2801 2834])
                            ("self" variable nil (reparse-symbol indented_block_body) [2843 2877]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2696 2700])
                            ("optionalRelease" variable nil (reparse-symbol function_parameters) [2702 2717])
                            ("mandatoryRelease" variable nil (reparse-symbol function_parameters) [2719 2735])
                            ("compiler_flag" variable nil (reparse-symbol function_parameters) [2737 2750]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2683 2878])
                    ("getOptionalRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2906 2910]))                          
                        :documentation "Return first release in which this feature was recognized.

        This is a 5-tuple, of the same form as sys.version_info.
        ")
                        (reparse-symbol indented_block_body) [2883 3091])
                    ("getMandatoryRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3120 3124]))                          
                        :documentation "Return release in which this feature will become mandatory.

        This is a 5-tuple, of the same form as sys.version_info, or, if
        the feature was dropped, is None.
        ")
                        (reparse-symbol indented_block_body) [3096 3356])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3374 3378]))                          )
                        (reparse-symbol indented_block_body) [3361 3535]))                  
                :type "class")
                nil [2663 3535])
            ("nested_scopes" variable nil nil [3536 3667])
            ("generators" variable nil nil [3669 3802])
            ("division" variable nil nil [3804 3929])
            ("absolute_import" variable nil nil [3931 4084])
            ("with_statement" variable nil nil [4086 4235])
            ("print_function" variable nil nil [4237 4386])
            ("unicode_literals" variable nil nil [4388 4545])
            ("barry_as_FLUFL" variable nil nil [4547 4693])
            ("generator_stop" variable nil nil [4695 4841]))          
      :file "__future__.py"
      :pointmax 4842
      :fsize 4841
      :lastmodtime '(22333 27206 166105 884000)
      :unmatched-syntax nil)
    (semanticdb-table "weakref.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Weak reference support for Python.

This module is an implementation of PEP 205:

http://www.python.org/dev/peps/pep-0205/
\"\"\"" code nil nil [1 130])
            ("" code nil nil [353 476])
            ("_weakrefset" include nil nil [478 526])
            ("collections" include nil nil [528 546])
            ("sys" include nil nil [598 608])
            ("itertools" include nil nil [609 625])
            ("ProxyTypes" variable nil nil [627 670])
            ("__all__" variable nil nil [672 911])
            ("WeakMethod" type
               (:documentation "
    A custom `weakref.ref` subclass which simulates a weak reference to
    a bound method, working around the lifetime problem of bound methods.
    "
                :superclasses ("ref")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [1104 1166])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [1184 1187])
                        ("meth" variable nil (reparse-symbol function_parameters) [1189 1193])
                        ("callback" variable nil (reparse-symbol function_parameters) [1195 1203]))                      ) (reparse-symbol indented_block_body) [1172 1934])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1952 1956]))                          )
                        (reparse-symbol indented_block_body) [1939 2130])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2146 2150])
                            ("other" variable nil (reparse-symbol function_parameters) [2152 2157]))                          )
                        (reparse-symbol indented_block_body) [2135 2393])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2409 2413])
                            ("other" variable nil (reparse-symbol function_parameters) [2415 2420]))                          )
                        (reparse-symbol indented_block_body) [2398 2658])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [2663 2686]))                  
                :type "class")
                nil [914 2687])
            ("WeakValueDictionary" type
               (:documentation "Mapping class that references values weakly.

    Entries in the dictionary will be discarded when no strong
    reference to the value exists anymore
    "
                :superclasses ("collections.MutableMapping")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [3236 3383])
                            ("args" variable nil (reparse-symbol indented_block_body) [3398 3409])
                            ("if" code nil (reparse-symbol indented_block_body) [3418 3516])
                            ("remove" function (:arguments 
                              ( ("wr" variable nil (reparse-symbol function_parameters) [3535 3537])
                                ("selfref" variable nil (reparse-symbol function_parameters) [3539 3546]))                              ) (reparse-symbol indented_block_body) [3524 3779])
                            ("self" variable nil (reparse-symbol indented_block_body) [3787 3808])
                            ("self" variable nil (reparse-symbol indented_block_body) [3856 3883])
                            ("self" variable nil (reparse-symbol indented_block_body) [3892 3915])
                            ("self" variable nil (reparse-symbol indented_block_body) [3924 3942])
                            ("self" code nil (reparse-symbol indented_block_body) [3951 3975]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [3214 3219])
                            ("kw" variable nil (reparse-symbol function_parameters) [3221 3225]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3201 3976])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4002 4006]))                          )
                        (reparse-symbol indented_block_body) [3981 4239])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4260 4264])
                            ("key" variable nil (reparse-symbol function_parameters) [4266 4269]))                          )
                        (reparse-symbol indented_block_body) [4244 4390])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4411 4415])
                            ("key" variable nil (reparse-symbol function_parameters) [4417 4420]))                          )
                        (reparse-symbol indented_block_body) [4395 4521])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4538 4542]))                          )
                        (reparse-symbol indented_block_body) [4526 4605])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4627 4631])
                            ("key" variable nil (reparse-symbol function_parameters) [4633 4636]))                          )
                        (reparse-symbol indented_block_body) [4610 4764])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4782 4786]))                          )
                        (reparse-symbol indented_block_body) [4769 4856])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4877 4881])
                            ("key" variable nil (reparse-symbol function_parameters) [4883 4886])
                            ("value" variable nil (reparse-symbol function_parameters) [4888 4893]))                          )
                        (reparse-symbol indented_block_body) [4861 5027])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5041 5045]))                          )
                        (reparse-symbol indented_block_body) [5032 5225])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [5230 5245])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5268 5272])
                            ("memo" variable nil (reparse-symbol function_parameters) [5274 5278]))                          )
                        (reparse-symbol indented_block_body) [5251 5503])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5516 5520])
                            ("key" variable nil (reparse-symbol function_parameters) [5522 5525])
                            ("default" variable nil (reparse-symbol function_parameters) [5527 5534]))                          )
                        (reparse-symbol indented_block_body) [5508 5816])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5831 5835]))                          )
                        (reparse-symbol indented_block_body) [5821 6008])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6022 6026]))                          )
                        (reparse-symbol indented_block_body) [6013 6174])
                    ("__iter__" variable nil (reparse-symbol indented_block_body) [6179 6194])
                    ("itervaluerefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6218 6222]))                          
                        :documentation "Return an iterator that yields the weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [6200 6718])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6734 6738]))                          )
                        (reparse-symbol indented_block_body) [6723 6912])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6929 6933]))                          )
                        (reparse-symbol indented_block_body) [6917 7150])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7163 7167])
                            ("key" variable nil (reparse-symbol function_parameters) [7169 7172])
                            ("args" variable nil (reparse-symbol function_parameters) [7174 7179]))                          )
                        (reparse-symbol indented_block_body) [7155 7487])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7507 7511])
                            ("key" variable nil (reparse-symbol function_parameters) [7513 7516])
                            ("default" variable nil (reparse-symbol function_parameters) [7518 7525]))                          )
                        (reparse-symbol indented_block_body) [7492 7813])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [7829 7834])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [7836 7844]))                      ) (reparse-symbol indented_block_body) [7818 8529])
                    ("valuerefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8548 8552]))                          
                        :documentation "Return a list of weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [8534 8992]))                  
                :type "class")
                nil [2689 8992])
            ("KeyedRef" type
               (:documentation "Specialized reference that includes a key corresponding to the value.

    This is used in the WeakValueDictionary to avoid having to create
    a function object for each key stored in the mapping.  A shared
    callback object can use the 'key' attribute of a KeyedRef instead
    of getting a reference to the key from an enclosing scope.

    "
                :superclasses ("ref")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [9378 9396])
                    ("__new__" function (:arguments 
                      ( ("type" variable nil (reparse-symbol function_parameters) [9414 9418])
                        ("ob" variable nil (reparse-symbol function_parameters) [9420 9422])
                        ("callback" variable nil (reparse-symbol function_parameters) [9424 9432])
                        ("key" variable nil (reparse-symbol function_parameters) [9434 9437]))                      ) (reparse-symbol indented_block_body) [9402 9530])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [9582 9612]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9548 9552])
                            ("ob" variable nil (reparse-symbol function_parameters) [9554 9556])
                            ("callback" variable nil (reparse-symbol function_parameters) [9558 9566])
                            ("key" variable nil (reparse-symbol function_parameters) [9568 9571]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9535 9613]))                  
                :type "class")
                nil [8994 9613])
            ("WeakKeyDictionary" type
               (:documentation " Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    "
                :superclasses ("collections.MutableMapping")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10116 10130])
                            ("remove" function (:arguments 
                              ( ("k" variable nil (reparse-symbol function_parameters) [10150 10151])
                                ("selfref" variable nil (reparse-symbol function_parameters) [10153 10160]))                              ) (reparse-symbol indented_block_body) [10139 10383])
                            ("self" variable nil (reparse-symbol indented_block_body) [10391 10412])
                            ("self" variable nil (reparse-symbol indented_block_body) [10476 10503])
                            ("self" variable nil (reparse-symbol indented_block_body) [10512 10535])
                            ("self" variable nil (reparse-symbol indented_block_body) [10544 10567])
                            ("if" code nil (reparse-symbol indented_block_body) [10576 10627]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10090 10094])
                            ("dict" variable nil (reparse-symbol function_parameters) [10096 10100]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10077 10627])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10653 10657]))                          )
                        (reparse-symbol indented_block_body) [10632 11104])
                    ("_scrub_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11129 11133]))                          )
                        (reparse-symbol indented_block_body) [11109 11269])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11290 11294])
                            ("key" variable nil (reparse-symbol function_parameters) [11296 11299]))                          )
                        (reparse-symbol indented_block_body) [11274 11365])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11386 11390])
                            ("key" variable nil (reparse-symbol function_parameters) [11392 11395]))                          )
                        (reparse-symbol indented_block_body) [11370 11433])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11450 11454]))                          )
                        (reparse-symbol indented_block_body) [11438 11754])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11772 11776]))                          )
                        (reparse-symbol indented_block_body) [11759 11846])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11867 11871])
                            ("key" variable nil (reparse-symbol function_parameters) [11873 11876])
                            ("value" variable nil (reparse-symbol function_parameters) [11878 11883]))                          )
                        (reparse-symbol indented_block_body) [11851 11936])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11950 11954]))                          )
                        (reparse-symbol indented_block_body) [11941 12138])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [12143 12158])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12181 12185])
                            ("memo" variable nil (reparse-symbol function_parameters) [12187 12191]))                          )
                        (reparse-symbol indented_block_body) [12164 12422])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12435 12439])
                            ("key" variable nil (reparse-symbol function_parameters) [12441 12444])
                            ("default" variable nil (reparse-symbol function_parameters) [12446 12453]))                          )
                        (reparse-symbol indented_block_body) [12427 12508])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12530 12534])
                            ("key" variable nil (reparse-symbol function_parameters) [12536 12539]))                          )
                        (reparse-symbol indented_block_body) [12513 12663])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12678 12682]))                          )
                        (reparse-symbol indented_block_body) [12668 12869])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12883 12887]))                          )
                        (reparse-symbol indented_block_body) [12874 13052])
                    ("__iter__" variable nil (reparse-symbol indented_block_body) [13057 13072])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13089 13093]))                          )
                        (reparse-symbol indented_block_body) [13078 13249])
                    ("keyrefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13266 13270]))                          
                        :documentation "Return a list of weak references to the keys.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the keys around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [13254 13697])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13714 13718]))                          )
                        (reparse-symbol indented_block_body) [13702 13901])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13914 13918])
                            ("key" variable nil (reparse-symbol function_parameters) [13920 13923])
                            ("args" variable nil (reparse-symbol function_parameters) [13925 13930]))                          )
                        (reparse-symbol indented_block_body) [13906 14010])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14030 14034])
                            ("key" variable nil (reparse-symbol function_parameters) [14036 14039])
                            ("default" variable nil (reparse-symbol function_parameters) [14041 14048]))                          )
                        (reparse-symbol indented_block_body) [14015 14124])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14140 14144])
                            ("dict" variable nil (reparse-symbol function_parameters) [14146 14150])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [14157 14165]))                          )
                        (reparse-symbol indented_block_body) [14129 14450]))                  
                :type "class")
                nil [9615 14450])
            ("finalize" type
               (:documentation "Class for finalization of weakrefable objects

    finalize(obj, func, *args, **kwargs) returns a callable finalizer
    object which will be called when obj is garbage collected. The
    first time the finalizer is called it evaluates func(*arg, **kwargs)
    and returns the result. After this the finalizer is dead, and
    calling it just returns None.

    When the program exits any remaining finalizers for which the
    atexit attribute is true will be run in reverse order of creation.
    By default atexit is true.
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [15210 15224])
                    ("_registry" variable nil (reparse-symbol indented_block_body) [15229 15243])
                    ("_shutdown" variable nil (reparse-symbol indented_block_body) [15248 15265])
                    ("_index_iter" variable nil (reparse-symbol indented_block_body) [15270 15301])
                    ("_dirty" variable nil (reparse-symbol indented_block_body) [15306 15320])
                    ("_registered_with_atexit" variable nil (reparse-symbol indented_block_body) [15325 15356])
                    ("_Info" type
                       (:members 
                          ( ("__slots__" variable nil (reparse-symbol indented_block_body) [15383 15451]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [15362 15452])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [15513 15796])
                            ("info" variable nil (reparse-symbol indented_block_body) [15804 15823])
                            ("info" variable nil (reparse-symbol indented_block_body) [15832 15861])
                            ("info" variable nil (reparse-symbol indented_block_body) [15870 15886])
                            ("info" variable nil (reparse-symbol indented_block_body) [15895 15911])
                            ("info" code nil (reparse-symbol indented_block_body) [15920 15948])
                            ("info" variable nil (reparse-symbol indented_block_body) [15957 15975])
                            ("info" variable nil (reparse-symbol indented_block_body) [15984 16019])
                            ("self" variable nil (reparse-symbol indented_block_body) [16028 16055])
                            ("finalize" variable nil (reparse-symbol indented_block_body) [16064 16086]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15470 15474])
                            ("obj" variable nil (reparse-symbol function_parameters) [15476 15479])
                            ("func" variable nil (reparse-symbol function_parameters) [15481 15485])
                            ("args" variable nil (reparse-symbol function_parameters) [15487 15492])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [15494 15502]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15457 16087])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16105 16109])
                            ("_" variable nil (reparse-symbol function_parameters) [16111 16112]))                          
                        :documentation "If alive then mark as dead and return func(*args, **kwargs);
        otherwise return None")
                        (reparse-symbol indented_block_body) [16092 16375])
                    ("detach" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16391 16395]))                          
                        :documentation "If alive then mark as dead and return (obj, func, args, kwargs);
        otherwise return None")
                        (reparse-symbol indented_block_body) [16380 16714])
                    ("peek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16728 16732]))                          
                        :documentation "If alive then return (obj, func, args, kwargs);
        otherwise return None")
                        (reparse-symbol indented_block_body) [16719 16999])
                    ("alive" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17028 17032]))                          
                        :documentation "Whether finalizer is alive")
                        (reparse-symbol indented_block_body) [17004 17114])
                    ("atexit" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17144 17148]))                          
                        :documentation "Whether finalizer should be called at exit")
                        (reparse-symbol indented_block_body) [17119 17290])
                    ("atexit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17325 17329])
                            ("value" variable nil (reparse-symbol function_parameters) [17331 17336]))                          
                        :decorators 
                          ( ("atexit.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17295 17434])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17452 17456]))                          )
                        (reparse-symbol indented_block_body) [17439 17791])
                    ("_select_for_exit" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [17834 17837]))                          )
                        (reparse-symbol indented_block_body) [17796 18050])
                    ("_exitfunc" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [18086 18089]))                          )
                        (reparse-symbol indented_block_body) [18055 19409]))                  
                :type "class")
                nil [14452 19409]))          
      :file "weakref.py"
      :pointmax 19409
      :fsize 19408
      :lastmodtime '(22333 27206 478105 879000)
      :unmatched-syntax '((NAME 8141 . 8145) (IF 8156 . 8158) (ELSE 8164 . 8168) (NAME 8008 . 8012) (MULT 8014 . 8015) (NAME 3391 . 3395) (MULT 3397 . 3398) (RAISE 1332 . 1337) (FROM 1441 . 1445) (NEWLINE 1450 . 1451)))
    (semanticdb-table "codecs.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\" codecs -- Python Codec Registry, API and helpers.


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

\"\"\"" code nil nil [1 165])
            ("sys" include nil nil [169 189])
            ("builtins" include nil nil [169 189])
            ("__all__" variable nil nil [371 1198])
            ("'\\xef\\xbb\\xbf'" code nil nil [1400 1414])
            ("'\\xff\\xfe'" code nil nil [1465 1475])
            ("'\\xfe\\xff'" code nil nil [1523 1533])
            ("'\\xff\\xfe\\x00\\x00'" code nil nil [1575 1593])
            ("'\\x00\\x00\\xfe\\xff'" code nil nil [1632 1650])
            ("if" code nil nil [1652 1949])
            ("BOM32_LE" variable nil nil [1993 2016])
            ("BOM32_BE" variable nil nil [2017 2040])
            ("BOM64_LE" variable nil nil [2041 2064])
            ("BOM64_BE" variable nil nil [2065 2088])
            ("CodecInfo" type
               (:documentation "Codec details when looking up the codec registry"
                :superclasses ("tuple")
                :members 
                  ( ("_is_text_encoding" variable nil (reparse-symbol indented_block_body) [2518 2542])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [2606 2609])
                        ("encode" variable nil (reparse-symbol function_parameters) [2611 2617])
                        ("decode" variable nil (reparse-symbol function_parameters) [2619 2625])
                        ("streamreader" variable nil (reparse-symbol function_parameters) [2627 2639])
                        ("streamwriter" variable nil (reparse-symbol function_parameters) [2646 2658])
                        ("incrementalencoder" variable nil (reparse-symbol function_parameters) [2673 2691])
                        ("incrementaldecoder" variable nil (reparse-symbol function_parameters) [2698 2716])
                        ("name" variable nil (reparse-symbol function_parameters) [2723 2727])
                        ("_is_text_encoding" variable nil (reparse-symbol function_parameters) [2745 2762]))                      ) (reparse-symbol indented_block_body) [2594 3238])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3256 3260]))                          )
                        (reparse-symbol indented_block_body) [3243 3433]))                  
                :type "class")
                nil [2134 3433])
            ("Codec" type
               (:documentation " Defines the interface for stateless encoders/decoders.

        The .encode()/.decode() methods may use different error
        handling schemes by providing the errors argument. These
        string values are predefined:

         'strict' - raise a ValueError error (or a subclass)
         'ignore' - ignore the character and continue with the next
         'replace' - replace with a suitable replacement character;
                    Python will use the official U+FFFD REPLACEMENT
                    CHARACTER for the builtin Unicode codecs on
                    decoding and '?' on encoding.
         'surrogateescape' - replace with private code points U+DCnn.
         'xmlcharrefreplace' - Replace with the appropriate XML
                               character reference (only for encoding).
         'backslashreplace'  - Replace with backslashed escape sequences.
         'namereplace'       - Replace with \\\\N{...} escape sequences
                               (only for encoding).

        The set of allowed values can be extended via register_error.

    "
                :members 
                  ( ("encode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4556 4560])
                            ("input" variable nil (reparse-symbol function_parameters) [4562 4567])
                            ("errors" variable nil (reparse-symbol function_parameters) [4569 4575]))                          
                        :documentation " Encodes the object input and returns a tuple (output
            object, length consumed).

            errors defines the error handling to apply. It defaults to
            'strict' handling.

            The method may not store state in the Codec instance. Use
            StreamWriter for codecs which have to keep state in order to
            make encoding efficient.

            The encoder must be able to handle zero length input and
            return an empty object of the output object type in this
            situation.

        ")
                        (reparse-symbol indented_block_body) [4545 5184])
                    ("decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5200 5204])
                            ("input" variable nil (reparse-symbol function_parameters) [5206 5211])
                            ("errors" variable nil (reparse-symbol function_parameters) [5213 5219]))                          
                        :documentation " Decodes the object input and returns a tuple (output
            object, length consumed).

            input must be an object which provides the bf_getreadbuf
            buffer slot. Python strings, buffer objects and memory
            mapped files are examples of objects providing this slot.

            errors defines the error handling to apply. It defaults to
            'strict' handling.

            The method may not store state in the Codec instance. Use
            StreamReader for codecs which have to keep state in order to
            make decoding efficient.

            The decoder must be able to handle zero length input and
            return an empty object of the output object type in this
            situation.

        ")
                        (reparse-symbol indented_block_body) [5189 6035]))                  
                :type "class")
                nil [3434 6035])
            ("IncrementalEncoder" type
               (:documentation "
    An IncrementalEncoder encodes an input in multiple steps. The input can
    be passed piece by piece to the encode() method. The IncrementalEncoder
    remembers the state of the encoding process between calls to encode().
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Creates an IncrementalEncoder instance.

        The IncrementalEncoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        \"\"\"" code nil (reparse-symbol indented_block_body) [6362 6612])
                            ("self" variable nil (reparse-symbol indented_block_body) [6621 6641])
                            ("self" variable nil (reparse-symbol indented_block_body) [6650 6666]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6330 6334])
                            ("errors" variable nil (reparse-symbol function_parameters) [6336 6342]))                          
                        :documentation "
        Creates an IncrementalEncoder instance.

        The IncrementalEncoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6317 6667])
                    ("encode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6683 6687])
                            ("input" variable nil (reparse-symbol function_parameters) [6689 6694])
                            ("final" variable nil (reparse-symbol function_parameters) [6696 6701]))                          
                        :documentation "
        Encodes input and returns the resulting object.
        ")
                        (reparse-symbol indented_block_body) [6672 6824])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6839 6843]))                          
                        :documentation "
        Resets the encoder to the initial state.
        ")
                        (reparse-symbol indented_block_body) [6829 6919])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6937 6941]))                          
                        :documentation "
        Return the current state of the encoder.
        ")
                        (reparse-symbol indented_block_body) [6924 7034])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7052 7056])
                            ("state" variable nil (reparse-symbol function_parameters) [7058 7063]))                          
                        :documentation "
        Set the current state of the encoder. state must have been
        returned by getstate().
        ")
                        (reparse-symbol indented_block_body) [7039 7189]))                  
                :type "class")
                nil [6036 7189])
            ("BufferedIncrementalEncoder" type
               (:documentation "
    This subclass of IncrementalEncoder can be used as the baseclass for an
    incremental encoder if the encoder must keep some of the output in a
    buffer between calls to encode().
    "
                :superclasses ("IncrementalEncoder")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("IncrementalEncoder" code nil (reparse-symbol indented_block_body) [7496 7537])
                            ("self" variable nil (reparse-symbol indented_block_body) [7611 7627]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7464 7468])
                            ("errors" variable nil (reparse-symbol function_parameters) [7470 7476]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7451 7628])
                    ("_buffer_encode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7652 7656])
                            ("input" variable nil (reparse-symbol function_parameters) [7658 7663])
                            ("errors" variable nil (reparse-symbol function_parameters) [7665 7671])
                            ("final" variable nil (reparse-symbol function_parameters) [7673 7678]))                          )
                        (reparse-symbol indented_block_body) [7633 7839])
                    ("encode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7855 7859])
                            ("input" variable nil (reparse-symbol function_parameters) [7861 7866])
                            ("final" variable nil (reparse-symbol function_parameters) [7868 7873]))                          )
                        (reparse-symbol indented_block_body) [7844 8159])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8174 8178]))                          )
                        (reparse-symbol indented_block_body) [8164 8245])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8263 8267]))                          )
                        (reparse-symbol indented_block_body) [8250 8302])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8320 8324])
                            ("state" variable nil (reparse-symbol function_parameters) [8326 8331]))                          )
                        (reparse-symbol indented_block_body) [8307 8368]))                  
                :type "class")
                nil [7190 8368])
            ("IncrementalDecoder" type
               (:documentation "
    An IncrementalDecoder decodes an input in multiple steps. The input can
    be passed piece by piece to the decode() method. The IncrementalDecoder
    remembers the state of the decoding process between calls to decode().
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create an IncrementalDecoder instance.

        The IncrementalDecoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        \"\"\"" code nil (reparse-symbol indented_block_body) [8695 8944])
                            ("self" variable nil (reparse-symbol indented_block_body) [8953 8973]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8663 8667])
                            ("errors" variable nil (reparse-symbol function_parameters) [8669 8675]))                          
                        :documentation "
        Create an IncrementalDecoder instance.

        The IncrementalDecoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8650 8974])
                    ("decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8990 8994])
                            ("input" variable nil (reparse-symbol function_parameters) [8996 9001])
                            ("final" variable nil (reparse-symbol function_parameters) [9003 9008]))                          
                        :documentation "
        Decode input and returns the resulting object.
        ")
                        (reparse-symbol indented_block_body) [8979 9130])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9145 9149]))                          
                        :documentation "
        Reset the decoder to the initial state.
        ")
                        (reparse-symbol indented_block_body) [9135 9224])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9242 9246]))                          
                        :documentation "
        Return the current state of the decoder.

        This must be a (buffered_input, additional_state_info) tuple.
        buffered_input must be a bytes object containing bytes that
        were passed to decode() that have not yet been converted.
        additional_state_info must be a non-negative integer
        representing the state of the decoder WITHOUT yet having
        processed the contents of buffered_input.  In the initial state
        and after reset(), getstate() must return (b\"\", 0).
        ")
                        (reparse-symbol indented_block_body) [9229 9809])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9827 9831])
                            ("state" variable nil (reparse-symbol function_parameters) [9833 9838]))                          
                        :documentation "
        Set the current state of the decoder.

        state must have been returned by getstate().  The effect of
        setstate((b\"\", 0)) must be equivalent to reset().
        ")
                        (reparse-symbol indented_block_body) [9814 10038]))                  
                :type "class")
                nil [8369 10038])
            ("BufferedIncrementalDecoder" type
               (:documentation "
    This subclass of IncrementalDecoder can be used as the baseclass for an
    incremental decoder if the decoder must be able to handle incomplete
    byte sequences.
    "
                :superclasses ("IncrementalDecoder")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("IncrementalDecoder" code nil (reparse-symbol indented_block_body) [10327 10368])
                            ("\"\"" code nil (reparse-symbol indented_block_body) [10457 10459]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10295 10299])
                            ("errors" variable nil (reparse-symbol function_parameters) [10301 10307]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10282 10460])
                    ("_buffer_decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10484 10488])
                            ("input" variable nil (reparse-symbol function_parameters) [10490 10495])
                            ("errors" variable nil (reparse-symbol function_parameters) [10497 10503])
                            ("final" variable nil (reparse-symbol function_parameters) [10505 10510]))                          )
                        (reparse-symbol indented_block_body) [10465 10671])
                    ("decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10687 10691])
                            ("input" variable nil (reparse-symbol function_parameters) [10693 10698])
                            ("final" variable nil (reparse-symbol function_parameters) [10700 10705]))                          )
                        (reparse-symbol indented_block_body) [10676 10991])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11006 11010]))                          )
                        (reparse-symbol indented_block_body) [10996 11078])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11096 11100]))                          )
                        (reparse-symbol indented_block_body) [11083 11179])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11197 11201])
                            ("state" variable nil (reparse-symbol function_parameters) [11203 11208]))                          )
                        (reparse-symbol indented_block_body) [11184 11281]))                  
                :type "class")
                nil [10039 11281])
            ("StreamWriter" type
               (:superclasses ("Codec")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\" Creates a StreamWriter instance.

            stream must be a file-like object open for writing.

            The StreamWriter may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'xmlcharrefreplace' - Replace with the appropriate XML
                                   character reference.
             'backslashreplace'  - Replace with backslashed escape
                                   sequences.
             'namereplace'       - Replace with \\\\N{...} escape sequences.

            The set of allowed parameter values can be extended via
            register_error.
        \"\"\"" code nil (reparse-symbol indented_block_body) [11583 12477])
                            ("self" variable nil (reparse-symbol indented_block_body) [12486 12506])
                            ("self" variable nil (reparse-symbol indented_block_body) [12515 12535]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11542 11546])
                            ("stream" variable nil (reparse-symbol function_parameters) [11548 11554])
                            ("errors" variable nil (reparse-symbol function_parameters) [11556 11562]))                          
                        :documentation " Creates a StreamWriter instance.

            stream must be a file-like object open for writing.

            The StreamWriter may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'xmlcharrefreplace' - Replace with the appropriate XML
                                   character reference.
             'backslashreplace'  - Replace with backslashed escape
                                   sequences.
             'namereplace'       - Replace with \\\\N{...} escape sequences.

            The set of allowed parameter values can be extended via
            register_error.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11529 12536])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12551 12555])
                            ("object" variable nil (reparse-symbol function_parameters) [12557 12563]))                          
                        :documentation " Writes the object's contents encoded to self.stream.
        ")
                        (reparse-symbol indented_block_body) [12541 12734])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12754 12758])
                            ("list" variable nil (reparse-symbol function_parameters) [12760 12764]))                          
                        :documentation " Writes the concatenated list of strings to the stream
            using .write().
        ")
                        (reparse-symbol indented_block_body) [12739 12908])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12923 12927]))                          
                        :documentation " Flushes and resets the codec buffers used for keeping state.

            Calling this method should ensure that the data on the
            output is put into a clean state, that allows appending
            of new fresh data without having to rescan the whole
            stream to recover state.

        ")
                        (reparse-symbol indented_block_body) [12913 13268])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13282 13286])
                            ("offset" variable nil (reparse-symbol function_parameters) [13288 13294])
                            ("whence" variable nil (reparse-symbol function_parameters) [13296 13302]))                          )
                        (reparse-symbol indented_block_body) [13273 13413])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13434 13438])
                            ("name" variable nil (reparse-symbol function_parameters) [13440 13444])
                            ("getattr" variable nil (reparse-symbol function_parameters) [13466 13473]))                          
                        :documentation " Inherit all other methods from the underlying stream.
        ")
                        (reparse-symbol indented_block_body) [13418 13605])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13624 13628]))                          )
                        (reparse-symbol indented_block_body) [13610 13651])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13669 13673])
                            ("type" variable nil (reparse-symbol function_parameters) [13675 13679])
                            ("value" variable nil (reparse-symbol function_parameters) [13681 13686])
                            ("tb" variable nil (reparse-symbol function_parameters) [13688 13690]))                          )
                        (reparse-symbol indented_block_body) [13656 13721]))                  
                :type "class")
                nil [11497 13721])
            ("StreamReader" type
               (:superclasses ("Codec")
                :members 
                  ( ("charbuffertype" variable nil (reparse-symbol indented_block_body) [13759 13779])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\" Creates a StreamReader instance.

            stream must be a file-like object open for reading.

            The StreamReader may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'backslashreplace' - Replace with backslashed escape sequences;

            The set of allowed parameter values can be extended via
            register_error.
        \"\"\"" code nil (reparse-symbol indented_block_body) [13839 14498])
                            ("self" variable nil (reparse-symbol indented_block_body) [14507 14527])
                            ("self" variable nil (reparse-symbol indented_block_body) [14536 14556])
                            ("\"\"" code nil (reparse-symbol indented_block_body) [14584 14586])
                            ("self" variable nil (reparse-symbol indented_block_body) [14595 14641])
                            ("self" variable nil (reparse-symbol indented_block_body) [14650 14690])
                            ("self" variable nil (reparse-symbol indented_block_body) [14699 14721]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13798 13802])
                            ("stream" variable nil (reparse-symbol function_parameters) [13804 13810])
                            ("errors" variable nil (reparse-symbol function_parameters) [13812 13818]))                          
                        :documentation " Creates a StreamReader instance.

            stream must be a file-like object open for reading.

            The StreamReader may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'backslashreplace' - Replace with backslashed escape sequences;

            The set of allowed parameter values can be extended via
            register_error.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13785 14722])
                    ("decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14738 14742])
                            ("input" variable nil (reparse-symbol function_parameters) [14744 14749])
                            ("errors" variable nil (reparse-symbol function_parameters) [14751 14757]))                          )
                        (reparse-symbol indented_block_body) [14727 14803])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14817 14821])
                            ("size" variable nil (reparse-symbol function_parameters) [14823 14827])
                            ("chars" variable nil (reparse-symbol function_parameters) [14832 14837])
                            ("firstline" variable nil (reparse-symbol function_parameters) [14842 14851]))                          
                        :documentation " Decodes data from the stream self.stream and returns the
            resulting object.

            chars indicates the number of decoded code points or bytes to
            return. read() will never return more data than requested,
            but it might return less, if there is not enough available.

            size indicates the approximate maximum number of decoded
            bytes or code points to read for decoding. The decoder
            can modify this setting as appropriate. The default value
            -1 indicates to read and decode as much as possible.  size
            is intended to prevent having to decode huge files in one
            step.

            If firstline is true, and a UnicodeDecodeError happens
            after the first line terminator in the input only the first line
            will be returned, the rest of the input will be kept until the
            next call to read().

            The method should use a greedy read strategy, meaning that
            it should read as much data as is allowed within the
            definition of the encoding and the given size, e.g.  if
            optional encoding endings or state markers are available
            on the stream, these should be read too.
        ")
                        (reparse-symbol indented_block_body) [14808 18144])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18162 18166])
                            ("size" variable nil (reparse-symbol function_parameters) [18168 18172])
                            ("keepends" variable nil (reparse-symbol function_parameters) [18179 18187]))                          
                        :documentation " Read one line from the input stream and return the
            decoded data.

            size, if given, is passed as size argument to the
            read() method.

        ")
                        (reparse-symbol indented_block_body) [18149 21320])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21339 21343])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [21345 21353])
                            ("keepends" variable nil (reparse-symbol function_parameters) [21360 21368]))                          
                        :documentation " Read all lines available on the input stream
            and return them as a list.

            Line breaks are implemented using the codec's decoder
            method and are included in the list entries.

            sizehint, if given, is ignored since there is no efficient
            way to finding the true end-of-line.

        ")
                        (reparse-symbol indented_block_body) [21325 21799])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21814 21818]))                          
                        :documentation " Resets the codec buffers used for keeping state.

            Note that no stream repositioning should take place.
            This method is primarily intended to be able to recover
            from decoding errors.

        ")
                        (reparse-symbol indented_block_body) [21804 22174])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22188 22192])
                            ("offset" variable nil (reparse-symbol function_parameters) [22194 22200])
                            ("whence" variable nil (reparse-symbol function_parameters) [22202 22208]))                          
                        :documentation " Set the input stream's current position.

            Resets the codec buffers used for keeping state.
        ")
                        (reparse-symbol indented_block_body) [22179 22402])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22420 22424]))                          
                        :documentation " Return the next decoded line from the input stream.")
                        (reparse-symbol indented_block_body) [22407 22595])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22613 22617]))                          )
                        (reparse-symbol indented_block_body) [22600 22640])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22661 22665])
                            ("name" variable nil (reparse-symbol function_parameters) [22667 22671])
                            ("getattr" variable nil (reparse-symbol function_parameters) [22693 22700]))                          
                        :documentation " Inherit all other methods from the underlying stream.
        ")
                        (reparse-symbol indented_block_body) [22645 22832])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22851 22855]))                          )
                        (reparse-symbol indented_block_body) [22837 22878])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22896 22900])
                            ("type" variable nil (reparse-symbol function_parameters) [22902 22906])
                            ("value" variable nil (reparse-symbol function_parameters) [22908 22913])
                            ("tb" variable nil (reparse-symbol function_parameters) [22915 22917]))                          )
                        (reparse-symbol indented_block_body) [22883 22948]))                  
                :type "class")
                nil [13727 22948])
            ("StreamReaderWriter" type
               (:documentation " StreamReaderWriter instances allow wrapping streams which
        work in both read and write modes.

        The design is such that one can use the factory functions
        returned by the codec.lookup() function to construct the
        instance.

    "
                :members 
                  ( ("encoding" variable nil (reparse-symbol indented_block_body) [23310 23330])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\" Creates a StreamReaderWriter instance.

            stream must be a Stream-like object.

            Reader, Writer must be factory functions or classes
            providing the StreamReader, StreamWriter interface resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        \"\"\"" code nil (reparse-symbol indented_block_body) [23406 23750])
                            ("self" variable nil (reparse-symbol indented_block_body) [23759 23779])
                            ("self" variable nil (reparse-symbol indented_block_body) [23788 23824])
                            ("self" variable nil (reparse-symbol indented_block_body) [23833 23869])
                            ("self" variable nil (reparse-symbol indented_block_body) [23878 23898]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23349 23353])
                            ("stream" variable nil (reparse-symbol function_parameters) [23355 23361])
                            ("Reader" variable nil (reparse-symbol function_parameters) [23363 23369])
                            ("Writer" variable nil (reparse-symbol function_parameters) [23371 23377])
                            ("errors" variable nil (reparse-symbol function_parameters) [23379 23385]))                          
                        :documentation " Creates a StreamReaderWriter instance.

            stream must be a Stream-like object.

            Reader, Writer must be factory functions or classes
            providing the StreamReader, StreamWriter interface resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23336 23899])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23913 23917])
                            ("size" variable nil (reparse-symbol function_parameters) [23919 23923]))                          )
                        (reparse-symbol indented_block_body) [23904 23968])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23986 23990])
                            ("size" variable nil (reparse-symbol function_parameters) [23992 23996]))                          )
                        (reparse-symbol indented_block_body) [23973 24047])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24066 24070])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [24072 24080]))                          )
                        (reparse-symbol indented_block_body) [24052 24136])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24154 24158]))                          
                        :documentation " Return the next decoded line from the input stream.")
                        (reparse-symbol indented_block_body) [24141 24262])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24280 24284]))                          )
                        (reparse-symbol indented_block_body) [24267 24307])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24322 24326])
                            ("data" variable nil (reparse-symbol function_parameters) [24328 24332]))                          )
                        (reparse-symbol indented_block_body) [24312 24375])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24395 24399])
                            ("list" variable nil (reparse-symbol function_parameters) [24401 24405]))                          )
                        (reparse-symbol indented_block_body) [24380 24453])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24468 24472]))                          )
                        (reparse-symbol indented_block_body) [24458 24532])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24546 24550])
                            ("offset" variable nil (reparse-symbol function_parameters) [24552 24558])
                            ("whence" variable nil (reparse-symbol function_parameters) [24560 24566]))                          )
                        (reparse-symbol indented_block_body) [24537 24712])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24733 24737])
                            ("name" variable nil (reparse-symbol function_parameters) [24739 24743])
                            ("getattr" variable nil (reparse-symbol function_parameters) [24765 24772]))                          
                        :documentation " Inherit all other methods from the underlying stream.
        ")
                        (reparse-symbol indented_block_body) [24717 24904])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24993 24997]))                          )
                        (reparse-symbol indented_block_body) [24979 25020])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25038 25042])
                            ("type" variable nil (reparse-symbol function_parameters) [25044 25048])
                            ("value" variable nil (reparse-symbol function_parameters) [25050 25055])
                            ("tb" variable nil (reparse-symbol function_parameters) [25057 25059]))                          )
                        (reparse-symbol indented_block_body) [25025 25090]))                  
                :type "class")
                nil [22954 25090])
            ("StreamRecoder" type
               (:documentation " StreamRecoder instances translate data from one encoding to another.

        They use the complete set of APIs returned by the
        codecs.lookup() function to implement their task.

        Data written to the StreamRecoder is first decoded into an
        intermediate format (depending on the \"decode\" codec) and then
        written to the underlying stream using an instance of the provided
        Writer class.

        In the other direction, data is read from the underlying stream using
        a Reader instance and then encoded and returned to the caller.

    "
                :members 
                  ( ("data_encoding" variable nil (reparse-symbol indented_block_body) [25768 25793])
                    ("file_encoding" variable nil (reparse-symbol indented_block_body) [25798 25823])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\" Creates a StreamRecoder instance which implements a two-way
            conversion: encode and decode work on the frontend (the
            data visible to .read() and .write()) while Reader and Writer
            work on the backend (the data in stream).

            You can use these objects to do transparent
            transcodings from e.g. latin-1 to utf-8 and back.

            stream must be a file-like object.

            encode and decode must adhere to the Codec interface; Reader and
            Writer must be factory functions or classes providing the
            StreamReader and StreamWriter interfaces resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        \"\"\"" code nil (reparse-symbol indented_block_body) [25932 26683])
                            ("self" variable nil (reparse-symbol indented_block_body) [26692 26712])
                            ("self" variable nil (reparse-symbol indented_block_body) [26721 26741])
                            ("self" variable nil (reparse-symbol indented_block_body) [26750 26770])
                            ("self" variable nil (reparse-symbol indented_block_body) [26779 26815])
                            ("self" variable nil (reparse-symbol indented_block_body) [26824 26860])
                            ("self" variable nil (reparse-symbol indented_block_body) [26869 26889]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25842 25846])
                            ("stream" variable nil (reparse-symbol function_parameters) [25848 25854])
                            ("encode" variable nil (reparse-symbol function_parameters) [25856 25862])
                            ("decode" variable nil (reparse-symbol function_parameters) [25864 25870])
                            ("Reader" variable nil (reparse-symbol function_parameters) [25872 25878])
                            ("Writer" variable nil (reparse-symbol function_parameters) [25880 25886])
                            ("errors" variable nil (reparse-symbol function_parameters) [25905 25911]))                          
                        :documentation " Creates a StreamRecoder instance which implements a two-way
            conversion: encode and decode work on the frontend (the
            data visible to .read() and .write()) while Reader and Writer
            work on the backend (the data in stream).

            You can use these objects to do transparent
            transcodings from e.g. latin-1 to utf-8 and back.

            stream must be a file-like object.

            encode and decode must adhere to the Codec interface; Reader and
            Writer must be factory functions or classes providing the
            StreamReader and StreamWriter interfaces resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25829 26890])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26904 26908])
                            ("size" variable nil (reparse-symbol function_parameters) [26910 26914]))                          )
                        (reparse-symbol indented_block_body) [26895 27039])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27057 27061])
                            ("size" variable nil (reparse-symbol function_parameters) [27063 27067]))                          )
                        (reparse-symbol indented_block_body) [27044 27283])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27302 27306])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [27308 27316]))                          )
                        (reparse-symbol indented_block_body) [27288 27465])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27483 27487]))                          
                        :documentation " Return the next decoded line from the input stream.")
                        (reparse-symbol indented_block_body) [27470 27671])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27689 27693]))                          )
                        (reparse-symbol indented_block_body) [27676 27716])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27731 27735])
                            ("data" variable nil (reparse-symbol function_parameters) [27737 27741]))                          )
                        (reparse-symbol indented_block_body) [27721 27844])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27864 27868])
                            ("list" variable nil (reparse-symbol function_parameters) [27870 27874]))                          )
                        (reparse-symbol indented_block_body) [27849 28006])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28021 28025]))                          )
                        (reparse-symbol indented_block_body) [28011 28085])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28106 28110])
                            ("name" variable nil (reparse-symbol function_parameters) [28112 28116])
                            ("getattr" variable nil (reparse-symbol function_parameters) [28138 28145]))                          
                        :documentation " Inherit all other methods from the underlying stream.
        ")
                        (reparse-symbol indented_block_body) [28090 28277])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28296 28300]))                          )
                        (reparse-symbol indented_block_body) [28282 28323])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28341 28345])
                            ("type" variable nil (reparse-symbol function_parameters) [28347 28351])
                            ("value" variable nil (reparse-symbol function_parameters) [28353 28358])
                            ("tb" variable nil (reparse-symbol function_parameters) [28360 28362]))                          )
                        (reparse-symbol indented_block_body) [28328 28393]))                  
                :type "class")
                nil [25096 28393])
            ("open" function
               (:documentation " Open an encoded file using the given mode and return
        a wrapped version providing transparent encoding/decoding.

        Note: The wrapped version will only accept the object format
        defined by the codecs, i.e. Unicode objects for most builtin
        codecs. Output is also codec dependent and will usually be
        Unicode as well.

        Underlying encoded files are always opened in binary mode.
        The default file mode is 'r', meaning to open the file in read mode.

        encoding specifies the encoding which is to be used for the
        file.

        errors may be given to define the error handling. It defaults
        to 'strict' which causes ValueErrors to be raised in case an
        encoding error occurs.

        buffering has the same meaning as for the builtin open() API.
        It defaults to line buffered.

        The returned wrapped file object provides an extra attribute
        .encoding which allows querying the used encoding. This
        attribute is only available if an encoding was specified as
        parameter.

    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [28418 28426])
                    ("mode" variable nil (reparse-symbol function_parameters) [28428 28432])
                    ("encoding" variable nil (reparse-symbol function_parameters) [28438 28446])
                    ("errors" variable nil (reparse-symbol function_parameters) [28453 28459])
                    ("buffering" variable nil (reparse-symbol function_parameters) [28470 28479]))                  )
                nil [28409 30013])
            ("EncodedFile" function
               (:documentation " Return a wrapped version of file which provides transparent
        encoding translation.

        Data written to the wrapped file is decoded according
        to the given data_encoding and then encoded to the underlying
        file using file_encoding. The intermediate data type
        will usually be Unicode but depends on the specified codecs.

        Bytes read from the file are decoded using file_encoding and then
        passed back to the caller encoded using data_encoding.

        If file_encoding is not given, it defaults to data_encoding.

        errors may be given to define the error handling. It defaults
        to 'strict' which causes ValueErrors to be raised in case an
        encoding error occurs.

        The returned wrapped file object provides two extra attributes
        .data_encoding and .file_encoding which reflect the given
        parameters of the same name. The attributes can be used for
        introspection by Python programs.

    "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [30030 30034])
                    ("data_encoding" variable nil (reparse-symbol function_parameters) [30036 30049])
                    ("file_encoding" variable nil (reparse-symbol function_parameters) [30051 30064])
                    ("errors" variable nil (reparse-symbol function_parameters) [30071 30077]))                  )
                nil [30014 31510])
            ("getencoder" function
               (:documentation " Lookup up the codec for the given encoding and return
        its encoder function.

        Raises a LookupError in case the encoding cannot be found.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [31556 31564]))                  )
                nil [31541 31772])
            ("getdecoder" function
               (:documentation " Lookup up the codec for the given encoding and return
        its decoder function.

        Raises a LookupError in case the encoding cannot be found.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [31788 31796]))                  )
                nil [31773 32004])
            ("getincrementalencoder" function
               (:documentation " Lookup up the codec for the given encoding and return
        its IncrementalEncoder class or factory function.

        Raises a LookupError in case the encoding cannot be found
        or the codecs doesn't provide an incremental encoder.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [32031 32039]))                  )
                nil [32005 32430])
            ("getincrementaldecoder" function
               (:documentation " Lookup up the codec for the given encoding and return
        its IncrementalDecoder class or factory function.

        Raises a LookupError in case the encoding cannot be found
        or the codecs doesn't provide an incremental decoder.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [32457 32465]))                  )
                nil [32431 32856])
            ("getreader" function
               (:documentation " Lookup up the codec for the given encoding and return
        its StreamReader class or factory function.

        Raises a LookupError in case the encoding cannot be found.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [32871 32879]))                  )
                nil [32857 33115])
            ("getwriter" function
               (:documentation " Lookup up the codec for the given encoding and return
        its StreamWriter class or factory function.

        Raises a LookupError in case the encoding cannot be found.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [33130 33138]))                  )
                nil [33116 33374])
            ("iterencode" function
               (:documentation "
    Encoding iterator.

    Encodes the input strings from the iterator using an IncrementalEncoder.

    errors and kwargs are passed through to the IncrementalEncoder
    constructor.
    "
                :arguments 
                  ( ("iterator" variable nil (reparse-symbol function_parameters) [33390 33398])
                    ("encoding" variable nil (reparse-symbol function_parameters) [33400 33408])
                    ("errors" variable nil (reparse-symbol function_parameters) [33410 33416])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [33427 33435]))                  )
                nil [33375 33888])
            ("iterdecode" function
               (:documentation "
    Decoding iterator.

    Decodes the input strings from the iterator using an IncrementalDecoder.

    errors and kwargs are passed through to the IncrementalDecoder
    constructor.
    "
                :arguments 
                  ( ("iterator" variable nil (reparse-symbol function_parameters) [33904 33912])
                    ("encoding" variable nil (reparse-symbol function_parameters) [33914 33922])
                    ("errors" variable nil (reparse-symbol function_parameters) [33924 33930])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [33941 33949]))                  )
                nil [33889 34403])
            ("make_identity_dict" function
               (:documentation " make_identity_dict(rng) -> dict

        Return a dictionary where elements of the rng sequence are
        mapped to themselves.

    "
                :arguments 
                  ( ("rng" variable nil (reparse-symbol function_parameters) [34465 34468]))                  )
                nil [34442 34649])
            ("make_encoding_map" function
               (:documentation " Creates an encoding map from a decoding map.

        If a target mapping in the decoding map occurs multiple
        times, then that target is mapped to None (undefined mapping),
        causing an exception when encountered by the charmap codec
        during translation.

        One example where this happens is cp875.py which decodes
        multiple character to \\\\u001a.

    "
                :arguments 
                  ( ("decoding_map" variable nil (reparse-symbol function_parameters) [34672 34684]))                  )
                nil [34650 35229])
            ("try" code nil nil [35250 35831])
            ("_false" variable nil nil [35909 35919])
            ("if" code nil nil [35920 35952])
            ("if" code nil nil [35964 36232]))          
      :file "codecs.py"
      :pointmax 36232
      :fsize 36231
      :lastmodtime '(22333 27206 230105 883000)
      :unmatched-syntax '((INDENT_BLOCK 17190 . 17513) (NEWLINE 17189 . 17190) (COLON 17188 . 17189) (TRY 17067 . 17070) (AS 17182 . 17184) (MULT 2742 . 2743) (COMMA 2743 . 2744) (INDENT_BLOCK 301 . 370) (COLON 299 . 300) (TRY 243 . 246) (AS 293 . 295)))
    (semanticdb-table "genericpath.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
Path operations common to more than one OS
Do not use directly.  The OS specific modules import the appropriate
functions from this module themselves.
\"\"\"" code nil nil [1 159])
            ("os" include nil nil [160 169])
            ("stat" include nil nil [170 181])
            ("__all__" variable nil nil [183 347])
            ("exists" function
               (:documentation "Test whether a path exists.  Returns False for broken symbolic links"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [456 460]))                  )
                nil [445 630])
            ("isfile" function
               (:documentation "Test whether a path is a regular file"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [768 772]))                  )
                nil [757 936])
            ("isdir" function
               (:documentation "Return true if the pathname refers to an existing directory."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1098 1099]))                  )
                nil [1088 1283])
            ("getsize" function
               (:documentation "Return the size of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1297 1305]))                  )
                nil [1285 1405])
            ("getmtime" function
               (:documentation "Return the last modification time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1420 1428]))                  )
                nil [1407 1547])
            ("getatime" function
               (:documentation "Return the last access time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1562 1570]))                  )
                nil [1549 1683])
            ("getctime" function
               (:documentation "Return the metadata change time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1698 1706]))                  )
                nil [1685 1823])
            ("commonprefix" function (:arguments 
              ( ("m" variable nil (reparse-symbol function_parameters) [1892 1893]))              ) nil [1875 2124])
            ("samestat" function
               (:documentation "Test whether two stat buffers reference the same file"
                :arguments 
                  ( ("s1" variable nil (reparse-symbol function_parameters) [2226 2228])
                    ("s2" variable nil (reparse-symbol function_parameters) [2230 2232]))                  )
                nil [2213 2374])
            ("samefile" function
               (:documentation "Test whether two pathnames reference the same actual file"
                :arguments 
                  ( ("f1" variable nil (reparse-symbol function_parameters) [2443 2445])
                    ("f2" variable nil (reparse-symbol function_parameters) [2447 2449]))                  )
                nil [2430 2590])
            ("sameopenfile" function
               (:documentation "Test whether two open file objects reference the same file"
                :arguments 
                  ( ("fp1" variable nil (reparse-symbol function_parameters) [2710 2713])
                    ("fp2" variable nil (reparse-symbol function_parameters) [2715 2718]))                  )
                nil [2693 2864])
            ("_splitext" function
               (:documentation "Split the extension from a pathname.

    Extension is everything from the last dot to the end, ignoring
    leading dots.  Returns \"(root, ext)\"; ext may be empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3165 3166])
                    ("sep" variable nil (reparse-symbol function_parameters) [3168 3171])
                    ("altsep" variable nil (reparse-symbol function_parameters) [3173 3179])
                    ("extsep" variable nil (reparse-symbol function_parameters) [3181 3187]))                  )
                nil [3151 3883])
            ("_check_arg_types" function (:arguments 
              ( ("funcname" variable nil (reparse-symbol function_parameters) [3905 3913])
                ("args" variable nil (reparse-symbol function_parameters) [3915 3920]))              ) nil [3884 4365]))          
      :file "genericpath.py"
      :pointmax 4365
      :fsize 4364
      :lastmodtime '(22333 27206 278105 882000)
      :unmatched-syntax '((RAISE 4289 . 4294) (FROM 4355 . 4359) (NEWLINE 4364 . 4365) (RAISE 4118 . 4123) (FROM 4243 . 4247) (NEWLINE 4252 . 4253)))
    (semanticdb-table "struct.py"
      :major-mode 'python-mode
      :tags 
        '( ("__all__" variable nil nil [1 174])
            ("_struct" include nil nil [176 197])
            ("_struct" include nil nil [198 229])
            ("_struct" include nil nil [230 257]))          
      :file "struct.py"
      :pointmax 258
      :fsize 257
      :lastmodtime '(22333 27206 426105 880000)
      :unmatched-syntax nil)
    (semanticdb-table "locale.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\" Locale support.

    The module provides low-level access to the C lib's locale APIs
    and adds high level number formatting APIs as well as a locale
    aliasing engine to complement these.

    The aliasing engine includes support for many commonly used locale
    names and maps them to values suitable for passing to the C lib's
    setlocale() function. It also includes default encodings for all
    supported locale names.

\"\"\"" code nil nil [1 441])
            ("sys" include nil nil [443 453])
            ("encodings" include nil nil [454 470])
            ("encodings.aliases" include nil nil [471 495])
            ("re" include nil nil [496 505])
            ("collections" include nil nil [506 524])
            ("builtins" include nil nil [525 565])
            ("functools" include nil nil [566 582])
            ("__all__" variable nil nil [831 1178])
            ("_strcoll" function
               (:documentation " strcoll(string,string) -> int.
        Compares two strings according to the locale.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1193 1194])
                    ("b" variable nil (reparse-symbol function_parameters) [1195 1196]))                  )
                nil [1180 1329])
            ("_strxfrm" function
               (:documentation " strxfrm(string) -> string.
        Returns a string that behaves for cmp locale-aware.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1343 1344]))                  )
                nil [1330 1463])
            ("try" code nil nil [1464 2853])
            ("if" code nil nil [2919 2973])
            ("if" code nil nil [2973 3027])
            ("_localeconv" variable nil nil [3029 3053])
            ("_override_localeconv" variable nil nil [3170 3195])
            ("" code nil nil [3213 3226])
            ("localeconv" function nil nil [3227 3348])
            ("_grouping_intervals" function (:arguments 
              ( ("grouping" variable nil (reparse-symbol function_parameters) [3492 3500]))              ) nil [3468 3928])
            ("_group" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [3981 3982])
                ("monetary" variable nil (reparse-symbol function_parameters) [3984 3992]))              ) nil [3970 4870])
            ("_strip_padding" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [4953 4954])
                ("amount" variable nil (reparse-symbol function_parameters) [4956 4962]))              ) nil [4934 5176])
            ("_percent_re" variable nil nil [5177 5306])
            ("format" function
               (:documentation "Returns the locale-aware substitution of a %? specifier
    (percent).

    additional is for format strings which contain one or more
    '*' modifiers."
                :arguments 
                  ( ("percent" variable nil (reparse-symbol function_parameters) [5319 5326])
                    ("value" variable nil (reparse-symbol function_parameters) [5328 5333])
                    ("grouping" variable nil (reparse-symbol function_parameters) [5335 5343])
                    ("monetary" variable nil (reparse-symbol function_parameters) [5351 5359])
                    ("additional" variable nil (reparse-symbol function_parameters) [5367 5378]))                  )
                nil [5308 5934])
            ("_format" function (:arguments 
              ( ("percent" variable nil (reparse-symbol function_parameters) [5947 5954])
                ("value" variable nil (reparse-symbol function_parameters) [5956 5961])
                ("grouping" variable nil (reparse-symbol function_parameters) [5963 5971])
                ("monetary" variable nil (reparse-symbol function_parameters) [5979 5987])
                ("additional" variable nil (reparse-symbol function_parameters) [5995 6006]))              ) nil [5935 6836])
            ("format_string" function
               (:documentation "Formats a string in the same way that the % formatting would use,
    but takes the current locale into account.
    Grouping is applied if the third parameter is true."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [6855 6856])
                    ("val" variable nil (reparse-symbol function_parameters) [6858 6861])
                    ("grouping" variable nil (reparse-symbol function_parameters) [6863 6871]))                  )
                nil [6837 8034])
            ("currency" function
               (:documentation "Formats val according to the currency settings
    in the current locale."
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [8048 8051])
                    ("symbol" variable nil (reparse-symbol function_parameters) [8053 8059])
                    ("grouping" variable nil (reparse-symbol function_parameters) [8066 8074])
                    ("international" variable nil (reparse-symbol function_parameters) [8082 8095]))                  )
                nil [8035 9561])
            ("str" function
               (:documentation "Convert float to integer, taking the locale into account."
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [9570 9573]))                  )
                nil [9562 9676])
            ("delocalize" function (:arguments 
              ( ("string" variable nil (reparse-symbol function_parameters) [9692 9698]))              ) nil [9677 10063])
            ("atof" function (:arguments 
              ( ("string" variable nil (reparse-symbol function_parameters) [10073 10079])
                ("func" variable nil (reparse-symbol function_parameters) [10081 10085]))              ) nil [10064 10197])
            ("atoi" function (:arguments 
              ( ("string" variable nil (reparse-symbol function_parameters) [10207 10213]))              ) nil [10198 10323])
            ("_test" function nil nil [10324 10519])
            ("_setlocale" variable nil nil [10733 10755])
            ("_replace_encoding" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [10779 10783])
                ("encoding" variable nil (reparse-symbol function_parameters) [10785 10793]))              ) nil [10757 11738])
            ("_append_modifier" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [11760 11764])
                ("modifier" variable nil (reparse-symbol function_parameters) [11766 11774]))              ) nil [11739 12115])
            ("normalize" function
               (:documentation " Returns a normalized locale code for the given locale
        name.

        The returned locale code is formatted for use with
        setlocale().

        If normalization fails, the original name is returned
        unchanged.

        If the given encoding is not known, the function defaults to
        the default encoding for the locale code just like setlocale()
        does.

    "
                :arguments 
                  ( ("localename" variable nil (reparse-symbol function_parameters) [12130 12140]))                  )
                nil [12116 15008])
            ("_parse_localename" function
               (:documentation " Parses the locale code for localename and returns the
        result as tuple (language code, encoding).

        The localename is normalized and passed through the locale
        alias engine. A ValueError is raised in case the locale name
        cannot be parsed.

        The language code corresponds to RFC 1766.  code and encoding
        can be None in case the values cannot be determined or are
        unknown to this implementation.

    "
                :arguments 
                  ( ("localename" variable nil (reparse-symbol function_parameters) [15031 15041]))                  )
                nil [15009 16085])
            ("_build_localename" function
               (:documentation " Builds a locale code from the given tuple (language code,
        encoding).

        No aliasing or normalizing takes place.

    "
                :arguments 
                  ( ("localetuple" variable nil (reparse-symbol function_parameters) [16108 16119]))                  )
                nil [16086 16641])
            ("getdefaultlocale" function
               (:documentation " Tries to determine the default locale settings and returns
        them as tuple (language code, encoding).

        According to POSIX, a program which has not called
        setlocale(LC_ALL, \"\") runs using the portable 'C' locale.
        Calling setlocale(LC_ALL, \"\") lets it use the default locale as
        defined by the LANG variable. Since we don't want to interfere
        with the current locale setting we thus emulate the behavior
        in the way described above.

        To maintain compatibility with other platforms, not only the
        LANG variable is tested, but a list of variables given as
        envvars parameter. The first found to be defined will be
        used. envvars defaults to the search path used in GNU gettext;
        it must always contain the variable name 'LANG'.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    "
                :arguments 
                  ( ("envvars" variable nil (reparse-symbol function_parameters) [16663 16670]))                  )
                nil [16642 18627])
            ("getlocale" function
               (:documentation " Returns the current setting for the given locale category as
        tuple (language code, encoding).

        category may be one of the LC_* value except LC_ALL. It
        defaults to LC_CTYPE.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [18643 18651]))                  )
                nil [18629 19231])
            ("setlocale" function
               (:documentation " Set the locale for the given category.  The locale can be
        a string, an iterable of two strings (language code and encoding),
        or None.

        Iterables are converted to strings using the locale aliasing
        engine.  Locale strings are passed directly to the C lib.

        category may be given as one of the LC_* values.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [19246 19254])
                    ("locale" variable nil (reparse-symbol function_parameters) [19256 19262]))                  )
                nil [19232 19810])
            ("resetlocale" function
               (:documentation " Sets the locale for category to the default setting.

        The default setting is determined by calling
        getdefaultlocale(). category defaults to LC_ALL.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [19827 19835]))                  )
                nil [19811 20091])
            ("if" code nil nil [20092 21462])
            ("locale_encoding_alias" variable nil nil [22023 24367])
            ("for" code nil nil [24369 24490])
            ("locale_alias" variable nil nil [30153 64130])
            ("windows_locale" variable nil nil [64604 72764])
            ("_print_locale" function (:documentation " Test function.
    ") nil [72766 74488])
            ("try" code nil nil [74494 74582])
            ("if" code nil nil [74583 74738]))          
      :file "locale.py"
      :pointmax 74738
      :fsize 74737
      :lastmodtime '(22333 27206 306105 882000)
      :unmatched-syntax nil))
  :file "!home!mono!.pyenv!versions!3.5.1!lib!python3.5!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
