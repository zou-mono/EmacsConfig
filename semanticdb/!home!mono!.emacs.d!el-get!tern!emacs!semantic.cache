;; Object emacs/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "emacs/"
  :tables
  (list
    (semanticdb-table "tern.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [230 247])
            ("json" include nil nil [248 263])
            ("url" include nil nil [264 278])
            ("url-http" include nil nil [279 298])
            ("tern-known-port" variable nil nil [300 328])
            ("tern-server" variable nil nil [329 353])
            ("tern-explicit-port" variable nil nil [354 385])
            ("tern-project-dir" variable nil nil [386 415])
            ("tern-message" function (:arguments ("fmt" "objects")) nil [417 488])
            ("tern-req" function (:arguments ("port" "doc" "c")) nil [490 968])
            ("tern-req-finished" function (:arguments ("c")) nil [970 1773])
            ("tern-project-dir" function nil nil [1775 2371])
            ("tern-find-server" function (:arguments ("c" "ignore-port")) nil [2373 3312])
            ("tern-command" variable (:default-value (let* ((script-file (or load-file-name (and (boundp (quote bytecomp-filename)) bytecomp-filename) buffer-file-name)) (bin-file (expand-file-name "../bin/tern" (file-name-directory (file-truename script-file))))) (if (file-exists-p bin-file) (if (eq system-type (quote windows-nt)) (list "node" bin-file) (list bin-file)) (list "tern")))) nil [3314 3858])
            ("tern-start-server" function (:arguments ("c")) nil [3860 5555])
            ("tern-command-generation" variable nil nil [5557 5591])
            ("tern-activity-since-command" variable (:default-value -1) nil [5592 5631])
            ("tern-last-point-pos" variable nil nil [5632 5664])
            ("tern-last-completions" variable nil nil [5666 5700])
            ("tern-last-argument-hints" variable nil nil [5701 5738])
            ("tern-buffer-is-dirty" variable nil nil [5739 5772])
            ("tern-project-relative-file" function nil nil [5774 5920])
            ("tern-get-partial-file" function (:arguments ("at")) nil [5922 6887])
            ("tern-modified-sibling-buffers" function nil nil [6889 7429])
            ("tern-run-request" function (:arguments ("f" "doc")) nil [7431 8546])
            ("tern-run-query" function (:arguments ("f" "query" "pos" "mode")) nil [8548 10012])
            ("tern-send-buffer-to-server" function nil nil [10014 10314])
            ("tern-completion-at-point-fn" function nil nil [10331 10463])
            ("tern-completion-at-point" function nil nil [10465 10726])
            ("tern-do-complete" function (:arguments ("data")) nil [10728 11124])
            ("tern-completion-matches-last" function nil nil [11126 11955])
            ("tern-update-argument-hints-timer" variable (:default-value 500) nil [11976 12036])
            ("tern-update-argument-hints-async" variable nil nil [12038 12161])
            ("tern-update-argument-hints-async" function nil nil [12163 12637])
            ("tern-update-argument-hints" function nil nil [12639 13381])
            ("tern-skip-matching-brackets" function (:arguments ("end-chars")) nil [13383 13908])
            ("tern-parse-function-type" function (:arguments ("data")) nil [13910 14902])
            ("tern-find-current-arg" function (:arguments ("start")) nil [14904 15353])
            ("tern-show-argument-hints" function nil nil [15355 16330])
            ("tern-do-refactor" function (:arguments ("data")) nil [16352 17363])
            ("tern-rename-variable" function (:arguments ("new-name")) nil [17365 17543])
            ("tern-flash-timeout" variable (:default-value 0.5) nil [17579 17659])
            ("tern-flash-region" function (:arguments ("start" "end")) nil [17661 17906])
            ("tern-do-highlight" function (:arguments ("data")) nil [17908 18294])
            ("tern-highlight-refs" function nil nil [18296 18396])
            ("tern-find-definition-stack" variable nil nil [18421 18459])
            ("tern-show-definition" function (:arguments ("data")) nil [18461 19103])
            ("tern-at-interesting-expression" function nil nil [19105 19454])
            ("tern-find-definition" function (:arguments ("prompt-var")) nil [19456 19777])
            ("tern-find-definition-by-name" function nil nil [19779 19861])
            ("tern-find-position" function (:arguments ("file" "data")) nil [19863 20749])
            ("tern-pop-find-definition" function nil nil [20751 20949])
            ("tern-go-to-position" function (:arguments ("file" "pos")) nil [20951 21081])
            ("tern-get-type" function nil nil [21098 21280])
            ("tern-last-docs-url" variable nil nil [21299 21330])
            ("tern-get-docs" function nil nil [21331 22010])
            ("tern-use-server" function (:arguments ("port" "server")) nil [22053 22268])
            ("tern-after-change" function (:arguments ("start" "end" "prev-length")) nil [22288 22845])
            ("tern-idle-time" variable (:default-value 2.5) nil [22847 22963])
            ("tern-idle-timer" variable nil nil [22964 23044])
            ("tern-reparse-on-idle" function nil nil [23045 23596])
            ("tern-post-command" function nil nil [23598 23811])
            ("tern-left-buffer" function nil nil [23813 24033])
            ("tern-mode-keymap" variable (:default-value (make-sparse-keymap)) nil [24035 24081])
            ("define-key" code nil nil [24082 24145])
            ("define-key" code nil nil [24146 24225])
            ("define-key" code nil nil [24226 24293])
            ("define-key" code nil nil [24294 24373])
            ("define-key" code nil nil [24374 24446])
            ("define-key" code nil nil [24447 24519])
            ("define-minor-mode" code nil nil [24536 24711])
            ("tern-mode-enable" function nil nil [24713 25696])
            ("tern-mode-disable" function nil nil [25698 26116])
            ("tern" package nil nil [26118 26133]))          
      :file "tern.el"
      :pointmax 26157
      :fsize 26156
      :lastmodtime '(22408 37006 550504 518000)
      :unmatched-syntax nil))
  :file "!home!mono!.emacs.d!el-get!tern!emacs!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
