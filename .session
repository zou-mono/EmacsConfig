;;; Automatically generated on Fri Jul  8 17:29:37 2016
;;; Invoked by mono@mono-vm using 24.5.1
(setq-default kill-ring '("(dolist (charset '(kana han symbol cjk-misc bopomofo))" #("WenQuanYi Micro Hei Mono" 0 24 (fontified t)) "(set-fontset-font (frame-parameter nil 'font)
                  'han (font-spec :family \"Microsoft Yahei\"
                                  :size 12))" "user-error: The mode `Fundamental' does not support Imenu"))
(setq-default session-file-alist '(("~/.emacs.d/lisp/init-base.el" 811 131 1 nil nil 1006 (overwrite-mode)) ("~/Documents/org-mode-test/test1.org" 273 170 1 nil nil 273 (overwrite-mode)) ("~/Documents/tex_projects/beamer_test/bt.tex" 7782 7832 1 nil nil 1592 (overwrite-mode)) ("~/.emacs.d/lisp/init-tex.el" 141 186 1 nil nil 141 (overwrite-mode)) ("~/Documents/tex_projects/201607_\345\271\264\344\270\255\346\261\207\346\212\245/slide.tex" 22186 22251 1 nil nil 22182 (overwrite-mode)) ("~/Documents/tex_projects/oldslide.tex" 12343 31267 1 nil nil 17560 (overwrite-mode)) ("~/Documents/tex_projects/aalborg_v1.4.0/aalborgtheme.tex" 18386 18353 1 nil nil 2927 (overwrite-mode)) ("~/Documents/tex_projects/201607_\345\271\264\344\270\255\346\261\207\346\212\245/slide.log" 119152 nil 1 nil nil 119152 (overwrite-mode)) ("~/Documents/blog/test/themes/next/_config.yml" 8588 7730 1 nil nil 8131 (overwrite-mode)) ("~/Documents/blog/test/source/_posts/20160622_vmware_shared_folder.org" 1866 1668 1 nil nil 1665 (overwrite-mode)) ("~/Documents/blog/test/source/_drafts/20160622_vmware_shared_folder.org" 1608 1576 1 nil nil 1608 (overwrite-mode)) ("~/Documents/blog/test/source/_posts/20160616_emacs_common_short.org" 740 951 1 nil nil 939 (overwrite-mode)) ("~/Documents/blog/test/public/index.html" 389 389 1 nil nil 6874 (overwrite-mode)) ("~/Documents/org-mode-test/test2.org" 38353 37620 1 nil nil 1289 (overwrite-mode)) ("~/Documents/blog/test/source/_posts/hello-world.md" 758 758 1 nil nil 392 (overwrite-mode)) ("~/.emacs.d/lisp/init-org.el" 1625 3251 1 nil nil 3335 (overwrite-mode)) ("~/.emacs" 28 342 1 nil nil 273 (overwrite-mode)) ("/usr/local/share/emacs/24.5/lisp/textmodes/flyspell.el.gz" 97897 97897 1 nil nil 97897 (overwrite-mode)) ("~/Documents/tex_projects/test/111.tex" 3830 503 1 nil nil 707 (overwrite-mode)) ("~/.emacs.d/init.el" 2981 2464 1 nil nil 2981 (overwrite-mode)) ("~/Documents/tex_projects/beamer_test/bt.log" 9 9 1 nil nil 103831 (overwrite-mode)) ("~/.emacs.d/lisp/init-web.el" 714 637 1 nil nil 694 (overwrite-mode)) ("~/.emacs.d/el-get/.loaddefs.el" 191403 nil 1 nil nil 107404 (overwrite-mode)) ("~/.emacs.d/elpa/nvm-20151113.55/nvm-autoloads.el" 220 nil 1 nil nil 220 (overwrite-mode)) ("~/.emacs.d/elpa/f-20160426.527/f-autoloads.el" 216 nil 1 nil nil 216 (overwrite-mode)) ("~/.emacs.d/elpa/s-20160508.2357/s-autoloads.el" 215 nil 1 nil nil 215 (overwrite-mode)) ("~/.emacs.d/elpa/dash-functional-20160615.1351/dash-functional-autoloads.el" 251 nil 1 nil nil 251 (overwrite-mode)) ("~/.emacs.d/elpa/dash-20160619.611/dash-autoloads.el" 222 nil 1 nil nil 222 (overwrite-mode)) ("~/Documents/blog/test/source/_posts/test2.org" 212 212 1 nil nil 212 (overwrite-mode)) ("~/Documents/blog/test/source/_posts/ 20160616_emacs_common_shortcut1.org" 298 219 1 nil nil 297 (overwrite-mode)) ("~/Documents/blog/test/source/_posts/20160616_emacs_common_shortcut" 102 234 1 nil nil 102 (overwrite-mode)) ("~/Documents/python_test/scrapy_test.py" 236 88 1 nil nil 143 (overwrite-mode)) ("~/Documents/blog/test/source/_posts/test.org" 152 209 1 nil nil 210 (overwrite-mode)) ("~/Documents/org-mode-test/test1.html" 226 12345 1 nil nil 12084 (overwrite-mode)) ("~/Documents/org-mode-test/index.org" 199 nil 1 nil nil 199 (overwrite-mode)) ("~/Documents/org-mode-test/sitemap.org" 149 nil 1 nil nil 149 (overwrite-mode)) ("~/.emacs.d/el-get/org-mode/lisp/org-loaddefs.el" 104963 nil 1 nil nil 104963 (overwrite-mode)) ("~/.emacs.d/el-get/org-mode/contrib/lisp/org-loaddefs.el" 1949 1949 1 nil nil 2130 (overwrite-mode)) ("~/.emacs.d/elpa/org-20160606/org-loaddefs.el" 88290 nil 1 nil nil 88290 (overwrite-mode)) ("~/.emacs.d/elpa/org-20160606/org-autoloads.el" 26866 nil 1 nil nil 26866 (overwrite-mode)) ("~/Documents/blog/test/source/_posts/emacs\345\270\270\347\224\250\345\277\253\346\215\267\351\224\256_20160608.org" 232 227 1 nil nil 232 (overwrite-mode)) ("~/Documents/js_projects/index.html" 326 317 1 nil nil 41 (overwrite-mode)) ("~/.emacs.d/el-get/web-mode/web-mode.el" 87602 87540 1 nil nil 239338 (overwrite-mode)) ("~/Documents/js_projects/test.js" 123 123 1 nil nil 42 (overwrite-mode)) ("~/.emacs.d/lisp/init-cedet.el" 1057 814 1 nil nil 858 (overwrite-mode)) ("~/Documents/python_test/1.py" 28 114 1 nil nil 121 (overwrite-mode)) ("~/.emacs.d/lisp/init-Python.el" 374 374 1 nil nil 374 (overwrite-mode)) ("~/Documents/python_test/test.py" 215 2450 1 nil nil 215 (overwrite-mode)) ("~/.emacs.d/lisp/init-js.el" 148 148 1 nil nil 148 (overwrite-mode)) ("~/Documents/blog/test/source/_posts/test_article.org" 398 374 1 nil nil 409 (overwrite-mode)) ("~/.emacs.d/elpa/pyenv-mode-20160221.1123/pyenv-mode-autoloads.el" 921 nil 1 nil nil 921 (overwrite-mode)) ("~/.emacs.d/elpa/pythonic-20160221.1123/pythonic-autoloads.el" 482 nil 1 nil nil 482 (overwrite-mode)) ("~/.emacs.d/elpa/dash-20160510.1127/dash-autoloads.el" 222 nil 1 nil nil 222 (overwrite-mode)) ("~/.emacs.d/lisp/init-R.el" 47 427 1 nil nil 47 (overwrite-mode)) ("~/.emacs.d/lisp/gtags.el" 7012 6799 1 nil nil 7041 (overwrite-mode)) ("~/.emacs.d/ede-projects.el" 86 nil 1 nil nil 86 (overwrite-mode)) ("~/Documents/python_test/1.pY" 53 47 1 nil nil 64 (overwrite-mode)) ("~/.emacs.d/el-get/cedet/lisp/cedet/semantic/mru-bookmark.el" 9410 7975 1 nil nil 12968 (overwrite-mode)) ("~/.emacs.d/el-get/window-purpose/window-purpose-core.el" 12216 12668 1 nil nil 12216 (overwrite-mode)) ("~/.emacs.d/el-get/window-purpose/window-purpose.el" 10064 8791 1 nil nil 10061 (overwrite-mode)) ("/usr/local/share/emacs/24.5/lisp/cedet/semantic/mru-bookmark.el.gz" 9452 12980 1 nil nil 12980 (overwrite-mode)) ("~/.emacs.d/elpa/dracula-theme-20160228.1913/dracula-theme-autoloads.el" 426 nil 1 nil nil 426 (overwrite-mode)) ("~/.IPython/ipy_user_conf.py" 311 1 1 nil nil 378 (overwrite-mode)) ("~/.emacs.d/init-tabbar.el" 1711 1636 1 nil nil 1683 (overwrite-mode)) ("~/.emacs.d/init-base.el" 589 828 1 nil nil 1041 (overwrite-mode))))
(setq-default file-name-history '("~/Documents/tex_projects/201607_年中汇报/slide.log" "~/Documents/org-mode-test/test1.html" "~/Documents/python_test/1.py" "~/Documents/js_projects/index.html" "~/Documents/blog/test/public/css/main.css" "~/Documents/python_test/scrapy_test.py" "~/Documents/blog/test/public/index.html" "~/.emacs.d/lisp/init-Python.el" "~/Documents/blog/test/source/_drafts/20160622_vmware_shared_folder.org" "~/Documents/blog/test/themes/next/_config.yml" "~/Documents/tex_projects/oldslide.tex" "~/Documents/tex_projects/201607_年中汇报/slide.tex" "~/Documents/python_test/test.py" "~/.emacs.d/lisp/init-web.el" "~/.emacs.d/lisp/init-org.el" "~/.emacs.d/lisp/init-tex.el" "~/Documents/blog/test/source/_posts/20160616_emacs_common_short.org" "~/Documents/blog/test/source/_posts/20160622_vmware_shared_folder.org" "~/Documents/org-mode-test/test1.org" "~/.emacs" "~/.emacs.d/init.el" "~/Documents/tex_projects/beamer_test/bt.tex" "~/.emacs.d/lisp/init-cedet.el" "~/.emacs.d/lisp/init-base.el" "~/.emacs.d/ede-projects.el" "~/Documents/org-mode-test/test2.org" "~/Documents/tex_projects/aalborg_v1.4.0/aalborgtheme.tex" "~/Documents/tex_projects/201607_年中汇报/_region_.tex" "~/Documents/tex_projects/" "~/Documents/tex_projects/beamer_test/" "~/Documents/tex_projects/test/111.tex" "~/Documents/blog/test/source/_posts/hello-world.md" "~/Documents/blog/test/" "~/Documents/blog/test/source/_posts/" "~/Documents/blog"))
(setq-default search-ring '("search" "scale" "font" "include" "right" "enumerate" "enmereate" "tabincell" "text" "table" "c-u" "换" "nth" "ntheorem" "definition" "amsthm"))
(setq-default regexp-search-ring '("\\<org\\>" "\\<\\>" "\\wel\\w" "\\<el\\>" "\\'el\\'" "\\bwindows\\b" "pyenv" "\\<ess\\>" "<ess>" "\\<ess\343\200\201\343\200\213"))
(setq-default Info-isearch-initial-history '(("/usr/local/share/info/emacs" "Windows Fonts" 1766015) ("/usr/local/share/info/emacs" "Named ASCII Chars" 1506366) ("/usr/local/share/info/emacs" "Keymaps" 1489047) ("/usr/local/share/info/emacs" "Terminal emulator" 1360874) ("/usr/local/share/info/emacs" "Revision Tags" 1006249) ("/usr/local/share/info/emacs" "VC Delete/Rename" 1005584) ("/usr/local/share/info/emacs" "Change Logs and VC" 1002687) ("/usr/local/share/info/emacs" "VC With A Merging VCS" 961957) ("/usr/local/share/info/emacs" "Basic VC Editing" 960282) ("/usr/local/share/info/emacs" "ForIndent Vars" 871617) ("/usr/local/share/info/emacs" "Fortran" 860048) ("/usr/local/share/info/emacs" "Scrolling" 246643) ("/usr/local/share/info/emacs" "Top" 1138) ("dir" "Top" 853)))
(setq-default Info-search-history '("modern" "morden" "support" "function"))
(setq-default TeX-command-history '("LaTeX"))
(setq-default coding-system-history '("nil"))
(setq-default command-history '((info-apropos "key") (info-apropos "modern") (occur "modern" nil) (Info-search "") (kill-buffer "*Help*") (kill-buffer "*helm-mode-kill-buffer*") (kill-buffer "*Apropos*") (kill-buffer "*info*") (apropos (quote ...) nil) (Info-search "modern") (Info-search "morden") (Info-index "modern") (Info-index "global keymap") (Info-index "text-scale-mode") (describe-key [24 67108909] 1 nil) (org-indent-mode (quote toggle)) (kill-buffer "main.css") (kill-buffer "index.html") (kill-buffer "index.html<public>") (kill-buffer "test1.html") (kill-buffer "bt.tex") (kill-buffer "slide.tex") (kill-buffer "oldslide.tex") (kill-buffer "test2.org") (color-theme-deep-blue) (kill-buffer "aalborgtheme.tex") (kill-buffer "slide.log")))
(setq-default ede-proj-target-history '("program"))
(setq-default extended-command-history '("info-apropos" "occur" "apropos" "org-indent-mode" "describe-font" "color-theme-deep-blue"))
(setq-default ggtags-global-search-history '(("319745bba7814c7707921f9a1f683413fa61d8ef" "myFunction" "/home/mono/Documents/js_projects/" nil 5 "test.js:3:function myFunction(x,y) ") ("1d450e69d2f4cc1dd9d5d211ebb8ffb138ef5c86" "--from-here=5:test.js result" "/home/mono/Documents/js_projects/" nil 5 "test.js:1:var result;") ("7d294b257320691d4be38fc1bda22e4db4f3baa9" "--reference parrot" "/home/mono/Documents/python_test/" nil 5 "1.py:7:parrot()") ("3c8da62c552666462c4b2d723d8478a845bb1b70" "--reference print_test2" "/home/mono/Documents/python_test/" nil 5 "1.py:10:print_test2()") ("6ab5c9510f5f2e9e1317afc172e0073bee579df0" "--reference print_test" "/home/mono/Documents/python_test/" nil 5 "1.py:9:print_test()") ("2c9b8d8b7138e82270c40e549298898b55ce14a4" "--from-here=9:1.py print_test" "/home/mono/Documents/python_test/" nil 5 "test.py:42:def print_test():") ("984a453808b1b74ba57c368fae5e551bca458b86" "--reference parent" "/home/mono/Documents/python_test/" nil 5 "test.py:122:class child(parent):") ("33ab28936bb8fd731bb15ec96ddddc014595be16" "--reference pprt" "/home/mono/Documents/python_test/" nil 5 "test.py:128:c.pprt()") ("22a15e78d8a7d900c33a4fd4ff448b38ecc4d8f9" "--from-here=94:test.py get" "/home/mono/Documents/python_test/" nil 5 "test.py:94:d.get('BOb')") ("e7f28e760ef03973db1d9204d457a559bcd25e16" "--from-here=71:test.py append" "/home/mono/Documents/python_test/" nil 5 "test.py:69:mylist.append('\"a\"')") ("38721e0db1de1c5872d9716999ee5fd0b262614f" "--from-here=72:test.py mylist" "/home/mono/Documents/python_test/" nil 5 "test.py:68:mylist = []") ("b9ce2e83a047d740d2233ab878135bac6bffa1cc" "--from-here=16:1.py print_test4" "/home/mono/Documents/python_test/" nil 5 "test.py:46:def print_test4():") ("4aa7b339b26a23750389a44e70d051cbaeb9609c" "--from-here=11:1.py parrot" "/home/mono/Documents/python_test/" nil 5 "test.py:31:def parrot(voltage=\"67\", state='a stiff',action='voom', type='Norwegian Blue'):") ("dd2b7b2e15d93e05ec488a5d94ff42899e892e4a" "--from-here=13:1.py print_test" "/home/mono/Documents/python_test/" nil 5 "test.py:37:def print_test():") ("dc8d5a44454f44cc64625e02ea2f0be0fed229ab" "--from-here=14:1.py print_test2" "/home/mono/Documents/python_test/" nil 5 "test.py:40:def print_test2():")))
(setq-default helm-ff-history '("/home/mono/Documents/tex_projects/aalborg_v1.4.0/" "/home/mono/Documents/tex_projects/beamer_test/" "/home/mono/Documents/blog/test/source/_drafts/" "/home/mono/.emacs.d/" "/home/mono/" "/home/mono/Documents/" "/home/mono/Documents/blog/test/source/_posts/" "/home/mono/Documents/blog/test/" "/home/mono/.emacs.d/lisp/" "/home/mono/Documents/blog/" "/home/mono/Documents/js_projects/" "/home/mono/Documents/python_test/" "/home/mono/Documents/R_Project/"))
(setq-default helm-source-comint-input-ring '((name . "Comint history") (candidates lambda nil (with-helm-current-buffer \.\.\.)) (action . helm-comint-input-ring-action)))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates . #[0 "\301\211:\203  @\262\302\232\204 \303!B\262A\262\202 \211\237\207" [command-history nil \.\.\. prin1-to-string] 5 "

(fn)"]) (action ("Eval" . #[257 "\301\300!\203 \211\302\303\304\305$\207" [helm-sexp--last-sexp boundp run-with-timer 0.1 nil helm-sexp-eval] 6 "

(fn CANDIDATE)"]) ("Edit and eval" . #[257 "\300\301\302!\"\207" [edit-and-eval-command "Eval: " read] 5 "

(fn CANDIDATE)"])) (persistent-action . helm-sexp-eval) (filtered-candidate-transformer helm-fuzzy-highlight-matches) (match helm-mm-exact-match helm-mm-match) (header-line . "C-j: helm-sexp-eval (keeping session)") (dont-plug helm-compile-source--multi-match helm-compile-source--persistent-help helm-compile-source--migemo) (matchplugin)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (action . helm-type-file-actions) (persistent-action . ignore) (filtered-candidate-transformer helm-file-name-history-transformer helm-fuzzy-highlight-matches) (match helm-mm-exact-match helm-mm-match) (header-line . "C-j: ignore (keeping session)") (dont-plug helm-compile-source--multi-match helm-compile-source--persistent-help helm-compile-source--migemo) (matchplugin)))
(setq-default helm-source-info-history '((name . "Info Index: history") (init . helm-info-init) (candidates . helm-candidates-in-buffer) (action ("Goto node" . helm-info-goto)) (filtered-candidate-transformer helm-fuzzy-highlight-matches) (display-to-real . helm-info-display-to-real) (volatile) (match identity) (header-line . "C-j: Goto node (keeping session)") (dont-plug helm-compile-source--candidates-in-buffer helm-compile-source--multi-match helm-compile-source--persistent-help helm-compile-source--migemo) (matchplugin) (get-line . buffer-substring) (search helm-mm-exact-search helm-mm-search helm-candidates-in-buffer-search-default-fn) (info-file . "history")))
(setq-default helm-source-minibuffer-history '((name . "Minibuffer History") (header-name . #[257 "\301\302#\207" [minibuffer-history-variable format "%s (%s)"] 5 "

(fn NAME)"]) (candidates . #[0 "J\301\211:\203 @\262\302\230\204 B\262A\262\202 \211\237\266\203\211@:\2030 \303\304\"\2021 \211\207" [minibuffer-history-variable nil "" mapcar prin1-to-string] 5 "

(fn)"]) (action . #[257 "\300 \210\211c\207" [delete-minibuffer-contents] 2 "

(fn CANDIDATE)"]) (multiline) (filtered-candidate-transformer helm-fuzzy-highlight-matches) (match helm-mm-exact-match helm-mm-match helm-mm-3-migemo-match) (header-line . "C-j: Anonymous (keeping session)") (dont-plug helm-compile-source--multi-match helm-compile-source--persistent-help helm-compile-source--migemo) (matchplugin) (migemo)))
(setq-default info-lookup-history '("latex-mode"))
(setq-default minibuffer-history '("key" "modern" "bug" "emacs" "keymap" "text scale" "set-mark" #("tab" 0 3 (face \.\.\. fontified t)) "/home/mono/Documents/tex_projects/aalborg_v1.4.0/" "/home/mono/Documents/tex_projects/beamer_test/" "/home/mono/Documents/tex_projects/201607_\345\271\264\344\270\255\346\261\207\346\212\245/slide.tex" "org-str"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("," "\357\274\214"))
(setq-default regexp-history '("modern" "textcolor" "todo" "cjk" "installed" "simsun" "song" "you" "get" "script" "^\\s-*$" "^ *$" "^\\s*$" "^\\s+$" "^$"))
(setq-default semantic-completion-default-history '("d"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default shell-command-history '("node -v" "nvm ls" "echo $NVM_DIR" "echo $NVM_BIN" "echo $PATH" "nvm" "npm" "hexo"))
(setq-default smex-history '(apropos org-indent-mode R S cd 5x5 arp))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
(setq-default venv-history '("test2"))
(setq-default yes-or-no-p-history '("yes"))
